// <auto-generated/>
#pragma warning disable CS0618
using Common.Tba.Api.District;
using Common.Tba.Api.Districts;
using Common.Tba.Api.Event;
using Common.Tba.Api.Events;
using Common.Tba.Api.Insights;
using Common.Tba.Api.Match;
using Common.Tba.Api.Search_index;
using Common.Tba.Api.Status;
using Common.Tba.Api.Team;
using Common.Tba.Api.Teams;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace Common.Tba.Api
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiClient : BaseRequestBuilder
    {
        /// <summary>The district property</summary>
        public global::Common.Tba.Api.District.DistrictRequestBuilder District
        {
            get => new global::Common.Tba.Api.District.DistrictRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The districts property</summary>
        public global::Common.Tba.Api.Districts.DistrictsRequestBuilder Districts
        {
            get => new global::Common.Tba.Api.Districts.DistrictsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The event property</summary>
        public global::Common.Tba.Api.Event.EventRequestBuilder Event
        {
            get => new global::Common.Tba.Api.Event.EventRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Common.Tba.Api.Events.EventsRequestBuilder Events
        {
            get => new global::Common.Tba.Api.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The insights property</summary>
        public global::Common.Tba.Api.Insights.InsightsRequestBuilder Insights
        {
            get => new global::Common.Tba.Api.Insights.InsightsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The match property</summary>
        public global::Common.Tba.Api.Match.MatchRequestBuilder Match
        {
            get => new global::Common.Tba.Api.Match.MatchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search_index property</summary>
        public global::Common.Tba.Api.Search_index.Search_indexRequestBuilder Search_index
        {
            get => new global::Common.Tba.Api.Search_index.Search_indexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::Common.Tba.Api.Status.StatusRequestBuilder Status
        {
            get => new global::Common.Tba.Api.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team property</summary>
        public global::Common.Tba.Api.Team.TeamRequestBuilder Team
        {
            get => new global::Common.Tba.Api.Team.TeamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public global::Common.Tba.Api.Teams.TeamsRequestBuilder Teams
        {
            get => new global::Common.Tba.Api.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.ApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://www.thebluealliance.com/api/v3";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
