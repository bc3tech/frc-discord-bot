// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    /// <summary>
    /// The `Media` object contains a reference for most any media associated with a team or event on TBA.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Media : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If required, a JSON dict of additional media information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.Media_details? Details { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.Media_details Details { get; set; }
#endif
        /// <summary>Direct URL to the media.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DirectUrl { get; set; }
#nullable restore
#else
        public string DirectUrl { get; set; }
#endif
        /// <summary>The key used to identify this media on the media site.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForeignKey { get; set; }
#nullable restore
#else
        public string ForeignKey { get; set; }
#endif
        /// <summary>True if the media is of high quality.</summary>
        public bool? Preferred { get; set; }
        /// <summary>List of teams that this media belongs to. Most likely length 1.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TeamKeys { get; set; }
#nullable restore
#else
        public List<string> TeamKeys { get; set; }
#endif
        /// <summary>String type of the media element.</summary>
        public global::Common.Tba.Api.Models.Media_type? Type { get; set; }
        /// <summary>The URL that leads to the full web page for the media, if one exists.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewUrl { get; set; }
#nullable restore
#else
        public string ViewUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Media"/> and sets the default values.
        /// </summary>
        public Media()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Media"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Media CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Media();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "details", n => { Details = n.GetObjectValue<global::Common.Tba.Api.Models.Media_details>(global::Common.Tba.Api.Models.Media_details.CreateFromDiscriminatorValue); } },
                { "direct_url", n => { DirectUrl = n.GetStringValue(); } },
                { "foreign_key", n => { ForeignKey = n.GetStringValue(); } },
                { "preferred", n => { Preferred = n.GetBoolValue(); } },
                { "team_keys", n => { TeamKeys = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::Common.Tba.Api.Models.Media_type>(); } },
                { "view_url", n => { ViewUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Common.Tba.Api.Models.Media_details>("details", Details);
            writer.WriteStringValue("direct_url", DirectUrl);
            writer.WriteStringValue("foreign_key", ForeignKey);
            writer.WriteBoolValue("preferred", Preferred);
            writer.WriteCollectionOfPrimitiveValues<string>("team_keys", TeamKeys);
            writer.WriteEnumValue<global::Common.Tba.Api.Models.Media_type>("type", Type);
            writer.WriteStringValue("view_url", ViewUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
