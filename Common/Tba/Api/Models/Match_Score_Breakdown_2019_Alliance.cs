// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Score_Breakdown_2019_Alliance : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The adjustPoints property</summary>
        public int? AdjustPoints { get; set; }
        /// <summary>The autoPoints property</summary>
        public int? AutoPoints { get; set; }
        /// <summary>The bay1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay1 { get; set; }
#nullable restore
#else
        public string Bay1 { get; set; }
#endif
        /// <summary>The bay2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay2 { get; set; }
#nullable restore
#else
        public string Bay2 { get; set; }
#endif
        /// <summary>The bay3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay3 { get; set; }
#nullable restore
#else
        public string Bay3 { get; set; }
#endif
        /// <summary>The bay4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay4 { get; set; }
#nullable restore
#else
        public string Bay4 { get; set; }
#endif
        /// <summary>The bay5 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay5 { get; set; }
#nullable restore
#else
        public string Bay5 { get; set; }
#endif
        /// <summary>The bay6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay6 { get; set; }
#nullable restore
#else
        public string Bay6 { get; set; }
#endif
        /// <summary>The bay7 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay7 { get; set; }
#nullable restore
#else
        public string Bay7 { get; set; }
#endif
        /// <summary>The bay8 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bay8 { get; set; }
#nullable restore
#else
        public string Bay8 { get; set; }
#endif
        /// <summary>The cargoPoints property</summary>
        public int? CargoPoints { get; set; }
        /// <summary>The completedRocketFar property</summary>
        public bool? CompletedRocketFar { get; set; }
        /// <summary>The completedRocketNear property</summary>
        public bool? CompletedRocketNear { get; set; }
        /// <summary>The completeRocketRankingPoint property</summary>
        public bool? CompleteRocketRankingPoint { get; set; }
        /// <summary>The endgameRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot1 { get; set; }
#nullable restore
#else
        public string EndgameRobot1 { get; set; }
#endif
        /// <summary>The endgameRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot2 { get; set; }
#nullable restore
#else
        public string EndgameRobot2 { get; set; }
#endif
        /// <summary>The endgameRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot3 { get; set; }
#nullable restore
#else
        public string EndgameRobot3 { get; set; }
#endif
        /// <summary>The foulCount property</summary>
        public int? FoulCount { get; set; }
        /// <summary>The foulPoints property</summary>
        public int? FoulPoints { get; set; }
        /// <summary>The habClimbPoints property</summary>
        public int? HabClimbPoints { get; set; }
        /// <summary>The habDockingRankingPoint property</summary>
        public bool? HabDockingRankingPoint { get; set; }
        /// <summary>The habLineRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HabLineRobot1 { get; set; }
#nullable restore
#else
        public string HabLineRobot1 { get; set; }
#endif
        /// <summary>The habLineRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HabLineRobot2 { get; set; }
#nullable restore
#else
        public string HabLineRobot2 { get; set; }
#endif
        /// <summary>The habLineRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HabLineRobot3 { get; set; }
#nullable restore
#else
        public string HabLineRobot3 { get; set; }
#endif
        /// <summary>The hatchPanelPoints property</summary>
        public int? HatchPanelPoints { get; set; }
        /// <summary>The lowLeftRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LowLeftRocketFar { get; set; }
#nullable restore
#else
        public string LowLeftRocketFar { get; set; }
#endif
        /// <summary>The lowLeftRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LowLeftRocketNear { get; set; }
#nullable restore
#else
        public string LowLeftRocketNear { get; set; }
#endif
        /// <summary>The lowRightRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LowRightRocketFar { get; set; }
#nullable restore
#else
        public string LowRightRocketFar { get; set; }
#endif
        /// <summary>The lowRightRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LowRightRocketNear { get; set; }
#nullable restore
#else
        public string LowRightRocketNear { get; set; }
#endif
        /// <summary>The midLeftRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MidLeftRocketFar { get; set; }
#nullable restore
#else
        public string MidLeftRocketFar { get; set; }
#endif
        /// <summary>The midLeftRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MidLeftRocketNear { get; set; }
#nullable restore
#else
        public string MidLeftRocketNear { get; set; }
#endif
        /// <summary>The midRightRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MidRightRocketFar { get; set; }
#nullable restore
#else
        public string MidRightRocketFar { get; set; }
#endif
        /// <summary>The midRightRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MidRightRocketNear { get; set; }
#nullable restore
#else
        public string MidRightRocketNear { get; set; }
#endif
        /// <summary>The preMatchBay1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay1 { get; set; }
#nullable restore
#else
        public string PreMatchBay1 { get; set; }
#endif
        /// <summary>The preMatchBay2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay2 { get; set; }
#nullable restore
#else
        public string PreMatchBay2 { get; set; }
#endif
        /// <summary>The preMatchBay3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay3 { get; set; }
#nullable restore
#else
        public string PreMatchBay3 { get; set; }
#endif
        /// <summary>The preMatchBay6 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay6 { get; set; }
#nullable restore
#else
        public string PreMatchBay6 { get; set; }
#endif
        /// <summary>The preMatchBay7 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay7 { get; set; }
#nullable restore
#else
        public string PreMatchBay7 { get; set; }
#endif
        /// <summary>The preMatchBay8 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchBay8 { get; set; }
#nullable restore
#else
        public string PreMatchBay8 { get; set; }
#endif
        /// <summary>The preMatchLevelRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchLevelRobot1 { get; set; }
#nullable restore
#else
        public string PreMatchLevelRobot1 { get; set; }
#endif
        /// <summary>The preMatchLevelRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchLevelRobot2 { get; set; }
#nullable restore
#else
        public string PreMatchLevelRobot2 { get; set; }
#endif
        /// <summary>The preMatchLevelRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreMatchLevelRobot3 { get; set; }
#nullable restore
#else
        public string PreMatchLevelRobot3 { get; set; }
#endif
        /// <summary>The rp property</summary>
        public int? Rp { get; set; }
        /// <summary>The sandStormBonusPoints property</summary>
        public int? SandStormBonusPoints { get; set; }
        /// <summary>The techFoulCount property</summary>
        public int? TechFoulCount { get; set; }
        /// <summary>The teleopPoints property</summary>
        public int? TeleopPoints { get; set; }
        /// <summary>The topLeftRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopLeftRocketFar { get; set; }
#nullable restore
#else
        public string TopLeftRocketFar { get; set; }
#endif
        /// <summary>The topLeftRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopLeftRocketNear { get; set; }
#nullable restore
#else
        public string TopLeftRocketNear { get; set; }
#endif
        /// <summary>The topRightRocketFar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopRightRocketFar { get; set; }
#nullable restore
#else
        public string TopRightRocketFar { get; set; }
#endif
        /// <summary>The topRightRocketNear property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopRightRocketNear { get; set; }
#nullable restore
#else
        public string TopRightRocketNear { get; set; }
#endif
        /// <summary>The totalPoints property</summary>
        public int? TotalPoints { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2019_Alliance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Score_Breakdown_2019_Alliance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Score_Breakdown_2019_Alliance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjustPoints", n => { AdjustPoints = n.GetIntValue(); } },
                { "autoPoints", n => { AutoPoints = n.GetIntValue(); } },
                { "bay1", n => { Bay1 = n.GetStringValue(); } },
                { "bay2", n => { Bay2 = n.GetStringValue(); } },
                { "bay3", n => { Bay3 = n.GetStringValue(); } },
                { "bay4", n => { Bay4 = n.GetStringValue(); } },
                { "bay5", n => { Bay5 = n.GetStringValue(); } },
                { "bay6", n => { Bay6 = n.GetStringValue(); } },
                { "bay7", n => { Bay7 = n.GetStringValue(); } },
                { "bay8", n => { Bay8 = n.GetStringValue(); } },
                { "cargoPoints", n => { CargoPoints = n.GetIntValue(); } },
                { "completeRocketRankingPoint", n => { CompleteRocketRankingPoint = n.GetBoolValue(); } },
                { "completedRocketFar", n => { CompletedRocketFar = n.GetBoolValue(); } },
                { "completedRocketNear", n => { CompletedRocketNear = n.GetBoolValue(); } },
                { "endgameRobot1", n => { EndgameRobot1 = n.GetStringValue(); } },
                { "endgameRobot2", n => { EndgameRobot2 = n.GetStringValue(); } },
                { "endgameRobot3", n => { EndgameRobot3 = n.GetStringValue(); } },
                { "foulCount", n => { FoulCount = n.GetIntValue(); } },
                { "foulPoints", n => { FoulPoints = n.GetIntValue(); } },
                { "habClimbPoints", n => { HabClimbPoints = n.GetIntValue(); } },
                { "habDockingRankingPoint", n => { HabDockingRankingPoint = n.GetBoolValue(); } },
                { "habLineRobot1", n => { HabLineRobot1 = n.GetStringValue(); } },
                { "habLineRobot2", n => { HabLineRobot2 = n.GetStringValue(); } },
                { "habLineRobot3", n => { HabLineRobot3 = n.GetStringValue(); } },
                { "hatchPanelPoints", n => { HatchPanelPoints = n.GetIntValue(); } },
                { "lowLeftRocketFar", n => { LowLeftRocketFar = n.GetStringValue(); } },
                { "lowLeftRocketNear", n => { LowLeftRocketNear = n.GetStringValue(); } },
                { "lowRightRocketFar", n => { LowRightRocketFar = n.GetStringValue(); } },
                { "lowRightRocketNear", n => { LowRightRocketNear = n.GetStringValue(); } },
                { "midLeftRocketFar", n => { MidLeftRocketFar = n.GetStringValue(); } },
                { "midLeftRocketNear", n => { MidLeftRocketNear = n.GetStringValue(); } },
                { "midRightRocketFar", n => { MidRightRocketFar = n.GetStringValue(); } },
                { "midRightRocketNear", n => { MidRightRocketNear = n.GetStringValue(); } },
                { "preMatchBay1", n => { PreMatchBay1 = n.GetStringValue(); } },
                { "preMatchBay2", n => { PreMatchBay2 = n.GetStringValue(); } },
                { "preMatchBay3", n => { PreMatchBay3 = n.GetStringValue(); } },
                { "preMatchBay6", n => { PreMatchBay6 = n.GetStringValue(); } },
                { "preMatchBay7", n => { PreMatchBay7 = n.GetStringValue(); } },
                { "preMatchBay8", n => { PreMatchBay8 = n.GetStringValue(); } },
                { "preMatchLevelRobot1", n => { PreMatchLevelRobot1 = n.GetStringValue(); } },
                { "preMatchLevelRobot2", n => { PreMatchLevelRobot2 = n.GetStringValue(); } },
                { "preMatchLevelRobot3", n => { PreMatchLevelRobot3 = n.GetStringValue(); } },
                { "rp", n => { Rp = n.GetIntValue(); } },
                { "sandStormBonusPoints", n => { SandStormBonusPoints = n.GetIntValue(); } },
                { "techFoulCount", n => { TechFoulCount = n.GetIntValue(); } },
                { "teleopPoints", n => { TeleopPoints = n.GetIntValue(); } },
                { "topLeftRocketFar", n => { TopLeftRocketFar = n.GetStringValue(); } },
                { "topLeftRocketNear", n => { TopLeftRocketNear = n.GetStringValue(); } },
                { "topRightRocketFar", n => { TopRightRocketFar = n.GetStringValue(); } },
                { "topRightRocketNear", n => { TopRightRocketNear = n.GetStringValue(); } },
                { "totalPoints", n => { TotalPoints = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjustPoints", AdjustPoints);
            writer.WriteIntValue("autoPoints", AutoPoints);
            writer.WriteStringValue("bay1", Bay1);
            writer.WriteStringValue("bay2", Bay2);
            writer.WriteStringValue("bay3", Bay3);
            writer.WriteStringValue("bay4", Bay4);
            writer.WriteStringValue("bay5", Bay5);
            writer.WriteStringValue("bay6", Bay6);
            writer.WriteStringValue("bay7", Bay7);
            writer.WriteStringValue("bay8", Bay8);
            writer.WriteIntValue("cargoPoints", CargoPoints);
            writer.WriteBoolValue("completedRocketFar", CompletedRocketFar);
            writer.WriteBoolValue("completedRocketNear", CompletedRocketNear);
            writer.WriteBoolValue("completeRocketRankingPoint", CompleteRocketRankingPoint);
            writer.WriteStringValue("endgameRobot1", EndgameRobot1);
            writer.WriteStringValue("endgameRobot2", EndgameRobot2);
            writer.WriteStringValue("endgameRobot3", EndgameRobot3);
            writer.WriteIntValue("foulCount", FoulCount);
            writer.WriteIntValue("foulPoints", FoulPoints);
            writer.WriteIntValue("habClimbPoints", HabClimbPoints);
            writer.WriteBoolValue("habDockingRankingPoint", HabDockingRankingPoint);
            writer.WriteStringValue("habLineRobot1", HabLineRobot1);
            writer.WriteStringValue("habLineRobot2", HabLineRobot2);
            writer.WriteStringValue("habLineRobot3", HabLineRobot3);
            writer.WriteIntValue("hatchPanelPoints", HatchPanelPoints);
            writer.WriteStringValue("lowLeftRocketFar", LowLeftRocketFar);
            writer.WriteStringValue("lowLeftRocketNear", LowLeftRocketNear);
            writer.WriteStringValue("lowRightRocketFar", LowRightRocketFar);
            writer.WriteStringValue("lowRightRocketNear", LowRightRocketNear);
            writer.WriteStringValue("midLeftRocketFar", MidLeftRocketFar);
            writer.WriteStringValue("midLeftRocketNear", MidLeftRocketNear);
            writer.WriteStringValue("midRightRocketFar", MidRightRocketFar);
            writer.WriteStringValue("midRightRocketNear", MidRightRocketNear);
            writer.WriteStringValue("preMatchBay1", PreMatchBay1);
            writer.WriteStringValue("preMatchBay2", PreMatchBay2);
            writer.WriteStringValue("preMatchBay3", PreMatchBay3);
            writer.WriteStringValue("preMatchBay6", PreMatchBay6);
            writer.WriteStringValue("preMatchBay7", PreMatchBay7);
            writer.WriteStringValue("preMatchBay8", PreMatchBay8);
            writer.WriteStringValue("preMatchLevelRobot1", PreMatchLevelRobot1);
            writer.WriteStringValue("preMatchLevelRobot2", PreMatchLevelRobot2);
            writer.WriteStringValue("preMatchLevelRobot3", PreMatchLevelRobot3);
            writer.WriteIntValue("rp", Rp);
            writer.WriteIntValue("sandStormBonusPoints", SandStormBonusPoints);
            writer.WriteIntValue("techFoulCount", TechFoulCount);
            writer.WriteIntValue("teleopPoints", TeleopPoints);
            writer.WriteStringValue("topLeftRocketFar", TopLeftRocketFar);
            writer.WriteStringValue("topLeftRocketNear", TopLeftRocketNear);
            writer.WriteStringValue("topRightRocketFar", TopRightRocketFar);
            writer.WriteStringValue("topRightRocketNear", TopRightRocketNear);
            writer.WriteIntValue("totalPoints", TotalPoints);
        }
    }
}
#pragma warning restore CS0618
