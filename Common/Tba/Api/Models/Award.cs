// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Award : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6</summary>
        public int? AwardType { get; set; }
        /// <summary>The event_key of the event the award was won at.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventKey { get; set; }
#nullable restore
#else
        public string EventKey { get; set; }
#endif
        /// <summary>The name of the award as provided by FIRST. May vary for the same award type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn&apos;t awarded at the event).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Common.Tba.Api.Models.Award_Recipient>? RecipientList { get; set; }
#nullable restore
#else
        public List<global::Common.Tba.Api.Models.Award_Recipient> RecipientList { get; set; }
#endif
        /// <summary>The year this award was won.</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Award"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Award CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Award();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "award_type", n => { AwardType = n.GetIntValue(); } },
                { "event_key", n => { EventKey = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "recipient_list", n => { RecipientList = n.GetCollectionOfObjectValues<global::Common.Tba.Api.Models.Award_Recipient>(global::Common.Tba.Api.Models.Award_Recipient.CreateFromDiscriminatorValue)?.AsList(); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("award_type", AwardType);
            writer.WriteStringValue("event_key", EventKey);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::Common.Tba.Api.Models.Award_Recipient>("recipient_list", RecipientList);
            writer.WriteIntValue("year", Year);
        }
    }
}
#pragma warning restore CS0618
