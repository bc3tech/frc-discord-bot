// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Score_Breakdown_2020_Alliance : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adjustPoints property</summary>
        public int? AdjustPoints { get; set; }
        /// <summary>The autoCellPoints property</summary>
        public int? AutoCellPoints { get; set; }
        /// <summary>The autoCellsBottom property</summary>
        public int? AutoCellsBottom { get; set; }
        /// <summary>The autoCellsInner property</summary>
        public int? AutoCellsInner { get; set; }
        /// <summary>The autoCellsOuter property</summary>
        public int? AutoCellsOuter { get; set; }
        /// <summary>The autoInitLinePoints property</summary>
        public int? AutoInitLinePoints { get; set; }
        /// <summary>The autoPoints property</summary>
        public int? AutoPoints { get; set; }
        /// <summary>The controlPanelPoints property</summary>
        public int? ControlPanelPoints { get; set; }
        /// <summary>The endgamePoints property</summary>
        public int? EndgamePoints { get; set; }
        /// <summary>The endgameRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot1 { get; set; }
#nullable restore
#else
        public string EndgameRobot1 { get; set; }
#endif
        /// <summary>The endgameRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot2 { get; set; }
#nullable restore
#else
        public string EndgameRobot2 { get; set; }
#endif
        /// <summary>The endgameRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot3 { get; set; }
#nullable restore
#else
        public string EndgameRobot3 { get; set; }
#endif
        /// <summary>The endgameRungIsLevel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRungIsLevel { get; set; }
#nullable restore
#else
        public string EndgameRungIsLevel { get; set; }
#endif
        /// <summary>The foulCount property</summary>
        public int? FoulCount { get; set; }
        /// <summary>The foulPoints property</summary>
        public int? FoulPoints { get; set; }
        /// <summary>The initLineRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitLineRobot1 { get; set; }
#nullable restore
#else
        public string InitLineRobot1 { get; set; }
#endif
        /// <summary>The initLineRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitLineRobot2 { get; set; }
#nullable restore
#else
        public string InitLineRobot2 { get; set; }
#endif
        /// <summary>The initLineRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InitLineRobot3 { get; set; }
#nullable restore
#else
        public string InitLineRobot3 { get; set; }
#endif
        /// <summary>The rp property</summary>
        public int? Rp { get; set; }
        /// <summary>The shieldEnergizedRankingPoint property</summary>
        public bool? ShieldEnergizedRankingPoint { get; set; }
        /// <summary>The shieldOperationalRankingPoint property</summary>
        public bool? ShieldOperationalRankingPoint { get; set; }
        /// <summary>The stage1Activated property</summary>
        public bool? Stage1Activated { get; set; }
        /// <summary>The stage2Activated property</summary>
        public bool? Stage2Activated { get; set; }
        /// <summary>The stage3Activated property</summary>
        public bool? Stage3Activated { get; set; }
        /// <summary>The stage3TargetColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stage3TargetColor { get; set; }
#nullable restore
#else
        public string Stage3TargetColor { get; set; }
#endif
        /// <summary>Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.</summary>
        public int? TbaNumRobotsHanging { get; set; }
        /// <summary>Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.</summary>
        public bool? TbaShieldEnergizedRankingPointFromFoul { get; set; }
        /// <summary>The techFoulCount property</summary>
        public int? TechFoulCount { get; set; }
        /// <summary>The teleopCellPoints property</summary>
        public int? TeleopCellPoints { get; set; }
        /// <summary>The teleopCellsBottom property</summary>
        public int? TeleopCellsBottom { get; set; }
        /// <summary>The teleopCellsInner property</summary>
        public int? TeleopCellsInner { get; set; }
        /// <summary>The teleopCellsOuter property</summary>
        public int? TeleopCellsOuter { get; set; }
        /// <summary>The teleopPoints property</summary>
        public int? TeleopPoints { get; set; }
        /// <summary>The totalPoints property</summary>
        public int? TotalPoints { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2020_Alliance"/> and sets the default values.
        /// </summary>
        public Match_Score_Breakdown_2020_Alliance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2020_Alliance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Score_Breakdown_2020_Alliance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Score_Breakdown_2020_Alliance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjustPoints", n => { AdjustPoints = n.GetIntValue(); } },
                { "autoCellPoints", n => { AutoCellPoints = n.GetIntValue(); } },
                { "autoCellsBottom", n => { AutoCellsBottom = n.GetIntValue(); } },
                { "autoCellsInner", n => { AutoCellsInner = n.GetIntValue(); } },
                { "autoCellsOuter", n => { AutoCellsOuter = n.GetIntValue(); } },
                { "autoInitLinePoints", n => { AutoInitLinePoints = n.GetIntValue(); } },
                { "autoPoints", n => { AutoPoints = n.GetIntValue(); } },
                { "controlPanelPoints", n => { ControlPanelPoints = n.GetIntValue(); } },
                { "endgamePoints", n => { EndgamePoints = n.GetIntValue(); } },
                { "endgameRobot1", n => { EndgameRobot1 = n.GetStringValue(); } },
                { "endgameRobot2", n => { EndgameRobot2 = n.GetStringValue(); } },
                { "endgameRobot3", n => { EndgameRobot3 = n.GetStringValue(); } },
                { "endgameRungIsLevel", n => { EndgameRungIsLevel = n.GetStringValue(); } },
                { "foulCount", n => { FoulCount = n.GetIntValue(); } },
                { "foulPoints", n => { FoulPoints = n.GetIntValue(); } },
                { "initLineRobot1", n => { InitLineRobot1 = n.GetStringValue(); } },
                { "initLineRobot2", n => { InitLineRobot2 = n.GetStringValue(); } },
                { "initLineRobot3", n => { InitLineRobot3 = n.GetStringValue(); } },
                { "rp", n => { Rp = n.GetIntValue(); } },
                { "shieldEnergizedRankingPoint", n => { ShieldEnergizedRankingPoint = n.GetBoolValue(); } },
                { "shieldOperationalRankingPoint", n => { ShieldOperationalRankingPoint = n.GetBoolValue(); } },
                { "stage1Activated", n => { Stage1Activated = n.GetBoolValue(); } },
                { "stage2Activated", n => { Stage2Activated = n.GetBoolValue(); } },
                { "stage3Activated", n => { Stage3Activated = n.GetBoolValue(); } },
                { "stage3TargetColor", n => { Stage3TargetColor = n.GetStringValue(); } },
                { "tba_numRobotsHanging", n => { TbaNumRobotsHanging = n.GetIntValue(); } },
                { "tba_shieldEnergizedRankingPointFromFoul", n => { TbaShieldEnergizedRankingPointFromFoul = n.GetBoolValue(); } },
                { "techFoulCount", n => { TechFoulCount = n.GetIntValue(); } },
                { "teleopCellPoints", n => { TeleopCellPoints = n.GetIntValue(); } },
                { "teleopCellsBottom", n => { TeleopCellsBottom = n.GetIntValue(); } },
                { "teleopCellsInner", n => { TeleopCellsInner = n.GetIntValue(); } },
                { "teleopCellsOuter", n => { TeleopCellsOuter = n.GetIntValue(); } },
                { "teleopPoints", n => { TeleopPoints = n.GetIntValue(); } },
                { "totalPoints", n => { TotalPoints = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjustPoints", AdjustPoints);
            writer.WriteIntValue("autoCellPoints", AutoCellPoints);
            writer.WriteIntValue("autoCellsBottom", AutoCellsBottom);
            writer.WriteIntValue("autoCellsInner", AutoCellsInner);
            writer.WriteIntValue("autoCellsOuter", AutoCellsOuter);
            writer.WriteIntValue("autoInitLinePoints", AutoInitLinePoints);
            writer.WriteIntValue("autoPoints", AutoPoints);
            writer.WriteIntValue("controlPanelPoints", ControlPanelPoints);
            writer.WriteIntValue("endgamePoints", EndgamePoints);
            writer.WriteStringValue("endgameRobot1", EndgameRobot1);
            writer.WriteStringValue("endgameRobot2", EndgameRobot2);
            writer.WriteStringValue("endgameRobot3", EndgameRobot3);
            writer.WriteStringValue("endgameRungIsLevel", EndgameRungIsLevel);
            writer.WriteIntValue("foulCount", FoulCount);
            writer.WriteIntValue("foulPoints", FoulPoints);
            writer.WriteStringValue("initLineRobot1", InitLineRobot1);
            writer.WriteStringValue("initLineRobot2", InitLineRobot2);
            writer.WriteStringValue("initLineRobot3", InitLineRobot3);
            writer.WriteIntValue("rp", Rp);
            writer.WriteBoolValue("shieldEnergizedRankingPoint", ShieldEnergizedRankingPoint);
            writer.WriteBoolValue("shieldOperationalRankingPoint", ShieldOperationalRankingPoint);
            writer.WriteBoolValue("stage1Activated", Stage1Activated);
            writer.WriteBoolValue("stage2Activated", Stage2Activated);
            writer.WriteBoolValue("stage3Activated", Stage3Activated);
            writer.WriteStringValue("stage3TargetColor", Stage3TargetColor);
            writer.WriteIntValue("tba_numRobotsHanging", TbaNumRobotsHanging);
            writer.WriteBoolValue("tba_shieldEnergizedRankingPointFromFoul", TbaShieldEnergizedRankingPointFromFoul);
            writer.WriteIntValue("techFoulCount", TechFoulCount);
            writer.WriteIntValue("teleopCellPoints", TeleopCellPoints);
            writer.WriteIntValue("teleopCellsBottom", TeleopCellsBottom);
            writer.WriteIntValue("teleopCellsInner", TeleopCellsInner);
            writer.WriteIntValue("teleopCellsOuter", TeleopCellsOuter);
            writer.WriteIntValue("teleopPoints", TeleopPoints);
            writer.WriteIntValue("totalPoints", TotalPoints);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
