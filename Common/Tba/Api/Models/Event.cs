// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Event : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Address of the event&apos;s venue, if available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>City, town, village, etc. the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Country the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The district property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.District_List? District { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.District_List District { get; set; }
#endif
        /// <summary>An array of event keys for the divisions at this event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DivisionKeys { get; set; }
#nullable restore
#else
        public List<string> DivisionKeys { get; set; }
#endif
        /// <summary>Event end date in `yyyy-mm-dd` format.</summary>
        public Date? EndDate { get; set; }
        /// <summary>Event short code, as provided by FIRST.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventCode { get; set; }
#nullable restore
#else
        public string EventCode { get; set; }
#endif
        /// <summary>Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2</summary>
        public int? EventType { get; set; }
        /// <summary>Event Type, eg Regional, District, or Offseason.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventTypeString { get; set; }
#nullable restore
#else
        public string EventTypeString { get; set; }
#endif
        /// <summary>Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstEventCode { get; set; }
#nullable restore
#else
        public string FirstEventCode { get; set; }
#endif
        /// <summary>The FIRST internal Event ID, used to link to the event on the FRC webpage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstEventId { get; set; }
#nullable restore
#else
        public string FirstEventId { get; set; }
#endif
        /// <summary>Google Maps Place ID for the event address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GmapsPlaceId { get; set; }
#nullable restore
#else
        public string GmapsPlaceId { get; set; }
#endif
        /// <summary>Link to address location on Google Maps.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GmapsUrl { get; set; }
#nullable restore
#else
        public string GmapsUrl { get; set; }
#endif
        /// <summary>TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Latitude for the event address.</summary>
        public double? Lat { get; set; }
        /// <summary>Longitude for the event address.</summary>
        public double? Lng { get; set; }
        /// <summary>Name of the location at the address for the event, eg. Blue Alliance High School.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocationName { get; set; }
#nullable restore
#else
        public string LocationName { get; set; }
#endif
        /// <summary>Official name of event on record either provided by FIRST or organizers of offseason event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The TBA Event key that represents the event&apos;s parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParentEventKey { get; set; }
#nullable restore
#else
        public string ParentEventKey { get; set; }
#endif
        /// <summary>Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.</summary>
        public int? PlayoffType { get; set; }
        /// <summary>String representation of the `playoff_type`, or null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlayoffTypeString { get; set; }
#nullable restore
#else
        public string PlayoffTypeString { get; set; }
#endif
        /// <summary>Postal code from the event address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; set; }
#nullable restore
#else
        public string PostalCode { get; set; }
#endif
        /// <summary>Same as `name` but doesn&apos;t include event specifiers, such as &apos;Regional&apos; or &apos;District&apos;. May be null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortName { get; set; }
#nullable restore
#else
        public string ShortName { get; set; }
#endif
        /// <summary>Event start date in `yyyy-mm-dd` format.</summary>
        public Date? StartDate { get; set; }
        /// <summary>State or Province the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProv { get; set; }
#nullable restore
#else
        public string StateProv { get; set; }
#endif
        /// <summary>Timezone name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timezone { get; set; }
#nullable restore
#else
        public string Timezone { get; set; }
#endif
        /// <summary>The webcasts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Common.Tba.Api.Models.Webcast>? Webcasts { get; set; }
#nullable restore
#else
        public List<global::Common.Tba.Api.Models.Webcast> Webcasts { get; set; }
#endif
        /// <summary>The event&apos;s website, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &apos;preseason&apos; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)</summary>
        public int? Week { get; set; }
        /// <summary>Year the event data is for.</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Event"/> and sets the default values.
        /// </summary>
        public Event()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Event"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Event CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Event();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "district", n => { District = n.GetObjectValue<global::Common.Tba.Api.Models.District_List>(global::Common.Tba.Api.Models.District_List.CreateFromDiscriminatorValue); } },
                { "division_keys", n => { DivisionKeys = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "end_date", n => { EndDate = n.GetDateValue(); } },
                { "event_code", n => { EventCode = n.GetStringValue(); } },
                { "event_type", n => { EventType = n.GetIntValue(); } },
                { "event_type_string", n => { EventTypeString = n.GetStringValue(); } },
                { "first_event_code", n => { FirstEventCode = n.GetStringValue(); } },
                { "first_event_id", n => { FirstEventId = n.GetStringValue(); } },
                { "gmaps_place_id", n => { GmapsPlaceId = n.GetStringValue(); } },
                { "gmaps_url", n => { GmapsUrl = n.GetStringValue(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "lat", n => { Lat = n.GetDoubleValue(); } },
                { "lng", n => { Lng = n.GetDoubleValue(); } },
                { "location_name", n => { LocationName = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "parent_event_key", n => { ParentEventKey = n.GetStringValue(); } },
                { "playoff_type", n => { PlayoffType = n.GetIntValue(); } },
                { "playoff_type_string", n => { PlayoffTypeString = n.GetStringValue(); } },
                { "postal_code", n => { PostalCode = n.GetStringValue(); } },
                { "short_name", n => { ShortName = n.GetStringValue(); } },
                { "start_date", n => { StartDate = n.GetDateValue(); } },
                { "state_prov", n => { StateProv = n.GetStringValue(); } },
                { "timezone", n => { Timezone = n.GetStringValue(); } },
                { "webcasts", n => { Webcasts = n.GetCollectionOfObjectValues<global::Common.Tba.Api.Models.Webcast>(global::Common.Tba.Api.Models.Webcast.CreateFromDiscriminatorValue)?.AsList(); } },
                { "website", n => { Website = n.GetStringValue(); } },
                { "week", n => { Week = n.GetIntValue(); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country", Country);
            writer.WriteObjectValue<global::Common.Tba.Api.Models.District_List>("district", District);
            writer.WriteCollectionOfPrimitiveValues<string>("division_keys", DivisionKeys);
            writer.WriteDateValue("end_date", EndDate);
            writer.WriteStringValue("event_code", EventCode);
            writer.WriteIntValue("event_type", EventType);
            writer.WriteStringValue("event_type_string", EventTypeString);
            writer.WriteStringValue("first_event_code", FirstEventCode);
            writer.WriteStringValue("first_event_id", FirstEventId);
            writer.WriteStringValue("gmaps_place_id", GmapsPlaceId);
            writer.WriteStringValue("gmaps_url", GmapsUrl);
            writer.WriteStringValue("key", Key);
            writer.WriteDoubleValue("lat", Lat);
            writer.WriteDoubleValue("lng", Lng);
            writer.WriteStringValue("location_name", LocationName);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("parent_event_key", ParentEventKey);
            writer.WriteIntValue("playoff_type", PlayoffType);
            writer.WriteStringValue("playoff_type_string", PlayoffTypeString);
            writer.WriteStringValue("postal_code", PostalCode);
            writer.WriteStringValue("short_name", ShortName);
            writer.WriteDateValue("start_date", StartDate);
            writer.WriteStringValue("state_prov", StateProv);
            writer.WriteStringValue("timezone", Timezone);
            writer.WriteCollectionOfObjectValues<global::Common.Tba.Api.Models.Webcast>("webcasts", Webcasts);
            writer.WriteStringValue("website", Website);
            writer.WriteIntValue("week", Week);
            writer.WriteIntValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
