// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Team_Event_Status_rank_ranking : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of matches the team was disqualified for.</summary>
        public int? Dq { get; set; }
        /// <summary>Number of matches played.</summary>
        public int? MatchesPlayed { get; set; }
        /// <summary>For some years, average qualification score. Can be null.</summary>
        public double? QualAverage { get; set; }
        /// <summary>Relative rank of this team.</summary>
        public int? Rank { get; set; }
        /// <summary>A Win-Loss-Tie record for a team, or an alliance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.WLT_Record? Record { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.WLT_Record Record { get; set; }
#endif
        /// <summary>Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? SortOrders { get; set; }
#nullable restore
#else
        public List<double?> SortOrders { get; set; }
#endif
        /// <summary>TBA team key for this rank.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamKey { get; set; }
#nullable restore
#else
        public string TeamKey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Team_Event_Status_rank_ranking"/> and sets the default values.
        /// </summary>
        public Team_Event_Status_rank_ranking()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Team_Event_Status_rank_ranking"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Team_Event_Status_rank_ranking CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Team_Event_Status_rank_ranking();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dq", n => { Dq = n.GetIntValue(); } },
                { "matches_played", n => { MatchesPlayed = n.GetIntValue(); } },
                { "qual_average", n => { QualAverage = n.GetDoubleValue(); } },
                { "rank", n => { Rank = n.GetIntValue(); } },
                { "record", n => { Record = n.GetObjectValue<global::Common.Tba.Api.Models.WLT_Record>(global::Common.Tba.Api.Models.WLT_Record.CreateFromDiscriminatorValue); } },
                { "sort_orders", n => { SortOrders = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "team_key", n => { TeamKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("dq", Dq);
            writer.WriteIntValue("matches_played", MatchesPlayed);
            writer.WriteDoubleValue("qual_average", QualAverage);
            writer.WriteIntValue("rank", Rank);
            writer.WriteObjectValue<global::Common.Tba.Api.Models.WLT_Record>("record", Record);
            writer.WriteCollectionOfPrimitiveValues<double?>("sort_orders", SortOrders);
            writer.WriteStringValue("team_key", TeamKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
