// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class District_Ranking_event_points : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Points awarded for alliance selection.</summary>
        public int? AlliancePoints { get; set; }
        /// <summary>Points awarded for event awards.</summary>
        public int? AwardPoints { get; set; }
        /// <summary>`true` if this event is a District Championship event.</summary>
        public bool? DistrictCmp { get; set; }
        /// <summary>Points awarded for elimination match performance.</summary>
        public int? ElimPoints { get; set; }
        /// <summary>TBA Event key for this event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventKey { get; set; }
#nullable restore
#else
        public string EventKey { get; set; }
#endif
        /// <summary>Points awarded for qualification match performance.</summary>
        public int? QualPoints { get; set; }
        /// <summary>Total points awarded at this event.</summary>
        public int? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.District_Ranking_event_points"/> and sets the default values.
        /// </summary>
        public District_Ranking_event_points()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.District_Ranking_event_points"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.District_Ranking_event_points CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.District_Ranking_event_points();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alliance_points", n => { AlliancePoints = n.GetIntValue(); } },
                { "award_points", n => { AwardPoints = n.GetIntValue(); } },
                { "district_cmp", n => { DistrictCmp = n.GetBoolValue(); } },
                { "elim_points", n => { ElimPoints = n.GetIntValue(); } },
                { "event_key", n => { EventKey = n.GetStringValue(); } },
                { "qual_points", n => { QualPoints = n.GetIntValue(); } },
                { "total", n => { Total = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("alliance_points", AlliancePoints);
            writer.WriteIntValue("award_points", AwardPoints);
            writer.WriteBoolValue("district_cmp", DistrictCmp);
            writer.WriteIntValue("elim_points", ElimPoints);
            writer.WriteStringValue("event_key", EventKey);
            writer.WriteIntValue("qual_points", QualPoints);
            writer.WriteIntValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
