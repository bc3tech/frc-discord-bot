// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Simple : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.</summary>
        public long? ActualTime { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A list of alliances, the teams on the alliances, and their score.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.Match_Simple_alliances? Alliances { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.Match_Simple_alliances Alliances { get; set; }
#endif
        /// <summary>The competition level the match was played at.</summary>
        public global::Common.Tba.Api.Models.Match_Simple_comp_level? CompLevel { get; set; }
        /// <summary>Event key of the event the match was played at.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventKey { get; set; }
#nullable restore
#else
        public string EventKey { get; set; }
#endif
        /// <summary>TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The match number of the match in the competition level.</summary>
        public int? MatchNumber { get; set; }
        /// <summary>UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.</summary>
        public long? PredictedTime { get; set; }
        /// <summary>The set number in a series of matches where more than one match is required in the match series.</summary>
        public int? SetNumber { get; set; }
        /// <summary>UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.</summary>
        public long? Time { get; set; }
        /// <summary>The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.</summary>
        public global::Common.Tba.Api.Models.Match_Simple_winning_alliance? WinningAlliance { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Match_Simple"/> and sets the default values.
        /// </summary>
        public Match_Simple()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Simple"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Simple CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Simple();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actual_time", n => { ActualTime = n.GetLongValue(); } },
                { "alliances", n => { Alliances = n.GetObjectValue<global::Common.Tba.Api.Models.Match_Simple_alliances>(global::Common.Tba.Api.Models.Match_Simple_alliances.CreateFromDiscriminatorValue); } },
                { "comp_level", n => { CompLevel = n.GetEnumValue<global::Common.Tba.Api.Models.Match_Simple_comp_level>(); } },
                { "event_key", n => { EventKey = n.GetStringValue(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "match_number", n => { MatchNumber = n.GetIntValue(); } },
                { "predicted_time", n => { PredictedTime = n.GetLongValue(); } },
                { "set_number", n => { SetNumber = n.GetIntValue(); } },
                { "time", n => { Time = n.GetLongValue(); } },
                { "winning_alliance", n => { WinningAlliance = n.GetEnumValue<global::Common.Tba.Api.Models.Match_Simple_winning_alliance>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("actual_time", ActualTime);
            writer.WriteObjectValue<global::Common.Tba.Api.Models.Match_Simple_alliances>("alliances", Alliances);
            writer.WriteEnumValue<global::Common.Tba.Api.Models.Match_Simple_comp_level>("comp_level", CompLevel);
            writer.WriteStringValue("event_key", EventKey);
            writer.WriteStringValue("key", Key);
            writer.WriteIntValue("match_number", MatchNumber);
            writer.WriteLongValue("predicted_time", PredictedTime);
            writer.WriteIntValue("set_number", SetNumber);
            writer.WriteLongValue("time", Time);
            writer.WriteEnumValue<global::Common.Tba.Api.Models.Match_Simple_winning_alliance>("winning_alliance", WinningAlliance);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
