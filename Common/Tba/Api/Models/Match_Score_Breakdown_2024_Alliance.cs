// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Score_Breakdown_2024_Alliance : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adjustPoints property</summary>
        public int? AdjustPoints { get; set; }
        /// <summary>The autoAmpNoteCount property</summary>
        public int? AutoAmpNoteCount { get; set; }
        /// <summary>The autoAmpNotePoints property</summary>
        public int? AutoAmpNotePoints { get; set; }
        /// <summary>The autoLeavePoints property</summary>
        public int? AutoLeavePoints { get; set; }
        /// <summary>The autoLineRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoLineRobot1 { get; set; }
#nullable restore
#else
        public string AutoLineRobot1 { get; set; }
#endif
        /// <summary>The autoLineRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoLineRobot2 { get; set; }
#nullable restore
#else
        public string AutoLineRobot2 { get; set; }
#endif
        /// <summary>The autoLineRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoLineRobot3 { get; set; }
#nullable restore
#else
        public string AutoLineRobot3 { get; set; }
#endif
        /// <summary>The autoPoints property</summary>
        public int? AutoPoints { get; set; }
        /// <summary>The autoSpeakerNoteCount property</summary>
        public int? AutoSpeakerNoteCount { get; set; }
        /// <summary>The autoSpeakerNotePoints property</summary>
        public int? AutoSpeakerNotePoints { get; set; }
        /// <summary>The autoTotalNotePoints property</summary>
        public int? AutoTotalNotePoints { get; set; }
        /// <summary>The coopertitionBonusAchieved property</summary>
        public bool? CoopertitionBonusAchieved { get; set; }
        /// <summary>The coopertitionCriteriaMet property</summary>
        public bool? CoopertitionCriteriaMet { get; set; }
        /// <summary>The coopNotePlayed property</summary>
        public bool? CoopNotePlayed { get; set; }
        /// <summary>The endGameHarmonyPoints property</summary>
        public int? EndGameHarmonyPoints { get; set; }
        /// <summary>The endGameNoteInTrapPoints property</summary>
        public int? EndGameNoteInTrapPoints { get; set; }
        /// <summary>The endGameOnStagePoints property</summary>
        public int? EndGameOnStagePoints { get; set; }
        /// <summary>The endGameParkPoints property</summary>
        public int? EndGameParkPoints { get; set; }
        /// <summary>The endGameRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndGameRobot1 { get; set; }
#nullable restore
#else
        public string EndGameRobot1 { get; set; }
#endif
        /// <summary>The endGameRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndGameRobot2 { get; set; }
#nullable restore
#else
        public string EndGameRobot2 { get; set; }
#endif
        /// <summary>The endGameRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndGameRobot3 { get; set; }
#nullable restore
#else
        public string EndGameRobot3 { get; set; }
#endif
        /// <summary>The endGameSpotLightBonusPoints property</summary>
        public int? EndGameSpotLightBonusPoints { get; set; }
        /// <summary>The endGameTotalStagePoints property</summary>
        public int? EndGameTotalStagePoints { get; set; }
        /// <summary>The ensembleBonusAchieved property</summary>
        public bool? EnsembleBonusAchieved { get; set; }
        /// <summary>The ensembleBonusOnStageRobotsThreshold property</summary>
        public int? EnsembleBonusOnStageRobotsThreshold { get; set; }
        /// <summary>The ensembleBonusStagePointsThreshold property</summary>
        public int? EnsembleBonusStagePointsThreshold { get; set; }
        /// <summary>The foulCount property</summary>
        public int? FoulCount { get; set; }
        /// <summary>The foulPoints property</summary>
        public int? FoulPoints { get; set; }
        /// <summary>The g206Penalty property</summary>
        public bool? G206Penalty { get; set; }
        /// <summary>The g408Penalty property</summary>
        public bool? G408Penalty { get; set; }
        /// <summary>The g424Penalty property</summary>
        public bool? G424Penalty { get; set; }
        /// <summary>The melodyBonusAchieved property</summary>
        public bool? MelodyBonusAchieved { get; set; }
        /// <summary>The melodyBonusThreshold property</summary>
        public int? MelodyBonusThreshold { get; set; }
        /// <summary>The melodyBonusThresholdCoop property</summary>
        public int? MelodyBonusThresholdCoop { get; set; }
        /// <summary>The melodyBonusThresholdNonCoop property</summary>
        public int? MelodyBonusThresholdNonCoop { get; set; }
        /// <summary>The micCenterStage property</summary>
        public bool? MicCenterStage { get; set; }
        /// <summary>The micStageLeft property</summary>
        public bool? MicStageLeft { get; set; }
        /// <summary>The micStageRight property</summary>
        public bool? MicStageRight { get; set; }
        /// <summary>The rp property</summary>
        public int? Rp { get; set; }
        /// <summary>The techFoulCount property</summary>
        public int? TechFoulCount { get; set; }
        /// <summary>The teleopAmpNoteCount property</summary>
        public int? TeleopAmpNoteCount { get; set; }
        /// <summary>The teleopAmpNotePoints property</summary>
        public int? TeleopAmpNotePoints { get; set; }
        /// <summary>The teleopPoints property</summary>
        public int? TeleopPoints { get; set; }
        /// <summary>The teleopSpeakerNoteAmplifiedCount property</summary>
        public int? TeleopSpeakerNoteAmplifiedCount { get; set; }
        /// <summary>The teleopSpeakerNoteAmplifiedPoints property</summary>
        public int? TeleopSpeakerNoteAmplifiedPoints { get; set; }
        /// <summary>The teleopSpeakerNoteCount property</summary>
        public int? TeleopSpeakerNoteCount { get; set; }
        /// <summary>The teleopSpeakerNotePoints property</summary>
        public int? TeleopSpeakerNotePoints { get; set; }
        /// <summary>The teleopTotalNotePoints property</summary>
        public int? TeleopTotalNotePoints { get; set; }
        /// <summary>The totalPoints property</summary>
        public int? TotalPoints { get; set; }
        /// <summary>The trapCenterStage property</summary>
        public bool? TrapCenterStage { get; set; }
        /// <summary>The trapStageLeft property</summary>
        public bool? TrapStageLeft { get; set; }
        /// <summary>The trapStageRight property</summary>
        public bool? TrapStageRight { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2024_Alliance"/> and sets the default values.
        /// </summary>
        public Match_Score_Breakdown_2024_Alliance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2024_Alliance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Score_Breakdown_2024_Alliance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Score_Breakdown_2024_Alliance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjustPoints", n => { AdjustPoints = n.GetIntValue(); } },
                { "autoAmpNoteCount", n => { AutoAmpNoteCount = n.GetIntValue(); } },
                { "autoAmpNotePoints", n => { AutoAmpNotePoints = n.GetIntValue(); } },
                { "autoLeavePoints", n => { AutoLeavePoints = n.GetIntValue(); } },
                { "autoLineRobot1", n => { AutoLineRobot1 = n.GetStringValue(); } },
                { "autoLineRobot2", n => { AutoLineRobot2 = n.GetStringValue(); } },
                { "autoLineRobot3", n => { AutoLineRobot3 = n.GetStringValue(); } },
                { "autoPoints", n => { AutoPoints = n.GetIntValue(); } },
                { "autoSpeakerNoteCount", n => { AutoSpeakerNoteCount = n.GetIntValue(); } },
                { "autoSpeakerNotePoints", n => { AutoSpeakerNotePoints = n.GetIntValue(); } },
                { "autoTotalNotePoints", n => { AutoTotalNotePoints = n.GetIntValue(); } },
                { "coopNotePlayed", n => { CoopNotePlayed = n.GetBoolValue(); } },
                { "coopertitionBonusAchieved", n => { CoopertitionBonusAchieved = n.GetBoolValue(); } },
                { "coopertitionCriteriaMet", n => { CoopertitionCriteriaMet = n.GetBoolValue(); } },
                { "endGameHarmonyPoints", n => { EndGameHarmonyPoints = n.GetIntValue(); } },
                { "endGameNoteInTrapPoints", n => { EndGameNoteInTrapPoints = n.GetIntValue(); } },
                { "endGameOnStagePoints", n => { EndGameOnStagePoints = n.GetIntValue(); } },
                { "endGameParkPoints", n => { EndGameParkPoints = n.GetIntValue(); } },
                { "endGameRobot1", n => { EndGameRobot1 = n.GetStringValue(); } },
                { "endGameRobot2", n => { EndGameRobot2 = n.GetStringValue(); } },
                { "endGameRobot3", n => { EndGameRobot3 = n.GetStringValue(); } },
                { "endGameSpotLightBonusPoints", n => { EndGameSpotLightBonusPoints = n.GetIntValue(); } },
                { "endGameTotalStagePoints", n => { EndGameTotalStagePoints = n.GetIntValue(); } },
                { "ensembleBonusAchieved", n => { EnsembleBonusAchieved = n.GetBoolValue(); } },
                { "ensembleBonusOnStageRobotsThreshold", n => { EnsembleBonusOnStageRobotsThreshold = n.GetIntValue(); } },
                { "ensembleBonusStagePointsThreshold", n => { EnsembleBonusStagePointsThreshold = n.GetIntValue(); } },
                { "foulCount", n => { FoulCount = n.GetIntValue(); } },
                { "foulPoints", n => { FoulPoints = n.GetIntValue(); } },
                { "g206Penalty", n => { G206Penalty = n.GetBoolValue(); } },
                { "g408Penalty", n => { G408Penalty = n.GetBoolValue(); } },
                { "g424Penalty", n => { G424Penalty = n.GetBoolValue(); } },
                { "melodyBonusAchieved", n => { MelodyBonusAchieved = n.GetBoolValue(); } },
                { "melodyBonusThreshold", n => { MelodyBonusThreshold = n.GetIntValue(); } },
                { "melodyBonusThresholdCoop", n => { MelodyBonusThresholdCoop = n.GetIntValue(); } },
                { "melodyBonusThresholdNonCoop", n => { MelodyBonusThresholdNonCoop = n.GetIntValue(); } },
                { "micCenterStage", n => { MicCenterStage = n.GetBoolValue(); } },
                { "micStageLeft", n => { MicStageLeft = n.GetBoolValue(); } },
                { "micStageRight", n => { MicStageRight = n.GetBoolValue(); } },
                { "rp", n => { Rp = n.GetIntValue(); } },
                { "techFoulCount", n => { TechFoulCount = n.GetIntValue(); } },
                { "teleopAmpNoteCount", n => { TeleopAmpNoteCount = n.GetIntValue(); } },
                { "teleopAmpNotePoints", n => { TeleopAmpNotePoints = n.GetIntValue(); } },
                { "teleopPoints", n => { TeleopPoints = n.GetIntValue(); } },
                { "teleopSpeakerNoteAmplifiedCount", n => { TeleopSpeakerNoteAmplifiedCount = n.GetIntValue(); } },
                { "teleopSpeakerNoteAmplifiedPoints", n => { TeleopSpeakerNoteAmplifiedPoints = n.GetIntValue(); } },
                { "teleopSpeakerNoteCount", n => { TeleopSpeakerNoteCount = n.GetIntValue(); } },
                { "teleopSpeakerNotePoints", n => { TeleopSpeakerNotePoints = n.GetIntValue(); } },
                { "teleopTotalNotePoints", n => { TeleopTotalNotePoints = n.GetIntValue(); } },
                { "totalPoints", n => { TotalPoints = n.GetIntValue(); } },
                { "trapCenterStage", n => { TrapCenterStage = n.GetBoolValue(); } },
                { "trapStageLeft", n => { TrapStageLeft = n.GetBoolValue(); } },
                { "trapStageRight", n => { TrapStageRight = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjustPoints", AdjustPoints);
            writer.WriteIntValue("autoAmpNoteCount", AutoAmpNoteCount);
            writer.WriteIntValue("autoAmpNotePoints", AutoAmpNotePoints);
            writer.WriteIntValue("autoLeavePoints", AutoLeavePoints);
            writer.WriteStringValue("autoLineRobot1", AutoLineRobot1);
            writer.WriteStringValue("autoLineRobot2", AutoLineRobot2);
            writer.WriteStringValue("autoLineRobot3", AutoLineRobot3);
            writer.WriteIntValue("autoPoints", AutoPoints);
            writer.WriteIntValue("autoSpeakerNoteCount", AutoSpeakerNoteCount);
            writer.WriteIntValue("autoSpeakerNotePoints", AutoSpeakerNotePoints);
            writer.WriteIntValue("autoTotalNotePoints", AutoTotalNotePoints);
            writer.WriteBoolValue("coopertitionBonusAchieved", CoopertitionBonusAchieved);
            writer.WriteBoolValue("coopertitionCriteriaMet", CoopertitionCriteriaMet);
            writer.WriteBoolValue("coopNotePlayed", CoopNotePlayed);
            writer.WriteIntValue("endGameHarmonyPoints", EndGameHarmonyPoints);
            writer.WriteIntValue("endGameNoteInTrapPoints", EndGameNoteInTrapPoints);
            writer.WriteIntValue("endGameOnStagePoints", EndGameOnStagePoints);
            writer.WriteIntValue("endGameParkPoints", EndGameParkPoints);
            writer.WriteStringValue("endGameRobot1", EndGameRobot1);
            writer.WriteStringValue("endGameRobot2", EndGameRobot2);
            writer.WriteStringValue("endGameRobot3", EndGameRobot3);
            writer.WriteIntValue("endGameSpotLightBonusPoints", EndGameSpotLightBonusPoints);
            writer.WriteIntValue("endGameTotalStagePoints", EndGameTotalStagePoints);
            writer.WriteBoolValue("ensembleBonusAchieved", EnsembleBonusAchieved);
            writer.WriteIntValue("ensembleBonusOnStageRobotsThreshold", EnsembleBonusOnStageRobotsThreshold);
            writer.WriteIntValue("ensembleBonusStagePointsThreshold", EnsembleBonusStagePointsThreshold);
            writer.WriteIntValue("foulCount", FoulCount);
            writer.WriteIntValue("foulPoints", FoulPoints);
            writer.WriteBoolValue("g206Penalty", G206Penalty);
            writer.WriteBoolValue("g408Penalty", G408Penalty);
            writer.WriteBoolValue("g424Penalty", G424Penalty);
            writer.WriteBoolValue("melodyBonusAchieved", MelodyBonusAchieved);
            writer.WriteIntValue("melodyBonusThreshold", MelodyBonusThreshold);
            writer.WriteIntValue("melodyBonusThresholdCoop", MelodyBonusThresholdCoop);
            writer.WriteIntValue("melodyBonusThresholdNonCoop", MelodyBonusThresholdNonCoop);
            writer.WriteBoolValue("micCenterStage", MicCenterStage);
            writer.WriteBoolValue("micStageLeft", MicStageLeft);
            writer.WriteBoolValue("micStageRight", MicStageRight);
            writer.WriteIntValue("rp", Rp);
            writer.WriteIntValue("techFoulCount", TechFoulCount);
            writer.WriteIntValue("teleopAmpNoteCount", TeleopAmpNoteCount);
            writer.WriteIntValue("teleopAmpNotePoints", TeleopAmpNotePoints);
            writer.WriteIntValue("teleopPoints", TeleopPoints);
            writer.WriteIntValue("teleopSpeakerNoteAmplifiedCount", TeleopSpeakerNoteAmplifiedCount);
            writer.WriteIntValue("teleopSpeakerNoteAmplifiedPoints", TeleopSpeakerNoteAmplifiedPoints);
            writer.WriteIntValue("teleopSpeakerNoteCount", TeleopSpeakerNoteCount);
            writer.WriteIntValue("teleopSpeakerNotePoints", TeleopSpeakerNotePoints);
            writer.WriteIntValue("teleopTotalNotePoints", TeleopTotalNotePoints);
            writer.WriteIntValue("totalPoints", TotalPoints);
            writer.WriteBoolValue("trapCenterStage", TrapCenterStage);
            writer.WriteBoolValue("trapStageLeft", TrapStageLeft);
            writer.WriteBoolValue("trapStageRight", TrapStageRight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
