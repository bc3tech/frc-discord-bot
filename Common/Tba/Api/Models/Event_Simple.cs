// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Event_Simple : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>City, town, village, etc. the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? City { get; set; }
#nullable restore
#else
        public string City { get; set; }
#endif
        /// <summary>Country the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Country { get; set; }
#nullable restore
#else
        public string Country { get; set; }
#endif
        /// <summary>The district property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.District_List? District { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.District_List District { get; set; }
#endif
        /// <summary>Event end date in `yyyy-mm-dd` format.</summary>
        public Date? EndDate { get; set; }
        /// <summary>Event short code, as provided by FIRST.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventCode { get; set; }
#nullable restore
#else
        public string EventCode { get; set; }
#endif
        /// <summary>Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2</summary>
        public int? EventType { get; set; }
        /// <summary>TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Official name of event on record either provided by FIRST or organizers of offseason event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Event start date in `yyyy-mm-dd` format.</summary>
        public Date? StartDate { get; set; }
        /// <summary>State or Province the event is located in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StateProv { get; set; }
#nullable restore
#else
        public string StateProv { get; set; }
#endif
        /// <summary>Year the event data is for.</summary>
        public int? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Event_Simple"/> and sets the default values.
        /// </summary>
        public Event_Simple()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Event_Simple"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Event_Simple CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Event_Simple();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "city", n => { City = n.GetStringValue(); } },
                { "country", n => { Country = n.GetStringValue(); } },
                { "district", n => { District = n.GetObjectValue<global::Common.Tba.Api.Models.District_List>(global::Common.Tba.Api.Models.District_List.CreateFromDiscriminatorValue); } },
                { "end_date", n => { EndDate = n.GetDateValue(); } },
                { "event_code", n => { EventCode = n.GetStringValue(); } },
                { "event_type", n => { EventType = n.GetIntValue(); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "start_date", n => { StartDate = n.GetDateValue(); } },
                { "state_prov", n => { StateProv = n.GetStringValue(); } },
                { "year", n => { Year = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("city", City);
            writer.WriteStringValue("country", Country);
            writer.WriteObjectValue<global::Common.Tba.Api.Models.District_List>("district", District);
            writer.WriteDateValue("end_date", EndDate);
            writer.WriteStringValue("event_code", EventCode);
            writer.WriteIntValue("event_type", EventType);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("name", Name);
            writer.WriteDateValue("start_date", StartDate);
            writer.WriteStringValue("state_prov", StateProv);
            writer.WriteIntValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
