// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    /// <summary>
    /// Rank of a team in a district.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class District_Ranking : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List of events that contributed to the point total for the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Common.Tba.Api.Models.District_Ranking_event_points>? EventPoints { get; set; }
#nullable restore
#else
        public List<global::Common.Tba.Api.Models.District_Ranking_event_points> EventPoints { get; set; }
#endif
        /// <summary>Total district points for the team.</summary>
        public int? PointTotal { get; set; }
        /// <summary>Numerical rank of the team, 1 being top rank.</summary>
        public int? Rank { get; set; }
        /// <summary>Any points added to a team as a result of the rookie bonus.</summary>
        public int? RookieBonus { get; set; }
        /// <summary>TBA team key for the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TeamKey { get; set; }
#nullable restore
#else
        public string TeamKey { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.District_Ranking"/> and sets the default values.
        /// </summary>
        public District_Ranking()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.District_Ranking"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.District_Ranking CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.District_Ranking();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "event_points", n => { EventPoints = n.GetCollectionOfObjectValues<global::Common.Tba.Api.Models.District_Ranking_event_points>(global::Common.Tba.Api.Models.District_Ranking_event_points.CreateFromDiscriminatorValue)?.AsList(); } },
                { "point_total", n => { PointTotal = n.GetIntValue(); } },
                { "rank", n => { Rank = n.GetIntValue(); } },
                { "rookie_bonus", n => { RookieBonus = n.GetIntValue(); } },
                { "team_key", n => { TeamKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Common.Tba.Api.Models.District_Ranking_event_points>("event_points", EventPoints);
            writer.WriteIntValue("point_total", PointTotal);
            writer.WriteIntValue("rank", Rank);
            writer.WriteIntValue("rookie_bonus", RookieBonus);
            writer.WriteStringValue("team_key", TeamKey);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
