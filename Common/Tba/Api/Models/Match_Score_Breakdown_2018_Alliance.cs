// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Score_Breakdown_2018_Alliance : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The adjustPoints property</summary>
        public int? AdjustPoints { get; set; }
        /// <summary>The autoOwnershipPoints property</summary>
        public int? AutoOwnershipPoints { get; set; }
        /// <summary>The autoPoints property</summary>
        public int? AutoPoints { get; set; }
        /// <summary>The autoQuestRankingPoint property</summary>
        public bool? AutoQuestRankingPoint { get; set; }
        /// <summary>The autoRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoRobot1 { get; set; }
#nullable restore
#else
        public string AutoRobot1 { get; set; }
#endif
        /// <summary>The autoRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoRobot2 { get; set; }
#nullable restore
#else
        public string AutoRobot2 { get; set; }
#endif
        /// <summary>The autoRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AutoRobot3 { get; set; }
#nullable restore
#else
        public string AutoRobot3 { get; set; }
#endif
        /// <summary>The autoRunPoints property</summary>
        public int? AutoRunPoints { get; set; }
        /// <summary>The autoScaleOwnershipSec property</summary>
        public int? AutoScaleOwnershipSec { get; set; }
        /// <summary>The autoSwitchAtZero property</summary>
        public bool? AutoSwitchAtZero { get; set; }
        /// <summary>The autoSwitchOwnershipSec property</summary>
        public int? AutoSwitchOwnershipSec { get; set; }
        /// <summary>The endgamePoints property</summary>
        public int? EndgamePoints { get; set; }
        /// <summary>The endgameRobot1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot1 { get; set; }
#nullable restore
#else
        public string EndgameRobot1 { get; set; }
#endif
        /// <summary>The endgameRobot2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot2 { get; set; }
#nullable restore
#else
        public string EndgameRobot2 { get; set; }
#endif
        /// <summary>The endgameRobot3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndgameRobot3 { get; set; }
#nullable restore
#else
        public string EndgameRobot3 { get; set; }
#endif
        /// <summary>The faceTheBossRankingPoint property</summary>
        public bool? FaceTheBossRankingPoint { get; set; }
        /// <summary>The foulCount property</summary>
        public int? FoulCount { get; set; }
        /// <summary>The foulPoints property</summary>
        public int? FoulPoints { get; set; }
        /// <summary>The rp property</summary>
        public int? Rp { get; set; }
        /// <summary>Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance&apos;s perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TbaGameData { get; set; }
#nullable restore
#else
        public string TbaGameData { get; set; }
#endif
        /// <summary>The techFoulCount property</summary>
        public int? TechFoulCount { get; set; }
        /// <summary>The teleopOwnershipPoints property</summary>
        public int? TeleopOwnershipPoints { get; set; }
        /// <summary>The teleopPoints property</summary>
        public int? TeleopPoints { get; set; }
        /// <summary>The teleopScaleBoostSec property</summary>
        public int? TeleopScaleBoostSec { get; set; }
        /// <summary>The teleopScaleForceSec property</summary>
        public int? TeleopScaleForceSec { get; set; }
        /// <summary>The teleopScaleOwnershipSec property</summary>
        public int? TeleopScaleOwnershipSec { get; set; }
        /// <summary>The teleopSwitchBoostSec property</summary>
        public int? TeleopSwitchBoostSec { get; set; }
        /// <summary>The teleopSwitchForceSec property</summary>
        public int? TeleopSwitchForceSec { get; set; }
        /// <summary>The teleopSwitchOwnershipSec property</summary>
        public int? TeleopSwitchOwnershipSec { get; set; }
        /// <summary>The totalPoints property</summary>
        public int? TotalPoints { get; set; }
        /// <summary>The vaultBoostPlayed property</summary>
        public int? VaultBoostPlayed { get; set; }
        /// <summary>The vaultBoostTotal property</summary>
        public int? VaultBoostTotal { get; set; }
        /// <summary>The vaultForcePlayed property</summary>
        public int? VaultForcePlayed { get; set; }
        /// <summary>The vaultForceTotal property</summary>
        public int? VaultForceTotal { get; set; }
        /// <summary>The vaultLevitatePlayed property</summary>
        public int? VaultLevitatePlayed { get; set; }
        /// <summary>The vaultLevitateTotal property</summary>
        public int? VaultLevitateTotal { get; set; }
        /// <summary>The vaultPoints property</summary>
        public int? VaultPoints { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2018_Alliance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Score_Breakdown_2018_Alliance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Score_Breakdown_2018_Alliance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjustPoints", n => { AdjustPoints = n.GetIntValue(); } },
                { "autoOwnershipPoints", n => { AutoOwnershipPoints = n.GetIntValue(); } },
                { "autoPoints", n => { AutoPoints = n.GetIntValue(); } },
                { "autoQuestRankingPoint", n => { AutoQuestRankingPoint = n.GetBoolValue(); } },
                { "autoRobot1", n => { AutoRobot1 = n.GetStringValue(); } },
                { "autoRobot2", n => { AutoRobot2 = n.GetStringValue(); } },
                { "autoRobot3", n => { AutoRobot3 = n.GetStringValue(); } },
                { "autoRunPoints", n => { AutoRunPoints = n.GetIntValue(); } },
                { "autoScaleOwnershipSec", n => { AutoScaleOwnershipSec = n.GetIntValue(); } },
                { "autoSwitchAtZero", n => { AutoSwitchAtZero = n.GetBoolValue(); } },
                { "autoSwitchOwnershipSec", n => { AutoSwitchOwnershipSec = n.GetIntValue(); } },
                { "endgamePoints", n => { EndgamePoints = n.GetIntValue(); } },
                { "endgameRobot1", n => { EndgameRobot1 = n.GetStringValue(); } },
                { "endgameRobot2", n => { EndgameRobot2 = n.GetStringValue(); } },
                { "endgameRobot3", n => { EndgameRobot3 = n.GetStringValue(); } },
                { "faceTheBossRankingPoint", n => { FaceTheBossRankingPoint = n.GetBoolValue(); } },
                { "foulCount", n => { FoulCount = n.GetIntValue(); } },
                { "foulPoints", n => { FoulPoints = n.GetIntValue(); } },
                { "rp", n => { Rp = n.GetIntValue(); } },
                { "tba_gameData", n => { TbaGameData = n.GetStringValue(); } },
                { "techFoulCount", n => { TechFoulCount = n.GetIntValue(); } },
                { "teleopOwnershipPoints", n => { TeleopOwnershipPoints = n.GetIntValue(); } },
                { "teleopPoints", n => { TeleopPoints = n.GetIntValue(); } },
                { "teleopScaleBoostSec", n => { TeleopScaleBoostSec = n.GetIntValue(); } },
                { "teleopScaleForceSec", n => { TeleopScaleForceSec = n.GetIntValue(); } },
                { "teleopScaleOwnershipSec", n => { TeleopScaleOwnershipSec = n.GetIntValue(); } },
                { "teleopSwitchBoostSec", n => { TeleopSwitchBoostSec = n.GetIntValue(); } },
                { "teleopSwitchForceSec", n => { TeleopSwitchForceSec = n.GetIntValue(); } },
                { "teleopSwitchOwnershipSec", n => { TeleopSwitchOwnershipSec = n.GetIntValue(); } },
                { "totalPoints", n => { TotalPoints = n.GetIntValue(); } },
                { "vaultBoostPlayed", n => { VaultBoostPlayed = n.GetIntValue(); } },
                { "vaultBoostTotal", n => { VaultBoostTotal = n.GetIntValue(); } },
                { "vaultForcePlayed", n => { VaultForcePlayed = n.GetIntValue(); } },
                { "vaultForceTotal", n => { VaultForceTotal = n.GetIntValue(); } },
                { "vaultLevitatePlayed", n => { VaultLevitatePlayed = n.GetIntValue(); } },
                { "vaultLevitateTotal", n => { VaultLevitateTotal = n.GetIntValue(); } },
                { "vaultPoints", n => { VaultPoints = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjustPoints", AdjustPoints);
            writer.WriteIntValue("autoOwnershipPoints", AutoOwnershipPoints);
            writer.WriteIntValue("autoPoints", AutoPoints);
            writer.WriteBoolValue("autoQuestRankingPoint", AutoQuestRankingPoint);
            writer.WriteStringValue("autoRobot1", AutoRobot1);
            writer.WriteStringValue("autoRobot2", AutoRobot2);
            writer.WriteStringValue("autoRobot3", AutoRobot3);
            writer.WriteIntValue("autoRunPoints", AutoRunPoints);
            writer.WriteIntValue("autoScaleOwnershipSec", AutoScaleOwnershipSec);
            writer.WriteBoolValue("autoSwitchAtZero", AutoSwitchAtZero);
            writer.WriteIntValue("autoSwitchOwnershipSec", AutoSwitchOwnershipSec);
            writer.WriteIntValue("endgamePoints", EndgamePoints);
            writer.WriteStringValue("endgameRobot1", EndgameRobot1);
            writer.WriteStringValue("endgameRobot2", EndgameRobot2);
            writer.WriteStringValue("endgameRobot3", EndgameRobot3);
            writer.WriteBoolValue("faceTheBossRankingPoint", FaceTheBossRankingPoint);
            writer.WriteIntValue("foulCount", FoulCount);
            writer.WriteIntValue("foulPoints", FoulPoints);
            writer.WriteIntValue("rp", Rp);
            writer.WriteStringValue("tba_gameData", TbaGameData);
            writer.WriteIntValue("techFoulCount", TechFoulCount);
            writer.WriteIntValue("teleopOwnershipPoints", TeleopOwnershipPoints);
            writer.WriteIntValue("teleopPoints", TeleopPoints);
            writer.WriteIntValue("teleopScaleBoostSec", TeleopScaleBoostSec);
            writer.WriteIntValue("teleopScaleForceSec", TeleopScaleForceSec);
            writer.WriteIntValue("teleopScaleOwnershipSec", TeleopScaleOwnershipSec);
            writer.WriteIntValue("teleopSwitchBoostSec", TeleopSwitchBoostSec);
            writer.WriteIntValue("teleopSwitchForceSec", TeleopSwitchForceSec);
            writer.WriteIntValue("teleopSwitchOwnershipSec", TeleopSwitchOwnershipSec);
            writer.WriteIntValue("totalPoints", TotalPoints);
            writer.WriteIntValue("vaultBoostPlayed", VaultBoostPlayed);
            writer.WriteIntValue("vaultBoostTotal", VaultBoostTotal);
            writer.WriteIntValue("vaultForcePlayed", VaultForcePlayed);
            writer.WriteIntValue("vaultForceTotal", VaultForceTotal);
            writer.WriteIntValue("vaultLevitatePlayed", VaultLevitatePlayed);
            writer.WriteIntValue("vaultLevitateTotal", VaultLevitateTotal);
            writer.WriteIntValue("vaultPoints", VaultPoints);
        }
    }
}
#pragma warning restore CS0618
