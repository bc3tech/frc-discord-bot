// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class API_Status : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The android property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.API_Status_App_Version? Android { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.API_Status_App_Version Android { get; set; }
#endif
        /// <summary>Year of the current FRC season.</summary>
        public int? CurrentSeason { get; set; }
        /// <summary>An array of strings containing event keys of any active events that are no longer updating.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DownEvents { get; set; }
#nullable restore
#else
        public List<string> DownEvents { get; set; }
#endif
        /// <summary>The ios property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Common.Tba.Api.Models.API_Status_App_Version? Ios { get; set; }
#nullable restore
#else
        public global::Common.Tba.Api.Models.API_Status_App_Version Ios { get; set; }
#endif
        /// <summary>True if the entire FMS API provided by FIRST is down.</summary>
        public bool? IsDatafeedDown { get; set; }
        /// <summary>Maximum FRC season year for valid queries.</summary>
        public int? MaxSeason { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.API_Status"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.API_Status CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.API_Status();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "android", n => { Android = n.GetObjectValue<global::Common.Tba.Api.Models.API_Status_App_Version>(global::Common.Tba.Api.Models.API_Status_App_Version.CreateFromDiscriminatorValue); } },
                { "current_season", n => { CurrentSeason = n.GetIntValue(); } },
                { "down_events", n => { DownEvents = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "ios", n => { Ios = n.GetObjectValue<global::Common.Tba.Api.Models.API_Status_App_Version>(global::Common.Tba.Api.Models.API_Status_App_Version.CreateFromDiscriminatorValue); } },
                { "is_datafeed_down", n => { IsDatafeedDown = n.GetBoolValue(); } },
                { "max_season", n => { MaxSeason = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Common.Tba.Api.Models.API_Status_App_Version>("android", Android);
            writer.WriteIntValue("current_season", CurrentSeason);
            writer.WriteCollectionOfPrimitiveValues<string>("down_events", DownEvents);
            writer.WriteObjectValue<global::Common.Tba.Api.Models.API_Status_App_Version>("ios", Ios);
            writer.WriteBoolValue("is_datafeed_down", IsDatafeedDown);
            writer.WriteIntValue("max_season", MaxSeason);
        }
    }
}
#pragma warning restore CS0618
