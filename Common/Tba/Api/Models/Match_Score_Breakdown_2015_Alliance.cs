// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Common.Tba.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Match_Score_Breakdown_2015_Alliance : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adjust_points property</summary>
        public int? AdjustPoints { get; set; }
        /// <summary>The auto_points property</summary>
        public int? AutoPoints { get; set; }
        /// <summary>The container_count_level1 property</summary>
        public int? ContainerCountLevel1 { get; set; }
        /// <summary>The container_count_level2 property</summary>
        public int? ContainerCountLevel2 { get; set; }
        /// <summary>The container_count_level3 property</summary>
        public int? ContainerCountLevel3 { get; set; }
        /// <summary>The container_count_level4 property</summary>
        public int? ContainerCountLevel4 { get; set; }
        /// <summary>The container_count_level5 property</summary>
        public int? ContainerCountLevel5 { get; set; }
        /// <summary>The container_count_level6 property</summary>
        public int? ContainerCountLevel6 { get; set; }
        /// <summary>The container_points property</summary>
        public int? ContainerPoints { get; set; }
        /// <summary>The container_set property</summary>
        public bool? ContainerSet { get; set; }
        /// <summary>The foul_count property</summary>
        public int? FoulCount { get; set; }
        /// <summary>The foul_points property</summary>
        public int? FoulPoints { get; set; }
        /// <summary>The litter_count_container property</summary>
        public int? LitterCountContainer { get; set; }
        /// <summary>The litter_count_landfill property</summary>
        public int? LitterCountLandfill { get; set; }
        /// <summary>The litter_count_unprocessed property</summary>
        public int? LitterCountUnprocessed { get; set; }
        /// <summary>The litter_points property</summary>
        public int? LitterPoints { get; set; }
        /// <summary>The robot_set property</summary>
        public bool? RobotSet { get; set; }
        /// <summary>The teleop_points property</summary>
        public int? TeleopPoints { get; set; }
        /// <summary>The total_points property</summary>
        public int? TotalPoints { get; set; }
        /// <summary>The tote_count_far property</summary>
        public int? ToteCountFar { get; set; }
        /// <summary>The tote_count_near property</summary>
        public int? ToteCountNear { get; set; }
        /// <summary>The tote_points property</summary>
        public int? TotePoints { get; set; }
        /// <summary>The tote_set property</summary>
        public bool? ToteSet { get; set; }
        /// <summary>The tote_stack property</summary>
        public bool? ToteStack { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2015_Alliance"/> and sets the default values.
        /// </summary>
        public Match_Score_Breakdown_2015_Alliance()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Common.Tba.Api.Models.Match_Score_Breakdown_2015_Alliance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Common.Tba.Api.Models.Match_Score_Breakdown_2015_Alliance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Common.Tba.Api.Models.Match_Score_Breakdown_2015_Alliance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adjust_points", n => { AdjustPoints = n.GetIntValue(); } },
                { "auto_points", n => { AutoPoints = n.GetIntValue(); } },
                { "container_count_level1", n => { ContainerCountLevel1 = n.GetIntValue(); } },
                { "container_count_level2", n => { ContainerCountLevel2 = n.GetIntValue(); } },
                { "container_count_level3", n => { ContainerCountLevel3 = n.GetIntValue(); } },
                { "container_count_level4", n => { ContainerCountLevel4 = n.GetIntValue(); } },
                { "container_count_level5", n => { ContainerCountLevel5 = n.GetIntValue(); } },
                { "container_count_level6", n => { ContainerCountLevel6 = n.GetIntValue(); } },
                { "container_points", n => { ContainerPoints = n.GetIntValue(); } },
                { "container_set", n => { ContainerSet = n.GetBoolValue(); } },
                { "foul_count", n => { FoulCount = n.GetIntValue(); } },
                { "foul_points", n => { FoulPoints = n.GetIntValue(); } },
                { "litter_count_container", n => { LitterCountContainer = n.GetIntValue(); } },
                { "litter_count_landfill", n => { LitterCountLandfill = n.GetIntValue(); } },
                { "litter_count_unprocessed", n => { LitterCountUnprocessed = n.GetIntValue(); } },
                { "litter_points", n => { LitterPoints = n.GetIntValue(); } },
                { "robot_set", n => { RobotSet = n.GetBoolValue(); } },
                { "teleop_points", n => { TeleopPoints = n.GetIntValue(); } },
                { "total_points", n => { TotalPoints = n.GetIntValue(); } },
                { "tote_count_far", n => { ToteCountFar = n.GetIntValue(); } },
                { "tote_count_near", n => { ToteCountNear = n.GetIntValue(); } },
                { "tote_points", n => { TotePoints = n.GetIntValue(); } },
                { "tote_set", n => { ToteSet = n.GetBoolValue(); } },
                { "tote_stack", n => { ToteStack = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("adjust_points", AdjustPoints);
            writer.WriteIntValue("auto_points", AutoPoints);
            writer.WriteIntValue("container_count_level1", ContainerCountLevel1);
            writer.WriteIntValue("container_count_level2", ContainerCountLevel2);
            writer.WriteIntValue("container_count_level3", ContainerCountLevel3);
            writer.WriteIntValue("container_count_level4", ContainerCountLevel4);
            writer.WriteIntValue("container_count_level5", ContainerCountLevel5);
            writer.WriteIntValue("container_count_level6", ContainerCountLevel6);
            writer.WriteIntValue("container_points", ContainerPoints);
            writer.WriteBoolValue("container_set", ContainerSet);
            writer.WriteIntValue("foul_count", FoulCount);
            writer.WriteIntValue("foul_points", FoulPoints);
            writer.WriteIntValue("litter_count_container", LitterCountContainer);
            writer.WriteIntValue("litter_count_landfill", LitterCountLandfill);
            writer.WriteIntValue("litter_count_unprocessed", LitterCountUnprocessed);
            writer.WriteIntValue("litter_points", LitterPoints);
            writer.WriteBoolValue("robot_set", RobotSet);
            writer.WriteIntValue("teleop_points", TeleopPoints);
            writer.WriteIntValue("total_points", TotalPoints);
            writer.WriteIntValue("tote_count_far", ToteCountFar);
            writer.WriteIntValue("tote_count_near", ToteCountNear);
            writer.WriteIntValue("tote_points", TotePoints);
            writer.WriteBoolValue("tote_set", ToteSet);
            writer.WriteBoolValue("tote_stack", ToteStack);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
