// <auto-generated/>
#pragma warning disable CS0618
using Common.First.Api.Item.Alliances;
using Common.First.Api.Item.Avatars;
using Common.First.Api.Item.Awards;
using Common.First.Api.Item.Districts;
using Common.First.Api.Item.Events;
using Common.First.Api.Item.Matches;
using Common.First.Api.Item.Rankings;
using Common.First.Api.Item.Schedule;
using Common.First.Api.Item.Scores;
using Common.First.Api.Item.Teams;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Common.First.Api.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \{season}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithSeasonItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The alliances property</summary>
        public global::Common.First.Api.Item.Alliances.AlliancesRequestBuilder Alliances
        {
            get => new global::Common.First.Api.Item.Alliances.AlliancesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The avatars property</summary>
        public global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder Avatars
        {
            get => new global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The awards property</summary>
        public global::Common.First.Api.Item.Awards.AwardsRequestBuilder Awards
        {
            get => new global::Common.First.Api.Item.Awards.AwardsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The districts property</summary>
        public global::Common.First.Api.Item.Districts.DistrictsRequestBuilder Districts
        {
            get => new global::Common.First.Api.Item.Districts.DistrictsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Common.First.Api.Item.Events.EventsRequestBuilder Events
        {
            get => new global::Common.First.Api.Item.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The matches property</summary>
        public global::Common.First.Api.Item.Matches.MatchesRequestBuilder Matches
        {
            get => new global::Common.First.Api.Item.Matches.MatchesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The rankings property</summary>
        public global::Common.First.Api.Item.Rankings.RankingsRequestBuilder Rankings
        {
            get => new global::Common.First.Api.Item.Rankings.RankingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedule property</summary>
        public global::Common.First.Api.Item.Schedule.ScheduleRequestBuilder Schedule
        {
            get => new global::Common.First.Api.Item.Schedule.ScheduleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scores property</summary>
        public global::Common.First.Api.Item.Scores.ScoresRequestBuilder Scores
        {
            get => new global::Common.First.Api.Item.Scores.ScoresRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public global::Common.First.Api.Item.Teams.TeamsRequestBuilder Teams
        {
            get => new global::Common.First.Api.Item.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.WithSeasonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSeasonItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.WithSeasonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSeasonItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}", rawUrl)
        {
        }
        /// <summary>
        /// The season summary API returns a high level glance of a particular FRC season.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.WithSeasonGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.WithSeason500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.WithSeasonGetResponse?> GetAsWithSeasonGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.WithSeasonGetResponse> GetAsWithSeasonGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.WithSeason500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.WithSeasonGetResponse>(requestInfo, global::Common.First.Api.Item.WithSeasonGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The season summary API returns a high level glance of a particular FRC season.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.WithSeasonResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.WithSeason500Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsWithSeasonGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.WithSeasonResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.WithSeasonResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.WithSeason500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.WithSeasonResponse>(requestInfo, global::Common.First.Api.Item.WithSeasonResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The season summary API returns a high level glance of a particular FRC season.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.WithSeasonItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Common.First.Api.Item.WithSeasonItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Common.First.Api.Item.WithSeasonItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSeasonItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
