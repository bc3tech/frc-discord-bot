// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Common.First.Api.Item.Events
{
    /// <summary>
    /// Builds and executes requests for operations under \{season}\events
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EventsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Events.EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/events{?districtCode*,eventCode*,excludeDistrict*,teamNumber*,tournamentType*,weekNumber*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Events.EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/events{?districtCode*,eventCode*,excludeDistrict*,teamNumber*,tournamentType*,weekNumber*}", rawUrl)
        {
        }
        /// <summary>
        /// The event listings API returns all FRC official district and regional events in a particular season. You can specify an `eventCode` if you would only like data about one specific event. If you specify an `eventCode` you cannot specify any other optional parameters. Alternately, you can specify a `teamNumber` to retrieve only the listings of events being attended by the particular team. If you specify a `teamNumber` you cannot specify an `eventCode`. The `districtCode` parameter can be added to filter the response to only thos events from a particular district. If you specify the `districtCode` parameter, you cannot specify an `eventCode` or the `excludeDistrict` parameters. The `excludeDistrict` parameter can be used to prevent the response from including district events. If you specify the `excludeDistrict` parameter, you cannot specify an `eventCode` or `districtCode`.Values on this endpoint are &quot;pass through&quot; values from the MyEvents registration system. As such, if the event does not specify a value for a field, it may be presented in the API as `null`.The response for event listings contains a special field called `divisionCode`. Starting with the 2015 season, some events are considered to be divisions of others. For example, the FIRST Championship contains four Divisions and each Division contains two Subdivisions. As an example of a reponse, the event listings for a subdivision will contain a `divisionCode` of the Division from which they belong. In turn, the Division will then have a `divisionCode` that matches the FIRST Championship event code (as they are divisions of that event). This allows you to see the full structure of events, and how they relate to each other.**_Important Note:_** For events with the `type` ChampionshipDivision, you cannot request match results, rankings, schedules or alliances. These event types do not have those results, only Subdivisions. As such, you would receive an `HTTP 404 (not found)` if you request results that are not applicable to the event. However, they do have awards, and those can be requested.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Events.EventsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Events.Events500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Events.EventsGetResponse?> GetAsEventsGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Events.EventsGetResponse> GetAsEventsGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.Events.Events500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Events.EventsGetResponse>(requestInfo, global::Common.First.Api.Item.Events.EventsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The event listings API returns all FRC official district and regional events in a particular season. You can specify an `eventCode` if you would only like data about one specific event. If you specify an `eventCode` you cannot specify any other optional parameters. Alternately, you can specify a `teamNumber` to retrieve only the listings of events being attended by the particular team. If you specify a `teamNumber` you cannot specify an `eventCode`. The `districtCode` parameter can be added to filter the response to only thos events from a particular district. If you specify the `districtCode` parameter, you cannot specify an `eventCode` or the `excludeDistrict` parameters. The `excludeDistrict` parameter can be used to prevent the response from including district events. If you specify the `excludeDistrict` parameter, you cannot specify an `eventCode` or `districtCode`.Values on this endpoint are &quot;pass through&quot; values from the MyEvents registration system. As such, if the event does not specify a value for a field, it may be presented in the API as `null`.The response for event listings contains a special field called `divisionCode`. Starting with the 2015 season, some events are considered to be divisions of others. For example, the FIRST Championship contains four Divisions and each Division contains two Subdivisions. As an example of a reponse, the event listings for a subdivision will contain a `divisionCode` of the Division from which they belong. In turn, the Division will then have a `divisionCode` that matches the FIRST Championship event code (as they are divisions of that event). This allows you to see the full structure of events, and how they relate to each other.**_Important Note:_** For events with the `type` ChampionshipDivision, you cannot request match results, rankings, schedules or alliances. These event types do not have those results, only Subdivisions. As such, you would receive an `HTTP 404 (not found)` if you request results that are not applicable to the event. However, they do have awards, and those can be requested.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Events.EventsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Events.Events500Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsEventsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Events.EventsResponse?> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Events.EventsResponse> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.Events.Events500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Events.EventsResponse>(requestInfo, global::Common.First.Api.Item.Events.EventsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The event listings API returns all FRC official district and regional events in a particular season. You can specify an `eventCode` if you would only like data about one specific event. If you specify an `eventCode` you cannot specify any other optional parameters. Alternately, you can specify a `teamNumber` to retrieve only the listings of events being attended by the particular team. If you specify a `teamNumber` you cannot specify an `eventCode`. The `districtCode` parameter can be added to filter the response to only thos events from a particular district. If you specify the `districtCode` parameter, you cannot specify an `eventCode` or the `excludeDistrict` parameters. The `excludeDistrict` parameter can be used to prevent the response from including district events. If you specify the `excludeDistrict` parameter, you cannot specify an `eventCode` or `districtCode`.Values on this endpoint are &quot;pass through&quot; values from the MyEvents registration system. As such, if the event does not specify a value for a field, it may be presented in the API as `null`.The response for event listings contains a special field called `divisionCode`. Starting with the 2015 season, some events are considered to be divisions of others. For example, the FIRST Championship contains four Divisions and each Division contains two Subdivisions. As an example of a reponse, the event listings for a subdivision will contain a `divisionCode` of the Division from which they belong. In turn, the Division will then have a `divisionCode` that matches the FIRST Championship event code (as they are divisions of that event). This allows you to see the full structure of events, and how they relate to each other.**_Important Note:_** For events with the `type` ChampionshipDivision, you cannot request match results, rankings, schedules or alliances. These event types do not have those results, only Subdivisions. As such, you would receive an `HTTP 404 (not found)` if you request results that are not applicable to the event. However, they do have awards, and those can be requested.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Events.EventsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Common.First.Api.Item.Events.EventsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Common.First.Api.Item.Events.EventsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The event listings API returns all FRC official district and regional events in a particular season. You can specify an `eventCode` if you would only like data about one specific event. If you specify an `eventCode` you cannot specify any other optional parameters. Alternately, you can specify a `teamNumber` to retrieve only the listings of events being attended by the particular team. If you specify a `teamNumber` you cannot specify an `eventCode`. The `districtCode` parameter can be added to filter the response to only thos events from a particular district. If you specify the `districtCode` parameter, you cannot specify an `eventCode` or the `excludeDistrict` parameters. The `excludeDistrict` parameter can be used to prevent the response from including district events. If you specify the `excludeDistrict` parameter, you cannot specify an `eventCode` or `districtCode`.Values on this endpoint are &quot;pass through&quot; values from the MyEvents registration system. As such, if the event does not specify a value for a field, it may be presented in the API as `null`.The response for event listings contains a special field called `divisionCode`. Starting with the 2015 season, some events are considered to be divisions of others. For example, the FIRST Championship contains four Divisions and each Division contains two Subdivisions. As an example of a reponse, the event listings for a subdivision will contain a `divisionCode` of the Division from which they belong. In turn, the Division will then have a `divisionCode` that matches the FIRST Championship event code (as they are divisions of that event). This allows you to see the full structure of events, and how they relate to each other.**_Important Note:_** For events with the `type` ChampionshipDivision, you cannot request match results, rankings, schedules or alliances. These event types do not have those results, only Subdivisions. As such, you would receive an `HTTP 404 (not found)` if you request results that are not applicable to the event. However, they do have awards, and those can be requested.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EventsRequestBuilderGetQueryParameters 
        {
            /// <summary>**(string)** Case insensitive districtCode of the district from which event listings are requested.District Codes:```FMAPNWNEFINFNCONTISRCHSFITPCHFIM```</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("districtCode")]
            public string? DistrictCode { get; set; }
#nullable restore
#else
            [QueryParameter("districtCode")]
            public string DistrictCode { get; set; }
#endif
            /// <summary>**(string)** Case insensitive alphanumeric eventCode of the event about which details are requested.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eventCode")]
            public string? EventCode { get; set; }
#nullable restore
#else
            [QueryParameter("eventCode")]
            public string EventCode { get; set; }
#endif
            /// <summary>**(bool)**  Boolean to specify whether or not to exclude district events in the event listings. true means exclude, but if no value is specified, false will be used (include district events). Excluding district events also excludes district championships.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("excludeDistrict")]
            public string? ExcludeDistrict { get; set; }
#nullable restore
#else
            [QueryParameter("excludeDistrict")]
            public string ExcludeDistrict { get; set; }
#endif
            /// <summary>**(int)** Numeric teamNumber of the team from which the attending event listings are requested.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("teamNumber")]
            public string? TeamNumber { get; set; }
#nullable restore
#else
            [QueryParameter("teamNumber")]
            public string TeamNumber { get; set; }
#endif
            /// <summary>**(string)** Type of event to perform the calculation on.Enum values:```1. None2. Regional3. DistrictEvent4. DistrictChampionship5. DistrictChampionshipWithLevels6. DistrictChampionshipDivision7. ChampionshipSubdivision8. ChampionshipDivision9. Championship10. OffSeason11. OffSeasonWithAzureSync```</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tournamentType")]
            public string? TournamentType { get; set; }
#nullable restore
#else
            [QueryParameter("tournamentType")]
            public string TournamentType { get; set; }
#endif
            /// <summary>**(int)** Week during the FRC season that the event takes place.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("weekNumber")]
            public string? WeekNumber { get; set; }
#nullable restore
#else
            [QueryParameter("weekNumber")]
            public string WeekNumber { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EventsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Common.First.Api.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
