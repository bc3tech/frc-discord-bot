// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Common.First.Api.Item.Avatars
{
    /// <summary>
    /// Builds and executes requests for operations under \{season}\avatars
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AvatarsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AvatarsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/avatars{?eventCode*,page*,teamNumber*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AvatarsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/avatars{?eventCode*,page*,teamNumber*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint applies only to the 2018 or later seasons. Requests for other seasons will result in a `Bad Season` error. The team avatar listings API returns all FRC official teams in a particular `season` with, if applicable, their Avatar. If specified, the `teamNumber` parameter will return only one result with the details of the requested `teamNumber`. Alternately, the `eventCode` parameter allows sorting of the team list to only those teams attending a particular event in the particular `season`. If you specify a `teamNumber` parameter, you cannot additionally specify an `eventCode` or you will receive an `HTTP 501`. If a team does not have an Avatar, the return value will be `null`. Please note that the returned Avatar is encoded in the reply, and would need to be properly handled in order to render a PNG image.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Avatars.AvatarsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Avatars.Avatars500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Avatars.AvatarsGetResponse?> GetAsAvatarsGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Avatars.AvatarsGetResponse> GetAsAvatarsGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.Avatars.Avatars500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Avatars.AvatarsGetResponse>(requestInfo, global::Common.First.Api.Item.Avatars.AvatarsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint applies only to the 2018 or later seasons. Requests for other seasons will result in a `Bad Season` error. The team avatar listings API returns all FRC official teams in a particular `season` with, if applicable, their Avatar. If specified, the `teamNumber` parameter will return only one result with the details of the requested `teamNumber`. Alternately, the `eventCode` parameter allows sorting of the team list to only those teams attending a particular event in the particular `season`. If you specify a `teamNumber` parameter, you cannot additionally specify an `eventCode` or you will receive an `HTTP 501`. If a team does not have an Avatar, the return value will be `null`. Please note that the returned Avatar is encoded in the reply, and would need to be properly handled in order to render a PNG image.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Avatars.AvatarsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Avatars.Avatars500Error">When receiving a 500 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAvatarsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Avatars.AvatarsResponse?> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Avatars.AvatarsResponse> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::Common.First.Api.Item.Avatars.Avatars500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Avatars.AvatarsResponse>(requestInfo, global::Common.First.Api.Item.Avatars.AvatarsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint applies only to the 2018 or later seasons. Requests for other seasons will result in a `Bad Season` error. The team avatar listings API returns all FRC official teams in a particular `season` with, if applicable, their Avatar. If specified, the `teamNumber` parameter will return only one result with the details of the requested `teamNumber`. Alternately, the `eventCode` parameter allows sorting of the team list to only those teams attending a particular event in the particular `season`. If you specify a `teamNumber` parameter, you cannot additionally specify an `eventCode` or you will receive an `HTTP 501`. If a team does not have an Avatar, the return value will be `null`. Please note that the returned Avatar is encoded in the reply, and would need to be properly handled in order to render a PNG image.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint applies only to the 2018 or later seasons. Requests for other seasons will result in a `Bad Season` error. The team avatar listings API returns all FRC official teams in a particular `season` with, if applicable, their Avatar. If specified, the `teamNumber` parameter will return only one result with the details of the requested `teamNumber`. Alternately, the `eventCode` parameter allows sorting of the team list to only those teams attending a particular event in the particular `season`. If you specify a `teamNumber` parameter, you cannot additionally specify an `eventCode` or you will receive an `HTTP 501`. If a team does not have an Avatar, the return value will be `null`. Please note that the returned Avatar is encoded in the reply, and would need to be properly handled in order to render a PNG image.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AvatarsRequestBuilderGetQueryParameters 
        {
            /// <summary>**(string)** Case insensitive alphanumeric eventCode of the event from which details are requested.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("eventCode")]
            public string? EventCode { get; set; }
#nullable restore
#else
            [QueryParameter("eventCode")]
            public string EventCode { get; set; }
#endif
            /// <summary>**(int)** Numeric page of results to return. If not included, page 1 will be returned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page")]
            public string? Page { get; set; }
#nullable restore
#else
            [QueryParameter("page")]
            public string Page { get; set; }
#endif
            /// <summary>**(int)** Numeric teamNumber of the team about which information is requested. Must be 1 to 4 digits.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("teamNumber")]
            public string? TeamNumber { get; set; }
#nullable restore
#else
            [QueryParameter("teamNumber")]
            public string TeamNumber { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AvatarsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Common.First.Api.Item.Avatars.AvatarsRequestBuilder.AvatarsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
