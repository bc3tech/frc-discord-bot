// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Common.First.Api.Item.Scores.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \{season}\scores\{eventCode}\{tournamentLevel}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTournamentLevelItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTournamentLevelItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/scores/{eventCode}/{tournamentLevel}{?end*,matchNumber*,start*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTournamentLevelItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/{season}/scores/{eventCode}/{tournamentLevel}{?end*,matchNumber*,start*}", rawUrl)
        {
        }
        /// <summary>
        /// The score details API returns the score detail for all matches of a particular event in a particular season and a particular tournament level. Score details are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress.**IMPORTANT: This endpoint returns differently depending on the season requested. The response details are listed multiple times, representing the different seasons possible in the return. Additionally, the scores shown in the example returns are not necessarily realistic- like the points may not add up.**If you specify the `teamNumber` parameter, you cannot specify a `matchNumber` parameter. If you specify the `matchNumber`, you cannot define a `start` or `end`._**Note:**_ If you specify start, and it is higher than the maximum match number at the event, you will not receive any match results in the response. The same is true in reverse for the end parameter.&gt; _Click the &quot;20XX Score Details&quot; drop down in the example request/response pane (to the right or below) to view example score details responses for each of the available seasons._
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel5XXError">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelGetResponse?> GetAsWithTournamentLevelGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelGetResponse> GetAsWithTournamentLevelGetResponseAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel4XXError.CreateFromDiscriminatorValue },
                { "500", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel500Error.CreateFromDiscriminatorValue },
                { "5XX", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelGetResponse>(requestInfo, global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The score details API returns the score detail for all matches of a particular event in a particular season and a particular tournament level. Score details are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress.**IMPORTANT: This endpoint returns differently depending on the season requested. The response details are listed multiple times, representing the different seasons possible in the return. Additionally, the scores shown in the example returns are not necessarily realistic- like the points may not add up.**If you specify the `teamNumber` parameter, you cannot specify a `matchNumber` parameter. If you specify the `matchNumber`, you cannot define a `start` or `end`._**Note:**_ If you specify start, and it is higher than the maximum match number at the event, you will not receive any match results in the response. The same is true in reverse for the end parameter.&gt; _Click the &quot;20XX Score Details&quot; drop down in the example request/response pane (to the right or below) to view example score details responses for each of the available seasons._
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel4XXError">When receiving a 4XX status code</exception>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel500Error">When receiving a 500 status code</exception>
        /// <exception cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel5XXError">When receiving a 5XX status code</exception>
        [Obsolete("This method is obsolete. Use GetAsWithTournamentLevelGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelResponse?> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelResponse> GetAsync(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "4XX", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel4XXError.CreateFromDiscriminatorValue },
                { "500", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel500Error.CreateFromDiscriminatorValue },
                { "5XX", global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevel5XXError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelResponse>(requestInfo, global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// The score details API returns the score detail for all matches of a particular event in a particular season and a particular tournament level. Score details are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress.**IMPORTANT: This endpoint returns differently depending on the season requested. The response details are listed multiple times, representing the different seasons possible in the return. Additionally, the scores shown in the example returns are not necessarily realistic- like the points may not add up.**If you specify the `teamNumber` parameter, you cannot specify a `matchNumber` parameter. If you specify the `matchNumber`, you cannot define a `start` or `end`._**Note:**_ If you specify start, and it is higher than the maximum match number at the event, you will not receive any match results in the response. The same is true in reverse for the end parameter.&gt; _Click the &quot;20XX Score Details&quot; drop down in the example request/response pane (to the right or below) to view example score details responses for each of the available seasons._
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// The score details API returns the score detail for all matches of a particular event in a particular season and a particular tournament level. Score details are only available once a match has been played, retrieving info about future matches requires the event schedule API. You cannot receive data about a match that is in progress.**IMPORTANT: This endpoint returns differently depending on the season requested. The response details are listed multiple times, representing the different seasons possible in the return. Additionally, the scores shown in the example returns are not necessarily realistic- like the points may not add up.**If you specify the `teamNumber` parameter, you cannot specify a `matchNumber` parameter. If you specify the `matchNumber`, you cannot define a `start` or `end`._**Note:**_ If you specify start, and it is higher than the maximum match number at the event, you will not receive any match results in the response. The same is true in reverse for the end parameter.&gt; _Click the &quot;20XX Score Details&quot; drop down in the example request/response pane (to the right or below) to view example score details responses for each of the available seasons._
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTournamentLevelItemRequestBuilderGetQueryParameters 
        {
            /// <summary>**(int)** Optional end match number for subset of results to return (inclusive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("end")]
            public string? End { get; set; }
#nullable restore
#else
            [QueryParameter("end")]
            public string End { get; set; }
#endif
            /// <summary>**(int)** Optional specific single matchNumber of result.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("matchNumber")]
            public string? MatchNumber { get; set; }
#nullable restore
#else
            [QueryParameter("matchNumber")]
            public string MatchNumber { get; set; }
#endif
            /// <summary>**(int)** Optional start match number for subset of results to return (includsive).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("start")]
            public string? Start { get; set; }
#nullable restore
#else
            [QueryParameter("start")]
            public string Start { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTournamentLevelItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Common.First.Api.Item.Scores.Item.Item.WithTournamentLevelItemRequestBuilder.WithTournamentLevelItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
