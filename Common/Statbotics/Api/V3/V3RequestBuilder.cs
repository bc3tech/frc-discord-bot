// <auto-generated/>
#pragma warning disable CS0618
using Common.Statbotics.Api.V3.Event;
using Common.Statbotics.Api.V3.Events;
using Common.Statbotics.Api.V3.Match;
using Common.Statbotics.Api.V3.Matches;
using Common.Statbotics.Api.V3.Team;
using Common.Statbotics.Api.V3.Team_event;
using Common.Statbotics.Api.V3.Team_events;
using Common.Statbotics.Api.V3.Team_match;
using Common.Statbotics.Api.V3.Team_matches;
using Common.Statbotics.Api.V3.Team_year;
using Common.Statbotics.Api.V3.Team_years;
using Common.Statbotics.Api.V3.Teams;
using Common.Statbotics.Api.V3.Year;
using Common.Statbotics.Api.V3.Years;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Common.Statbotics.Api.V3
{
    /// <summary>
    /// Builds and executes requests for operations under \v3
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class V3RequestBuilder : BaseRequestBuilder
    {
        /// <summary>The event property</summary>
        public global::Common.Statbotics.Api.V3.Event.EventRequestBuilder Event
        {
            get => new global::Common.Statbotics.Api.V3.Event.EventRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Common.Statbotics.Api.V3.Events.EventsRequestBuilder Events
        {
            get => new global::Common.Statbotics.Api.V3.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The match property</summary>
        public global::Common.Statbotics.Api.V3.Match.MatchRequestBuilder Match
        {
            get => new global::Common.Statbotics.Api.V3.Match.MatchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The matches property</summary>
        public global::Common.Statbotics.Api.V3.Matches.MatchesRequestBuilder Matches
        {
            get => new global::Common.Statbotics.Api.V3.Matches.MatchesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team property</summary>
        public global::Common.Statbotics.Api.V3.Team.TeamRequestBuilder Team
        {
            get => new global::Common.Statbotics.Api.V3.Team.TeamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_event property</summary>
        public global::Common.Statbotics.Api.V3.Team_event.Team_eventRequestBuilder Team_event
        {
            get => new global::Common.Statbotics.Api.V3.Team_event.Team_eventRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_events property</summary>
        public global::Common.Statbotics.Api.V3.Team_events.Team_eventsRequestBuilder Team_events
        {
            get => new global::Common.Statbotics.Api.V3.Team_events.Team_eventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_match property</summary>
        public global::Common.Statbotics.Api.V3.Team_match.Team_matchRequestBuilder Team_match
        {
            get => new global::Common.Statbotics.Api.V3.Team_match.Team_matchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_matches property</summary>
        public global::Common.Statbotics.Api.V3.Team_matches.Team_matchesRequestBuilder Team_matches
        {
            get => new global::Common.Statbotics.Api.V3.Team_matches.Team_matchesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_year property</summary>
        public global::Common.Statbotics.Api.V3.Team_year.Team_yearRequestBuilder Team_year
        {
            get => new global::Common.Statbotics.Api.V3.Team_year.Team_yearRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The team_years property</summary>
        public global::Common.Statbotics.Api.V3.Team_years.Team_yearsRequestBuilder Team_years
        {
            get => new global::Common.Statbotics.Api.V3.Team_years.Team_yearsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The teams property</summary>
        public global::Common.Statbotics.Api.V3.Teams.TeamsRequestBuilder Teams
        {
            get => new global::Common.Statbotics.Api.V3.Teams.TeamsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The year property</summary>
        public global::Common.Statbotics.Api.V3.Year.YearRequestBuilder Year
        {
            get => new global::Common.Statbotics.Api.V3.Year.YearRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The years property</summary>
        public global::Common.Statbotics.Api.V3.Years.YearsRequestBuilder Years
        {
            get => new global::Common.Statbotics.Api.V3.Years.YearsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Statbotics.Api.V3.V3RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public V3RequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v3", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Common.Statbotics.Api.V3.V3RequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public V3RequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v3", rawUrl)
        {
        }
        /// <summary>
        /// Read Root
        /// </summary>
        /// <returns>A <see cref="UntypedNode"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<UntypedNode?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<UntypedNode> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<UntypedNode>(requestInfo, UntypedNode.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Read Root
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Common.Statbotics.Api.V3.V3RequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Common.Statbotics.Api.V3.V3RequestBuilder WithUrl(string rawUrl)
        {
            return new global::Common.Statbotics.Api.V3.V3RequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class V3RequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
