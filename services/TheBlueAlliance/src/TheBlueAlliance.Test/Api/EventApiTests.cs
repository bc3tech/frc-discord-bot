/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using TheBlueAlliance.Client;
using TheBlueAlliance.Api;
// uncomment below to import models
//using TheBlueAlliance.Model;

namespace TheBlueAlliance.Test.Api


    /// <summary>
    ///  Class for testing EventApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class EventApiTests : IDisposable
    {
        private EventApi instance;

        public EventApiTests()
        {
            instance = new EventApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of EventApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' EventApi
            //Assert.IsType<EventApi>(instance);
        }

        /// <summary>
        /// Test GetDistrictAwards
        /// </summary>
        [Fact]
        public void GetDistrictAwardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictAwards(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetDistrictEvents
        /// </summary>
        [Fact]
        public void GetDistrictEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictEvents(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetDistrictEventsKeys
        /// </summary>
        [Fact]
        public void GetDistrictEventsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictEventsKeys(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetDistrictEventsSimple
        /// </summary>
        [Fact]
        public void GetDistrictEventsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictEventsSimple(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetEvent
        /// </summary>
        [Fact]
        public void GetEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEvent(eventKey, ifNoneMatch);
            //Assert.IsType<Event>(response);
        }

        /// <summary>
        /// Test GetEventAlliances
        /// </summary>
        [Fact]
        public void GetEventAlliancesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventAlliances(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<EliminationAlliance>>(response);
        }

        /// <summary>
        /// Test GetEventAwards
        /// </summary>
        [Fact]
        public void GetEventAwardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventAwards(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetEventCOPRs
        /// </summary>
        [Fact]
        public void GetEventCOPRsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventCOPRs(eventKey, ifNoneMatch);
            //Assert.IsType<Dictionary<string, Dictionary<string, decimal>>>(response);
        }

        /// <summary>
        /// Test GetEventDistrictPoints
        /// </summary>
        [Fact]
        public void GetEventDistrictPointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventDistrictPoints(eventKey, ifNoneMatch);
            //Assert.IsType<EventDistrictPoints>(response);
        }

        /// <summary>
        /// Test GetEventInsights
        /// </summary>
        [Fact]
        public void GetEventInsightsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventInsights(eventKey, ifNoneMatch);
            //Assert.IsType<EventInsights>(response);
        }

        /// <summary>
        /// Test GetEventMatchTimeseries
        /// </summary>
        [Fact]
        public void GetEventMatchTimeseriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventMatchTimeseries(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetEventMatches
        /// </summary>
        [Fact]
        public void GetEventMatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventMatches(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetEventMatchesKeys
        /// </summary>
        [Fact]
        public void GetEventMatchesKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventMatchesKeys(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetEventMatchesSimple
        /// </summary>
        [Fact]
        public void GetEventMatchesSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventMatchesSimple(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<MatchSimple>>(response);
        }

        /// <summary>
        /// Test GetEventOPRs
        /// </summary>
        [Fact]
        public void GetEventOPRsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventOPRs(eventKey, ifNoneMatch);
            //Assert.IsType<EventOPRs>(response);
        }

        /// <summary>
        /// Test GetEventPredictions
        /// </summary>
        [Fact]
        public void GetEventPredictionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventPredictions(eventKey, ifNoneMatch);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test GetEventRankings
        /// </summary>
        [Fact]
        public void GetEventRankingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventRankings(eventKey, ifNoneMatch);
            //Assert.IsType<EventRanking>(response);
        }

        /// <summary>
        /// Test GetEventSimple
        /// </summary>
        [Fact]
        public void GetEventSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventSimple(eventKey, ifNoneMatch);
            //Assert.IsType<EventSimple>(response);
        }

        /// <summary>
        /// Test GetEventTeamMedia
        /// </summary>
        [Fact]
        public void GetEventTeamMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamMedia(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<Media>>(response);
        }

        /// <summary>
        /// Test GetEventTeams
        /// </summary>
        [Fact]
        public void GetEventTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeams(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<Team>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsKeys
        /// </summary>
        [Fact]
        public void GetEventTeamsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsKeys(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsSimple
        /// </summary>
        [Fact]
        public void GetEventTeamsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsSimple(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<TeamSimple>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsStatuses
        /// </summary>
        [Fact]
        public void GetEventTeamsStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsStatuses(eventKey, ifNoneMatch);
            //Assert.IsType<Dictionary<string, GetTeamEventsStatusesByYear200ResponseValue>>(response);
        }

        /// <summary>
        /// Test GetEventsByYear
        /// </summary>
        [Fact]
        public void GetEventsByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventsByYear(year, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetEventsByYearKeys
        /// </summary>
        [Fact]
        public void GetEventsByYearKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventsByYearKeys(year, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetEventsByYearSimple
        /// </summary>
        [Fact]
        public void GetEventsByYearSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventsByYearSimple(year, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamEventAwards
        /// </summary>
        [Fact]
        public void GetTeamEventAwardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventAwards(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatches
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatches(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatchesKeys
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatchesKeys(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatchesSimple
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatchesSimple(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetTeamEventStatus
        /// </summary>
        [Fact]
        public void GetTeamEventStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventStatus(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<TeamEventStatus>(response);
        }

        /// <summary>
        /// Test GetTeamEvents
        /// </summary>
        [Fact]
        public void GetTeamEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEvents(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYear
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYearKeys
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYearKeys(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYearSimple
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYearSimple(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsKeys
        /// </summary>
        [Fact]
        public void GetTeamEventsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsKeys(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsSimple
        /// </summary>
        [Fact]
        public void GetTeamEventsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsSimple(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsStatusesByYear
        /// </summary>
        [Fact]
        public void GetTeamEventsStatusesByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsStatusesByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Dictionary<string, GetTeamEventsStatusesByYear200ResponseValue>>(response);
        }
    }

