/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using TheBlueAlliance.Client;
using TheBlueAlliance.Api;
// uncomment below to import models
//using TheBlueAlliance.Model;

namespace TheBlueAlliance.Test.Api


    /// <summary>
    ///  Class for testing TeamApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TeamApiTests : IDisposable
    {
        public TeamApiTests()
        {
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TeamApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TeamApi
            //Assert.IsType<TeamApi>(instance);
        }

        /// <summary>
        /// Test GetDistrictRankings
        /// </summary>
        [Fact]
        public void GetDistrictRankingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictRankings(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<DistrictRanking>>(response);
        }

        /// <summary>
        /// Test GetDistrictTeams
        /// </summary>
        [Fact]
        public void GetDistrictTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictTeams(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<Team>>(response);
        }

        /// <summary>
        /// Test GetDistrictTeamsKeys
        /// </summary>
        [Fact]
        public void GetDistrictTeamsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictTeamsKeys(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetDistrictTeamsSimple
        /// </summary>
        [Fact]
        public void GetDistrictTeamsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string districtKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetDistrictTeamsSimple(districtKey, ifNoneMatch);
            //Assert.IsType<Collection<TeamSimple>>(response);
        }

        /// <summary>
        /// Test GetEventTeams
        /// </summary>
        [Fact]
        public void GetEventTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeams(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<Team>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsKeys
        /// </summary>
        [Fact]
        public void GetEventTeamsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsKeys(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsSimple
        /// </summary>
        [Fact]
        public void GetEventTeamsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsSimple(eventKey, ifNoneMatch);
            //Assert.IsType<Collection<TeamSimple>>(response);
        }

        /// <summary>
        /// Test GetEventTeamsStatuses
        /// </summary>
        [Fact]
        public void GetEventTeamsStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetEventTeamsStatuses(eventKey, ifNoneMatch);
            //Assert.IsType<Dictionary<string, GetTeamEventsStatusesByYear200ResponseValue>>(response);
        }

        /// <summary>
        /// Test GetTeam
        /// </summary>
        [Fact]
        public void GetTeamTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeam(teamKey, ifNoneMatch);
            //Assert.IsType<Team>(response);
        }

        /// <summary>
        /// Test GetTeamAwards
        /// </summary>
        [Fact]
        public void GetTeamAwardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamAwards(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetTeamAwardsByYear
        /// </summary>
        [Fact]
        public void GetTeamAwardsByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamAwardsByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetTeamDistricts
        /// </summary>
        [Fact]
        public void GetTeamDistrictsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamDistricts(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<DistrictList>>(response);
        }

        /// <summary>
        /// Test GetTeamEventAwards
        /// </summary>
        [Fact]
        public void GetTeamEventAwardsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventAwards(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Award>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatches
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatches(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatchesKeys
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatchesKeys(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventMatchesSimple
        /// </summary>
        [Fact]
        public void GetTeamEventMatchesSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventMatchesSimple(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetTeamEventStatus
        /// </summary>
        [Fact]
        public void GetTeamEventStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string eventKey = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventStatus(eventKey, teamKey, ifNoneMatch);
            //Assert.IsType<TeamEventStatus>(response);
        }

        /// <summary>
        /// Test GetTeamEvents
        /// </summary>
        [Fact]
        public void GetTeamEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEvents(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYear
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Event>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYearKeys
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYearKeys(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsByYearSimple
        /// </summary>
        [Fact]
        public void GetTeamEventsByYearSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsByYearSimple(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsKeys
        /// </summary>
        [Fact]
        public void GetTeamEventsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsKeys(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsSimple
        /// </summary>
        [Fact]
        public void GetTeamEventsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsSimple(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<EventSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamEventsStatusesByYear
        /// </summary>
        [Fact]
        public void GetTeamEventsStatusesByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamEventsStatusesByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Dictionary<string, GetTeamEventsStatusesByYear200ResponseValue>>(response);
        }

        /// <summary>
        /// Test GetTeamHistory
        /// </summary>
        [Fact]
        public void GetTeamHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamHistory(teamKey, ifNoneMatch);
            //Assert.IsType<History>(response);
        }

        /// <summary>
        /// Test GetTeamMatchesByYear
        /// </summary>
        [Fact]
        public void GetTeamMatchesByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMatchesByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Match>>(response);
        }

        /// <summary>
        /// Test GetTeamMatchesByYearKeys
        /// </summary>
        [Fact]
        public void GetTeamMatchesByYearKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMatchesByYearKeys(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamMatchesByYearSimple
        /// </summary>
        [Fact]
        public void GetTeamMatchesByYearSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMatchesByYearSimple(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<MatchSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamMediaByTag
        /// </summary>
        [Fact]
        public void GetTeamMediaByTagTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mediaTag = null;
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMediaByTag(mediaTag, teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Media>>(response);
        }

        /// <summary>
        /// Test GetTeamMediaByTagYear
        /// </summary>
        [Fact]
        public void GetTeamMediaByTagYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string mediaTag = null;
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMediaByTagYear(mediaTag, teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Media>>(response);
        }

        /// <summary>
        /// Test GetTeamMediaByYear
        /// </summary>
        [Fact]
        public void GetTeamMediaByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamMediaByYear(teamKey, year, ifNoneMatch);
            //Assert.IsType<Collection<Media>>(response);
        }

        /// <summary>
        /// Test GetTeamRobots
        /// </summary>
        [Fact]
        public void GetTeamRobotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamRobots(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<TeamRobot>>(response);
        }

        /// <summary>
        /// Test GetTeamSimple
        /// </summary>
        [Fact]
        public void GetTeamSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamSimple(teamKey, ifNoneMatch);
            //Assert.IsType<TeamSimple>(response);
        }

        /// <summary>
        /// Test GetTeamSocialMedia
        /// </summary>
        [Fact]
        public void GetTeamSocialMediaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamSocialMedia(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<Media>>(response);
        }

        /// <summary>
        /// Test GetTeamYearsParticipated
        /// </summary>
        [Fact]
        public void GetTeamYearsParticipatedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamKey = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamYearsParticipated(teamKey, ifNoneMatch);
            //Assert.IsType<Collection<int>>(response);
        }

        /// <summary>
        /// Test GetTeams
        /// </summary>
        [Fact]
        public void GetTeamsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeams(pageNum, ifNoneMatch);
            //Assert.IsType<Collection<Team>>(response);
        }

        /// <summary>
        /// Test GetTeamsByYear
        /// </summary>
        [Fact]
        public void GetTeamsByYearTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamsByYear(pageNum, year, ifNoneMatch);
            //Assert.IsType<Collection<Team>>(response);
        }

        /// <summary>
        /// Test GetTeamsByYearKeys
        /// </summary>
        [Fact]
        public void GetTeamsByYearKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamsByYearKeys(pageNum, year, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamsByYearSimple
        /// </summary>
        [Fact]
        public void GetTeamsByYearSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //int year = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamsByYearSimple(pageNum, year, ifNoneMatch);
            //Assert.IsType<Collection<TeamSimple>>(response);
        }

        /// <summary>
        /// Test GetTeamsKeys
        /// </summary>
        [Fact]
        public void GetTeamsKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamsKeys(pageNum, ifNoneMatch);
            //Assert.IsType<Collection<string>>(response);
        }

        /// <summary>
        /// Test GetTeamsSimple
        /// </summary>
        [Fact]
        public void GetTeamsSimpleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int pageNum = null;
            //string? ifNoneMatch = null;
            //var response = instance.GetTeamsSimple(pageNum, ifNoneMatch);
            //Assert.IsType<Collection<TeamSimple>>(response);
        }
    }

