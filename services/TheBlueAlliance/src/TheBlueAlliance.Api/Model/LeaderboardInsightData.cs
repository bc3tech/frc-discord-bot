/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// LeaderboardInsightData
/// </summary>
public partial class LeaderboardInsightData : IValidatableObject
{
    /// <summary>
    /// What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
    /// </summary>
    /// <value>What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.</value>
    [JsonConverter(typeof(JsonStringEnumConverter<KeyTypeEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionClassName = "LeaderboardInsightDataKeyTypeEnumExtensions")]
    public enum KeyTypeEnum
    {
        /// <summary>
        /// Enum Team for value: team
        /// </summary>
        [EnumMember(Value = "team")]
        Team = 1,

        /// <summary>
        /// Enum Event for value: event
        /// </summary>
        [EnumMember(Value = "event")]
        Event = 2,

        /// <summary>
        /// Enum Match for value: match
        /// </summary>
        [EnumMember(Value = "match")]
        Match = 3
    }

    /// <summary>
    /// What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
    /// </summary>
    /// <value>What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.</value>
    [JsonPropertyName("key_type")]
    public KeyTypeEnum KeyType { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="LeaderboardInsightData" /> class.
    /// </summary>
    [JsonConstructor]
    protected LeaderboardInsightData() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="LeaderboardInsightData" /> class.
    /// </summary>
    /// <param name="rankings">rankings (required).</param>
    /// <param name="keyType">What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;. (required).</param>
    public LeaderboardInsightData(List<LeaderboardInsightDataRankingsInner>? rankings = default, KeyTypeEnum keyType = default)
    {
        // to ensure "rankings" is required (not null)
        ArgumentNullException.ThrowIfNull(rankings);
        this.Rankings = rankings;
        this.KeyType = keyType;
    }

    /// <summary>
    /// Gets or Sets Rankings
    /// </summary>
    [JsonPropertyName("rankings")]
    public List<LeaderboardInsightDataRankingsInner> Rankings { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class LeaderboardInsightData {");
        sb.Append("  Rankings: ").AppendLine(Rankings.ToString());
        sb.Append("  KeyType: ").AppendLine(KeyType.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
