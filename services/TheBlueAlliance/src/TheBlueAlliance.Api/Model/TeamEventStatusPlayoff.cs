/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="TeamEventStatusPlayoff" /> class.
/// </remarks>
/// <param name="level">The highest playoff level the team reached..</param>
/// <param name="currentLevelRecord">currentLevelRecord.</param>
/// <param name="record">record.</param>
/// <param name="status">Current competition status for the playoffs..</param>
/// <param name="playoffAverage">The average match score during playoffs. Year specific. May be null if not relevant for a given year..</param>
public partial class TeamEventStatusPlayoff(TeamEventStatusPlayoff.LevelEnum? level = default, WLTRecord? currentLevelRecord = default, WLTRecord? record = default, TeamEventStatusPlayoff.StatusEnum? status = default, int? playoffAverage = default) : IValidatableObject
{
    /// <summary>
    /// The highest playoff level the team reached.
    /// </summary>
    /// <value>The highest playoff level the team reached.</value>
    [JsonConverter(typeof(JsonStringEnumConverter)), Microsoft.Extensions.EnumStrings.EnumStrings]
    public enum LevelEnum
    {
        /// <summary>
        /// Enum Qm for value: qm
        /// </summary>
        [EnumMember(Value = "qm")]
        Qm = 1,

        /// <summary>
        /// Enum Ef for value: ef
        /// </summary>
        [EnumMember(Value = "ef")]
        Ef = 2,

        /// <summary>
        /// Enum Qf for value: qf
        /// </summary>
        [EnumMember(Value = "qf")]
        Qf = 3,

        /// <summary>
        /// Enum Sf for value: sf
        /// </summary>
        [EnumMember(Value = "sf")]
        Sf = 4,

        /// <summary>
        /// Enum F for value: f
        /// </summary>
        [EnumMember(Value = "f")]
        F = 5
    }

    /// <summary>
    /// The highest playoff level the team reached.
    /// </summary>
    /// <value>The highest playoff level the team reached.</value>

    [JsonPropertyName("level")]
    public LevelEnum? Level { get; set; } = level;
    /// <summary>
    /// Current competition status for the playoffs.
    /// </summary>
    /// <value>Current competition status for the playoffs.</value>
    [JsonConverter(typeof(JsonStringEnumConverter)), Microsoft.Extensions.EnumStrings.EnumStrings]
    public enum StatusEnum
    {
        /// <summary>
        /// Enum Won for value: won
        /// </summary>
        [EnumMember(Value = "won")]
        Won = 1,

        /// <summary>
        /// Enum Eliminated for value: eliminated
        /// </summary>
        [EnumMember(Value = "eliminated")]
        Eliminated = 2,

        /// <summary>
        /// Enum Playing for value: playing
        /// </summary>
        [EnumMember(Value = "playing")]
        Playing = 3
    }

    /// <summary>
    /// Current competition status for the playoffs.
    /// </summary>
    /// <value>Current competition status for the playoffs.</value>

    [JsonPropertyName("status")]
    public StatusEnum? Status { get; set; } = status;

    /// <summary>
    /// Gets or Sets CurrentLevelRecord
    /// </summary>

    [JsonPropertyName("current_level_record")]
    public WLTRecord CurrentLevelRecord { get; set; } = currentLevelRecord;

    /// <summary>
    /// Gets or Sets Record
    /// </summary>

    [JsonPropertyName("record")]
    public WLTRecord Record { get; set; } = record;

    /// <summary>
    /// The average match score during playoffs. Year specific. May be null if not relevant for a given year.
    /// </summary>
    /// <value>The average match score during playoffs. Year specific. May be null if not relevant for a given year.</value>

    [JsonPropertyName("playoff_average")]
    public int? PlayoffAverage { get; set; } = playoffAverage;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class TeamEventStatusPlayoff {");
        sb.Append("  Level: ").AppendLine(Level.ToString());
        sb.Append("  CurrentLevelRecord: ").AppendLine(CurrentLevelRecord.ToString());
        sb.Append("  Record: ").AppendLine(Record.ToString());
        sb.Append("  Status: ").AppendLine(Status.ToString());
        sb.Append("  PlayoffAverage: ").AppendLine(PlayoffAverage.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
