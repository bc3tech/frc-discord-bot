/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Rank of a team in a district.
/// </summary>
public partial class DistrictRanking : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="DistrictRanking" /> class.
    /// </summary>
    [JsonConstructor]
    protected DistrictRanking() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="DistrictRanking" /> class.
    /// </summary>
    /// <param name="teamKey">TBA team key for the team. (required).</param>
    /// <param name="rank">Numerical rank of the team, 1 being top rank. (required).</param>
    /// <param name="rookieBonus">Any points added to a team as a result of the rookie bonus..</param>
    /// <param name="pointTotal">Total district points for the team. (required).</param>
    /// <param name="eventPoints">List of events that contributed to the point total for the team..</param>
    public DistrictRanking(string? teamKey = default, int rank = default, int rookieBonus = default, int pointTotal = default, List<DistrictRankingEventPointsInner>? eventPoints = default)
    {
        // to ensure "teamKey" is required (not null)
        ArgumentNullException.ThrowIfNull(teamKey);
        this.TeamKey = teamKey;
        this.Rank = rank;
        this.PointTotal = pointTotal;
        this.RookieBonus = rookieBonus;
        this.EventPoints = eventPoints;
    }

    /// <summary>
    /// TBA team key for the team.
    /// </summary>
    /// <value>TBA team key for the team.</value>
    [JsonPropertyName("team_key")]
    public string TeamKey { get; set; }

    /// <summary>
    /// Numerical rank of the team, 1 being top rank.
    /// </summary>
    /// <value>Numerical rank of the team, 1 being top rank.</value>
    [JsonPropertyName("rank")]
    public int Rank { get; set; }

    /// <summary>
    /// Any points added to a team as a result of the rookie bonus.
    /// </summary>
    /// <value>Any points added to a team as a result of the rookie bonus.</value>

    [JsonPropertyName("rookie_bonus")]
    public int RookieBonus { get; set; }

    /// <summary>
    /// Total district points for the team.
    /// </summary>
    /// <value>Total district points for the team.</value>
    [JsonPropertyName("point_total")]
    public int PointTotal { get; set; }

    /// <summary>
    /// List of events that contributed to the point total for the team.
    /// </summary>
    /// <value>List of events that contributed to the point total for the team.</value>

    [JsonPropertyName("event_points")]
    public List<DistrictRankingEventPointsInner> EventPoints { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class DistrictRanking {");
        sb.Append("  TeamKey: ").AppendLine(TeamKey.ToString());
        sb.Append("  Rank: ").AppendLine(Rank.ToString());
        sb.Append("  RookieBonus: ").AppendLine(RookieBonus.ToString());
        sb.Append("  PointTotal: ").AppendLine(PointTotal.ToString());
        sb.Append("  EventPoints: ").AppendLine(EventPoints.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
