/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// EventRankingRankingsInner
/// </summary>
public partial class EventRankingRankingsInner : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventRankingRankingsInner" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventRankingRankingsInner() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventRankingRankingsInner" /> class.
    /// </summary>
    /// <param name="matchesPlayed">Number of matches played by this team. (required).</param>
    /// <param name="qualAverage">The average match score during qualifications. Year specific. May be null if not relevant for a given year. (required).</param>
    /// <param name="extraStats">Additional special data on the team&#39;s performance calculated by TBA. (required).</param>
    /// <param name="sortOrders">Additional year-specific information, may be null. See parent &#x60;sort_order_info&#x60; for details. (required).</param>
    /// <param name="record">record (required).</param>
    /// <param name="rank">The team&#39;s rank at the event as provided by FIRST. (required).</param>
    /// <param name="dq">Number of times disqualified. (required).</param>
    /// <param name="teamKey">The team with this rank. (required).</param>
    public EventRankingRankingsInner(int matchesPlayed = default, int? qualAverage = default, List<decimal>? extraStats = default, List<decimal>? sortOrders = default, WLTRecord? record = default, int rank = default, int dq = default, string? teamKey = default)
    {
        this.MatchesPlayed = matchesPlayed;
        // to ensure "qualAverage" is required (not null)
        if (qualAverage is null)
        {
            throw new ArgumentNullException("qualAverage is a required property for EventRankingRankingsInner and cannot be null");
        }

        this.QualAverage = qualAverage;
        // to ensure "extraStats" is required (not null)
        ArgumentNullException.ThrowIfNull(extraStats);
        this.ExtraStats = extraStats;
        // to ensure "sortOrders" is required (not null)
        ArgumentNullException.ThrowIfNull(sortOrders);
        this.SortOrders = sortOrders;
        // to ensure "record" is required (not null)
        ArgumentNullException.ThrowIfNull(record);
        this.Record = record;
        this.Rank = rank;
        this.Dq = dq;
        // to ensure "teamKey" is required (not null)
        ArgumentNullException.ThrowIfNull(teamKey);
        this.TeamKey = teamKey;
    }

    /// <summary>
    /// Number of matches played by this team.
    /// </summary>
    /// <value>Number of matches played by this team.</value>
    [JsonPropertyName("matches_played")]
    public int MatchesPlayed { get; set; }

    /// <summary>
    /// The average match score during qualifications. Year specific. May be null if not relevant for a given year.
    /// </summary>
    /// <value>The average match score during qualifications. Year specific. May be null if not relevant for a given year.</value>
    [JsonPropertyName("qual_average")]
    public int? QualAverage { get; set; }

    /// <summary>
    /// Additional special data on the team&#39;s performance calculated by TBA.
    /// </summary>
    /// <value>Additional special data on the team&#39;s performance calculated by TBA.</value>
    [JsonPropertyName("extra_stats")]
    public List<decimal> ExtraStats { get; set; }

    /// <summary>
    /// Additional year-specific information, may be null. See parent &#x60;sort_order_info&#x60; for details.
    /// </summary>
    /// <value>Additional year-specific information, may be null. See parent &#x60;sort_order_info&#x60; for details.</value>
    [JsonPropertyName("sort_orders")]
    public List<decimal> SortOrders { get; set; }

    /// <summary>
    /// Gets or Sets Record
    /// </summary>
    [JsonPropertyName("record")]
    public WLTRecord Record { get; set; }

    /// <summary>
    /// The team&#39;s rank at the event as provided by FIRST.
    /// </summary>
    /// <value>The team&#39;s rank at the event as provided by FIRST.</value>
    [JsonPropertyName("rank")]
    public int Rank { get; set; }

    /// <summary>
    /// Number of times disqualified.
    /// </summary>
    /// <value>Number of times disqualified.</value>
    [JsonPropertyName("dq")]
    public int Dq { get; set; }

    /// <summary>
    /// The team with this rank.
    /// </summary>
    /// <value>The team with this rank.</value>
    [JsonPropertyName("team_key")]
    public string TeamKey { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class EventRankingRankingsInner {");
        sb.Append("  MatchesPlayed: ").AppendLine(MatchesPlayed.ToString());
        sb.Append("  QualAverage: ").AppendLine(QualAverage.ToString());
        sb.Append("  ExtraStats: ").AppendLine(ExtraStats.ToString());
        sb.Append("  SortOrders: ").AppendLine(SortOrders.ToString());
        sb.Append("  Record: ").AppendLine(Record.ToString());
        sb.Append("  Rank: ").AppendLine(Rank.ToString());
        sb.Append("  Dq: ").AppendLine(Dq.ToString());
        sb.Append("  TeamKey: ").AppendLine(TeamKey.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
