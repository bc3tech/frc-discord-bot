/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Event
/// </summary>
public partial class Event : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Event" /> class.
    /// </summary>
    [JsonConstructor]
    protected Event() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Event" /> class.
    /// </summary>
    /// <param name="key">TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. (required).</param>
    /// <param name="name">Official name of event on record either provided by FIRST or organizers of offseason event. (required).</param>
    /// <param name="eventCode">Event short code, as provided by FIRST. (required).</param>
    /// <param name="eventType">Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2 (required).</param>
    /// <param name="district">district (required).</param>
    /// <param name="city">City, town, village, etc. the event is located in. (required).</param>
    /// <param name="stateProv">State or Province the event is located in. (required).</param>
    /// <param name="country">Country the event is located in. (required).</param>
    /// <param name="startDate">Event start date in &#x60;yyyy-mm-dd&#x60; format. (required).</param>
    /// <param name="endDate">Event end date in &#x60;yyyy-mm-dd&#x60; format. (required).</param>
    /// <param name="year">Year the event data is for. (required).</param>
    /// <param name="shortName">Same as &#x60;name&#x60; but doesn&#39;t include event specifiers, such as &#39;Regional&#39; or &#39;District&#39;. May be null. (required).</param>
    /// <param name="eventTypeString">Event Type, eg Regional, District, or Offseason. (required).</param>
    /// <param name="week">Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &#39;preseason&#39; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.) (required).</param>
    /// <param name="address">Address of the event&#39;s venue, if available. (required).</param>
    /// <param name="postalCode">Postal code from the event address. (required).</param>
    /// <param name="gmapsPlaceId">Google Maps Place ID for the event address. (required).</param>
    /// <param name="gmapsUrl">Link to address location on Google Maps. (required).</param>
    /// <param name="lat">Latitude for the event address. (required).</param>
    /// <param name="lng">Longitude for the event address. (required).</param>
    /// <param name="locationName">Name of the location at the address for the event, eg. Blue Alliance High School. (required).</param>
    /// <param name="timezone">Timezone name. (required).</param>
    /// <param name="website">The event&#39;s website, if any. (required).</param>
    /// <param name="firstEventId">The FIRST internal Event ID, used to link to the event on the FRC webpage. (required).</param>
    /// <param name="firstEventCode">Public facing event code used by FIRST (on frc-events.firstinspires.org, for example) (required).</param>
    /// <param name="webcasts">webcasts (required).</param>
    /// <param name="divisionKeys">An array of event keys for the divisions at this event. (required).</param>
    /// <param name="parentEventKey">The TBA Event key that represents the event&#39;s parent. Used to link back to the event from a division event. It is also the inverse relation of &#x60;divison_keys&#x60;. (required).</param>
    /// <param name="playoffType">Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null. (required).</param>
    /// <param name="playoffTypeString">String representation of the &#x60;playoff_type&#x60;, or null. (required).</param>
    public Event(string? key = default, string? name = default, string? eventCode = default, int eventType = default, DistrictList? district = default, string? city = default, string? stateProv = default, string? country = default, DateOnly startDate = default, DateOnly endDate = default, int year = default, string? shortName = default, string? eventTypeString = default, int? week = default, string? address = default, string? postalCode = default, string? gmapsPlaceId = default, string? gmapsUrl = default, double? lat = default, double? lng = default, string? locationName = default, string? timezone = default, string? website = default, string? firstEventId = default, string? firstEventCode = default, List<Webcast>? webcasts = default, List<string>? divisionKeys = default, string? parentEventKey = default, int? playoffType = default, string? playoffTypeString = default)
    {
        // to ensure "key" is required (not null)
        ArgumentNullException.ThrowIfNull(key);
        this.Key = key;
        // to ensure "name" is required (not null)
        ArgumentNullException.ThrowIfNull(name);
        this.Name = name;
        // to ensure "eventCode" is required (not null)
        ArgumentNullException.ThrowIfNull(eventCode);
        this.EventCode = eventCode;
        this.EventType = eventType;
        // to ensure "district" is required (not null)
        ArgumentNullException.ThrowIfNull(district);
        this.District = district;
        // to ensure "city" is required (not null)
        ArgumentNullException.ThrowIfNull(city);
        this.City = city;
        // to ensure "stateProv" is required (not null)
        ArgumentNullException.ThrowIfNull(stateProv);
        this.StateProv = stateProv;
        // to ensure "country" is required (not null)
        ArgumentNullException.ThrowIfNull(country);
        this.Country = country;
        this.StartDate = startDate;
        this.EndDate = endDate;
        this.Year = year;
        // to ensure "shortName" is required (not null)
        ArgumentNullException.ThrowIfNull(shortName);
        this.ShortName = shortName;
        // to ensure "eventTypeString" is required (not null)
        ArgumentNullException.ThrowIfNull(eventTypeString);
        this.EventTypeString = eventTypeString;
        // to ensure "week" is required (not null)
        if (week is null)
        {
            throw new ArgumentNullException("week is a required property for Event and cannot be null");
        }

        this.Week = week;
        // to ensure "address" is required (not null)
        ArgumentNullException.ThrowIfNull(address);
        this.Address = address;
        // to ensure "postalCode" is required (not null)
        ArgumentNullException.ThrowIfNull(postalCode);
        this.PostalCode = postalCode;
        // to ensure "gmapsPlaceId" is required (not null)
        ArgumentNullException.ThrowIfNull(gmapsPlaceId);
        this.GmapsPlaceId = gmapsPlaceId;
        // to ensure "gmapsUrl" is required (not null)
        ArgumentNullException.ThrowIfNull(gmapsUrl);
        this.GmapsUrl = gmapsUrl;
        // to ensure "lat" is required (not null)
        if (lat is null)
        {
            throw new ArgumentNullException("lat is a required property for Event and cannot be null");
        }

        this.Lat = lat;
        // to ensure "lng" is required (not null)
        if (lng is null)
        {
            throw new ArgumentNullException("lng is a required property for Event and cannot be null");
        }

        this.Lng = lng;
        // to ensure "locationName" is required (not null)
        ArgumentNullException.ThrowIfNull(locationName);
        this.LocationName = locationName;
        // to ensure "timezone" is required (not null)
        ArgumentNullException.ThrowIfNull(timezone);
        this.Timezone = timezone;
        // to ensure "website" is required (not null)
        ArgumentNullException.ThrowIfNull(website);
        this.Website = website;
        // to ensure "firstEventId" is required (not null)
        ArgumentNullException.ThrowIfNull(firstEventId);
        this.FirstEventId = firstEventId;
        // to ensure "firstEventCode" is required (not null)
        ArgumentNullException.ThrowIfNull(firstEventCode);
        this.FirstEventCode = firstEventCode;
        // to ensure "webcasts" is required (not null)
        ArgumentNullException.ThrowIfNull(webcasts);
        this.Webcasts = webcasts;
        // to ensure "divisionKeys" is required (not null)
        ArgumentNullException.ThrowIfNull(divisionKeys);
        this.DivisionKeys = divisionKeys;
        // to ensure "parentEventKey" is required (not null)
        ArgumentNullException.ThrowIfNull(parentEventKey);
        this.ParentEventKey = parentEventKey;
        // to ensure "playoffType" is required (not null)
        if (playoffType is null)
        {
            throw new ArgumentNullException("playoffType is a required property for Event and cannot be null");
        }

        this.PlayoffType = playoffType;
        // to ensure "playoffTypeString" is required (not null)
        ArgumentNullException.ThrowIfNull(playoffTypeString);
        this.PlayoffTypeString = playoffTypeString;
    }

    /// <summary>
    /// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
    /// </summary>
    /// <value>TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.</value>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// Official name of event on record either provided by FIRST or organizers of offseason event.
    /// </summary>
    /// <value>Official name of event on record either provided by FIRST or organizers of offseason event.</value>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Event short code, as provided by FIRST.
    /// </summary>
    /// <value>Event short code, as provided by FIRST.</value>
    [JsonPropertyName("event_code")]
    public string EventCode { get; set; }

    /// <summary>
    /// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
    /// </summary>
    /// <value>Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2</value>
    [JsonPropertyName("event_type")]
    public int EventType { get; set; }

    /// <summary>
    /// Gets or Sets District
    /// </summary>
    [JsonPropertyName("district")]
    public DistrictList District { get; set; }

    /// <summary>
    /// City, town, village, etc. the event is located in.
    /// </summary>
    /// <value>City, town, village, etc. the event is located in.</value>
    [JsonPropertyName("city")]
    public string City { get; set; }

    /// <summary>
    /// State or Province the event is located in.
    /// </summary>
    /// <value>State or Province the event is located in.</value>
    [JsonPropertyName("state_prov")]
    public string StateProv { get; set; }

    /// <summary>
    /// Country the event is located in.
    /// </summary>
    /// <value>Country the event is located in.</value>
    [JsonPropertyName("country")]
    public string Country { get; set; }

    /// <summary>
    /// Event start date in &#x60;yyyy-mm-dd&#x60; format.
    /// </summary>
    /// <value>Event start date in &#x60;yyyy-mm-dd&#x60; format.</value>
    [JsonPropertyName("start_date")]
    public DateOnly StartDate { get; set; }

    /// <summary>
    /// Event end date in &#x60;yyyy-mm-dd&#x60; format.
    /// </summary>
    /// <value>Event end date in &#x60;yyyy-mm-dd&#x60; format.</value>
    [JsonPropertyName("end_date")]
    public DateOnly EndDate { get; set; }

    /// <summary>
    /// Year the event data is for.
    /// </summary>
    /// <value>Year the event data is for.</value>
    [JsonPropertyName("year")]
    public int Year { get; set; }

    /// <summary>
    /// Same as &#x60;name&#x60; but doesn&#39;t include event specifiers, such as &#39;Regional&#39; or &#39;District&#39;. May be null.
    /// </summary>
    /// <value>Same as &#x60;name&#x60; but doesn&#39;t include event specifiers, such as &#39;Regional&#39; or &#39;District&#39;. May be null.</value>
    [JsonPropertyName("short_name")]
    public string ShortName { get; set; }

    /// <summary>
    /// Event Type, eg Regional, District, or Offseason.
    /// </summary>
    /// <value>Event Type, eg Regional, District, or Offseason.</value>
    [JsonPropertyName("event_type_string")]
    public string EventTypeString { get; set; }

    /// <summary>
    /// Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &#39;preseason&#39; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)
    /// </summary>
    /// <value>Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 &#39;preseason&#39; event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.)</value>
    [JsonPropertyName("week")]
    public int? Week { get; set; }

    /// <summary>
    /// Address of the event&#39;s venue, if available.
    /// </summary>
    /// <value>Address of the event&#39;s venue, if available.</value>
    [JsonPropertyName("address")]
    public string Address { get; set; }

    /// <summary>
    /// Postal code from the event address.
    /// </summary>
    /// <value>Postal code from the event address.</value>
    [JsonPropertyName("postal_code")]
    public string PostalCode { get; set; }

    /// <summary>
    /// Google Maps Place ID for the event address.
    /// </summary>
    /// <value>Google Maps Place ID for the event address.</value>
    [JsonPropertyName("gmaps_place_id")]
    public string GmapsPlaceId { get; set; }

    /// <summary>
    /// Link to address location on Google Maps.
    /// </summary>
    /// <value>Link to address location on Google Maps.</value>
    [JsonPropertyName("gmaps_url")]
    public string GmapsUrl { get; set; }

    /// <summary>
    /// Latitude for the event address.
    /// </summary>
    /// <value>Latitude for the event address.</value>
    [JsonPropertyName("lat")]
    public double? Lat { get; set; }

    /// <summary>
    /// Longitude for the event address.
    /// </summary>
    /// <value>Longitude for the event address.</value>
    [JsonPropertyName("lng")]
    public double? Lng { get; set; }

    /// <summary>
    /// Name of the location at the address for the event, eg. Blue Alliance High School.
    /// </summary>
    /// <value>Name of the location at the address for the event, eg. Blue Alliance High School.</value>
    [JsonPropertyName("location_name")]
    public string LocationName { get; set; }

    /// <summary>
    /// Timezone name.
    /// </summary>
    /// <value>Timezone name.</value>
    [JsonPropertyName("timezone")]
    public string Timezone { get; set; }

    /// <summary>
    /// The event&#39;s website, if any.
    /// </summary>
    /// <value>The event&#39;s website, if any.</value>
    [JsonPropertyName("website")]
    public string Website { get; set; }

    /// <summary>
    /// The FIRST internal Event ID, used to link to the event on the FRC webpage.
    /// </summary>
    /// <value>The FIRST internal Event ID, used to link to the event on the FRC webpage.</value>
    [JsonPropertyName("first_event_id")]
    public string FirstEventId { get; set; }

    /// <summary>
    /// Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)
    /// </summary>
    /// <value>Public facing event code used by FIRST (on frc-events.firstinspires.org, for example)</value>
    [JsonPropertyName("first_event_code")]
    public string FirstEventCode { get; set; }

    /// <summary>
    /// Gets or Sets Webcasts
    /// </summary>
    [JsonPropertyName("webcasts")]
    public List<Webcast> Webcasts { get; set; }

    /// <summary>
    /// An array of event keys for the divisions at this event.
    /// </summary>
    /// <value>An array of event keys for the divisions at this event.</value>
    [JsonPropertyName("division_keys")]
    public List<string> DivisionKeys { get; set; }

    /// <summary>
    /// The TBA Event key that represents the event&#39;s parent. Used to link back to the event from a division event. It is also the inverse relation of &#x60;divison_keys&#x60;.
    /// </summary>
    /// <value>The TBA Event key that represents the event&#39;s parent. Used to link back to the event from a division event. It is also the inverse relation of &#x60;divison_keys&#x60;.</value>
    [JsonPropertyName("parent_event_key")]
    public string ParentEventKey { get; set; }

    /// <summary>
    /// Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.
    /// </summary>
    /// <value>Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null.</value>
    [JsonPropertyName("playoff_type")]
    public int? PlayoffType { get; set; }

    /// <summary>
    /// String representation of the &#x60;playoff_type&#x60;, or null.
    /// </summary>
    /// <value>String representation of the &#x60;playoff_type&#x60;, or null.</value>
    [JsonPropertyName("playoff_type_string")]
    public string PlayoffTypeString { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class Event {");
        sb.Append("  Key: ").AppendLine(Key.ToString());
        sb.Append("  Name: ").AppendLine(Name.ToString());
        sb.Append("  EventCode: ").AppendLine(EventCode.ToString());
        sb.Append("  EventType: ").AppendLine(EventType.ToString());
        sb.Append("  District: ").AppendLine(District.ToString());
        sb.Append("  City: ").AppendLine(City.ToString());
        sb.Append("  StateProv: ").AppendLine(StateProv.ToString());
        sb.Append("  Country: ").AppendLine(Country.ToString());
        sb.Append("  StartDate: ").AppendLine(StartDate.ToString());
        sb.Append("  EndDate: ").AppendLine(EndDate.ToString());
        sb.Append("  Year: ").AppendLine(Year.ToString());
        sb.Append("  ShortName: ").AppendLine(ShortName.ToString());
        sb.Append("  EventTypeString: ").AppendLine(EventTypeString.ToString());
        sb.Append("  Week: ").AppendLine(Week.ToString());
        sb.Append("  Address: ").AppendLine(Address.ToString());
        sb.Append("  PostalCode: ").AppendLine(PostalCode.ToString());
        sb.Append("  GmapsPlaceId: ").AppendLine(GmapsPlaceId.ToString());
        sb.Append("  GmapsUrl: ").AppendLine(GmapsUrl.ToString());
        sb.Append("  Lat: ").AppendLine(Lat.ToString());
        sb.Append("  Lng: ").AppendLine(Lng.ToString());
        sb.Append("  LocationName: ").AppendLine(LocationName.ToString());
        sb.Append("  Timezone: ").AppendLine(Timezone.ToString());
        sb.Append("  Website: ").AppendLine(Website.ToString());
        sb.Append("  FirstEventId: ").AppendLine(FirstEventId.ToString());
        sb.Append("  FirstEventCode: ").AppendLine(FirstEventCode.ToString());
        sb.Append("  Webcasts: ").AppendLine(Webcasts.ToString());
        sb.Append("  DivisionKeys: ").AppendLine(DivisionKeys.ToString());
        sb.Append("  ParentEventKey: ").AppendLine(ParentEventKey.ToString());
        sb.Append("  PlayoffType: ").AppendLine(PlayoffType.ToString());
        sb.Append("  PlayoffTypeString: ").AppendLine(PlayoffTypeString.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
