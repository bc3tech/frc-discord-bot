/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// MatchScoreBreakdown2016Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2016Alliance" /> class.
/// </remarks>
/// <param name="autoPoints">autoPoints.</param>
/// <param name="teleopPoints">teleopPoints.</param>
/// <param name="breachPoints">breachPoints.</param>
/// <param name="foulPoints">foulPoints.</param>
/// <param name="capturePoints">capturePoints.</param>
/// <param name="adjustPoints">adjustPoints.</param>
/// <param name="totalPoints">totalPoints.</param>
/// <param name="robot1Auto">robot1Auto.</param>
/// <param name="robot2Auto">robot2Auto.</param>
/// <param name="robot3Auto">robot3Auto.</param>
/// <param name="autoReachPoints">autoReachPoints.</param>
/// <param name="autoCrossingPoints">autoCrossingPoints.</param>
/// <param name="autoBouldersLow">autoBouldersLow.</param>
/// <param name="autoBouldersHigh">autoBouldersHigh.</param>
/// <param name="autoBoulderPoints">autoBoulderPoints.</param>
/// <param name="teleopCrossingPoints">teleopCrossingPoints.</param>
/// <param name="teleopBouldersLow">teleopBouldersLow.</param>
/// <param name="teleopBouldersHigh">teleopBouldersHigh.</param>
/// <param name="teleopBoulderPoints">teleopBoulderPoints.</param>
/// <param name="teleopDefensesBreached">teleopDefensesBreached.</param>
/// <param name="teleopChallengePoints">teleopChallengePoints.</param>
/// <param name="teleopScalePoints">teleopScalePoints.</param>
/// <param name="teleopTowerCaptured">teleopTowerCaptured.</param>
/// <param name="towerFaceA">towerFaceA.</param>
/// <param name="towerFaceB">towerFaceB.</param>
/// <param name="towerFaceC">towerFaceC.</param>
/// <param name="towerEndStrength">towerEndStrength.</param>
/// <param name="techFoulCount">techFoulCount.</param>
/// <param name="foulCount">foulCount.</param>
/// <param name="position2">position2.</param>
/// <param name="position3">position3.</param>
/// <param name="position4">position4.</param>
/// <param name="position5">position5.</param>
/// <param name="position1crossings">position1crossings.</param>
/// <param name="position2crossings">position2crossings.</param>
/// <param name="position3crossings">position3crossings.</param>
/// <param name="position4crossings">position4crossings.</param>
/// <param name="position5crossings">position5crossings.</param>
public partial class MatchScoreBreakdown2016Alliance(int autoPoints = default, int teleopPoints = default, int breachPoints = default, int foulPoints = default, int capturePoints = default, int adjustPoints = default, int totalPoints = default, MatchScoreBreakdown2016Alliance.Robot1AutoEnum? robot1Auto = default, MatchScoreBreakdown2016Alliance.Robot2AutoEnum? robot2Auto = default, MatchScoreBreakdown2016Alliance.Robot3AutoEnum? robot3Auto = default, int autoReachPoints = default, int autoCrossingPoints = default, int autoBouldersLow = default, int autoBouldersHigh = default, int autoBoulderPoints = default, int teleopCrossingPoints = default, int teleopBouldersLow = default, int teleopBouldersHigh = default, int teleopBoulderPoints = default, bool teleopDefensesBreached = default, int teleopChallengePoints = default, int teleopScalePoints = default, int teleopTowerCaptured = default, string? towerFaceA = default, string? towerFaceB = default, string? towerFaceC = default, int towerEndStrength = default, int techFoulCount = default, int foulCount = default, string? position2 = default, string? position3 = default, string? position4 = default, string? position5 = default, int position1crossings = default, int position2crossings = default, int position3crossings = default, int position4crossings = default, int position5crossings = default) : IValidatableObject
{
    /// <summary>
    /// Defines Robot1Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot1AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionClassName = "Robot1AutoEnumExtensions2016")]
    public enum Robot1AutoEnum
    {
        /// <summary>
        /// Enum Crossed for value: Crossed
        /// </summary>
        [EnumMember(Value = "Crossed")]
        Crossed = 1,

        /// <summary>
        /// Enum Reached for value: Reached
        /// </summary>
        [EnumMember(Value = "Reached")]
        Reached = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3
    }

    /// <summary>
    /// Gets or Sets Robot1Auto
    /// </summary>

    [JsonPropertyName("robot1Auto")]
    public Robot1AutoEnum? Robot1Auto { get; set; } = robot1Auto;
    /// <summary>
    /// Defines Robot2Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot2AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionClassName = "Robot2AutoEnumExtensions2016")]
    public enum Robot2AutoEnum
    {
        /// <summary>
        /// Enum Crossed for value: Crossed
        /// </summary>
        [EnumMember(Value = "Crossed")]
        Crossed = 1,

        /// <summary>
        /// Enum Reached for value: Reached
        /// </summary>
        [EnumMember(Value = "Reached")]
        Reached = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3
    }

    /// <summary>
    /// Gets or Sets Robot2Auto
    /// </summary>

    [JsonPropertyName("robot2Auto")]
    public Robot2AutoEnum? Robot2Auto { get; set; } = robot2Auto;
    /// <summary>
    /// Defines Robot3Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot3AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionClassName = "Robot3AutoEnumExtensions2016")]
    public enum Robot3AutoEnum
    {
        /// <summary>
        /// Enum Crossed for value: Crossed
        /// </summary>
        [EnumMember(Value = "Crossed")]
        Crossed = 1,

        /// <summary>
        /// Enum Reached for value: Reached
        /// </summary>
        [EnumMember(Value = "Reached")]
        Reached = 2,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 3
    }

    /// <summary>
    /// Gets or Sets Robot3Auto
    /// </summary>

    [JsonPropertyName("robot3Auto")]
    public Robot3AutoEnum? Robot3Auto { get; set; } = robot3Auto;

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>

    [JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; } = autoPoints;

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>

    [JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; } = teleopPoints;

    /// <summary>
    /// Gets or Sets BreachPoints
    /// </summary>

    [JsonPropertyName("breachPoints")]
    public int BreachPoints { get; set; } = breachPoints;

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>

    [JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; } = foulPoints;

    /// <summary>
    /// Gets or Sets CapturePoints
    /// </summary>

    [JsonPropertyName("capturePoints")]
    public int CapturePoints { get; set; } = capturePoints;

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>

    [JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; } = adjustPoints;

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>

    [JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; } = totalPoints;

    /// <summary>
    /// Gets or Sets AutoReachPoints
    /// </summary>

    [JsonPropertyName("autoReachPoints")]
    public int AutoReachPoints { get; set; } = autoReachPoints;

    /// <summary>
    /// Gets or Sets AutoCrossingPoints
    /// </summary>

    [JsonPropertyName("autoCrossingPoints")]
    public int AutoCrossingPoints { get; set; } = autoCrossingPoints;

    /// <summary>
    /// Gets or Sets AutoBouldersLow
    /// </summary>

    [JsonPropertyName("autoBouldersLow")]
    public int AutoBouldersLow { get; set; } = autoBouldersLow;

    /// <summary>
    /// Gets or Sets AutoBouldersHigh
    /// </summary>

    [JsonPropertyName("autoBouldersHigh")]
    public int AutoBouldersHigh { get; set; } = autoBouldersHigh;

    /// <summary>
    /// Gets or Sets AutoBoulderPoints
    /// </summary>

    [JsonPropertyName("autoBoulderPoints")]
    public int AutoBoulderPoints { get; set; } = autoBoulderPoints;

    /// <summary>
    /// Gets or Sets TeleopCrossingPoints
    /// </summary>

    [JsonPropertyName("teleopCrossingPoints")]
    public int TeleopCrossingPoints { get; set; } = teleopCrossingPoints;

    /// <summary>
    /// Gets or Sets TeleopBouldersLow
    /// </summary>

    [JsonPropertyName("teleopBouldersLow")]
    public int TeleopBouldersLow { get; set; } = teleopBouldersLow;

    /// <summary>
    /// Gets or Sets TeleopBouldersHigh
    /// </summary>

    [JsonPropertyName("teleopBouldersHigh")]
    public int TeleopBouldersHigh { get; set; } = teleopBouldersHigh;

    /// <summary>
    /// Gets or Sets TeleopBoulderPoints
    /// </summary>

    [JsonPropertyName("teleopBoulderPoints")]
    public int TeleopBoulderPoints { get; set; } = teleopBoulderPoints;

    /// <summary>
    /// Gets or Sets TeleopDefensesBreached
    /// </summary>

    [JsonPropertyName("teleopDefensesBreached")]
    public bool TeleopDefensesBreached { get; set; } = teleopDefensesBreached;

    /// <summary>
    /// Gets or Sets TeleopChallengePoints
    /// </summary>

    [JsonPropertyName("teleopChallengePoints")]
    public int TeleopChallengePoints { get; set; } = teleopChallengePoints;

    /// <summary>
    /// Gets or Sets TeleopScalePoints
    /// </summary>

    [JsonPropertyName("teleopScalePoints")]
    public int TeleopScalePoints { get; set; } = teleopScalePoints;

    /// <summary>
    /// Gets or Sets TeleopTowerCaptured
    /// </summary>

    [JsonPropertyName("teleopTowerCaptured")]
    public int TeleopTowerCaptured { get; set; } = teleopTowerCaptured;

    /// <summary>
    /// Gets or Sets TowerFaceA
    /// </summary>

    [JsonPropertyName("towerFaceA")]
    public string TowerFaceA { get; set; } = towerFaceA;

    /// <summary>
    /// Gets or Sets TowerFaceB
    /// </summary>

    [JsonPropertyName("towerFaceB")]
    public string TowerFaceB { get; set; } = towerFaceB;

    /// <summary>
    /// Gets or Sets TowerFaceC
    /// </summary>

    [JsonPropertyName("towerFaceC")]
    public string TowerFaceC { get; set; } = towerFaceC;

    /// <summary>
    /// Gets or Sets TowerEndStrength
    /// </summary>

    [JsonPropertyName("towerEndStrength")]
    public int TowerEndStrength { get; set; } = towerEndStrength;

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>

    [JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; } = techFoulCount;

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>

    [JsonPropertyName("foulCount")]
    public int FoulCount { get; set; } = foulCount;

    /// <summary>
    /// Gets or Sets Position2
    /// </summary>

    [JsonPropertyName("position2")]
    public string Position2 { get; set; } = position2;

    /// <summary>
    /// Gets or Sets Position3
    /// </summary>

    [JsonPropertyName("position3")]
    public string Position3 { get; set; } = position3;

    /// <summary>
    /// Gets or Sets Position4
    /// </summary>

    [JsonPropertyName("position4")]
    public string Position4 { get; set; } = position4;

    /// <summary>
    /// Gets or Sets Position5
    /// </summary>

    [JsonPropertyName("position5")]
    public string Position5 { get; set; } = position5;

    /// <summary>
    /// Gets or Sets Position1crossings
    /// </summary>

    [JsonPropertyName("position1crossings")]
    public int Position1crossings { get; set; } = position1crossings;

    /// <summary>
    /// Gets or Sets Position2crossings
    /// </summary>

    [JsonPropertyName("position2crossings")]
    public int Position2crossings { get; set; } = position2crossings;

    /// <summary>
    /// Gets or Sets Position3crossings
    /// </summary>

    [JsonPropertyName("position3crossings")]
    public int Position3crossings { get; set; } = position3crossings;

    /// <summary>
    /// Gets or Sets Position4crossings
    /// </summary>

    [JsonPropertyName("position4crossings")]
    public int Position4crossings { get; set; } = position4crossings;

    /// <summary>
    /// Gets or Sets Position5crossings
    /// </summary>

    [JsonPropertyName("position5crossings")]
    public int Position5crossings { get; set; } = position5crossings;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class MatchScoreBreakdown2016Alliance {");
        sb.Append("  AutoPoints: ").AppendLine(AutoPoints.ToString());
        sb.Append("  TeleopPoints: ").AppendLine(TeleopPoints.ToString());
        sb.Append("  BreachPoints: ").AppendLine(BreachPoints.ToString());
        sb.Append("  FoulPoints: ").AppendLine(FoulPoints.ToString());
        sb.Append("  CapturePoints: ").AppendLine(CapturePoints.ToString());
        sb.Append("  AdjustPoints: ").AppendLine(AdjustPoints.ToString());
        sb.Append("  TotalPoints: ").AppendLine(TotalPoints.ToString());
        sb.Append("  Robot1Auto: ").AppendLine(Robot1Auto.ToString());
        sb.Append("  Robot2Auto: ").AppendLine(Robot2Auto.ToString());
        sb.Append("  Robot3Auto: ").AppendLine(Robot3Auto.ToString());
        sb.Append("  AutoReachPoints: ").AppendLine(AutoReachPoints.ToString());
        sb.Append("  AutoCrossingPoints: ").AppendLine(AutoCrossingPoints.ToString());
        sb.Append("  AutoBouldersLow: ").AppendLine(AutoBouldersLow.ToString());
        sb.Append("  AutoBouldersHigh: ").AppendLine(AutoBouldersHigh.ToString());
        sb.Append("  AutoBoulderPoints: ").AppendLine(AutoBoulderPoints.ToString());
        sb.Append("  TeleopCrossingPoints: ").AppendLine(TeleopCrossingPoints.ToString());
        sb.Append("  TeleopBouldersLow: ").AppendLine(TeleopBouldersLow.ToString());
        sb.Append("  TeleopBouldersHigh: ").AppendLine(TeleopBouldersHigh.ToString());
        sb.Append("  TeleopBoulderPoints: ").AppendLine(TeleopBoulderPoints.ToString());
        sb.Append("  TeleopDefensesBreached: ").AppendLine(TeleopDefensesBreached.ToString());
        sb.Append("  TeleopChallengePoints: ").AppendLine(TeleopChallengePoints.ToString());
        sb.Append("  TeleopScalePoints: ").AppendLine(TeleopScalePoints.ToString());
        sb.Append("  TeleopTowerCaptured: ").AppendLine(TeleopTowerCaptured.ToString());
        sb.Append("  TowerFaceA: ").AppendLine(TowerFaceA.ToString());
        sb.Append("  TowerFaceB: ").AppendLine(TowerFaceB.ToString());
        sb.Append("  TowerFaceC: ").AppendLine(TowerFaceC.ToString());
        sb.Append("  TowerEndStrength: ").AppendLine(TowerEndStrength.ToString());
        sb.Append("  TechFoulCount: ").AppendLine(TechFoulCount.ToString());
        sb.Append("  FoulCount: ").AppendLine(FoulCount.ToString());
        sb.Append("  Position2: ").AppendLine(Position2.ToString());
        sb.Append("  Position3: ").AppendLine(Position3.ToString());
        sb.Append("  Position4: ").AppendLine(Position4.ToString());
        sb.Append("  Position5: ").AppendLine(Position5.ToString());
        sb.Append("  Position1crossings: ").AppendLine(Position1crossings.ToString());
        sb.Append("  Position2crossings: ").AppendLine(Position2crossings.ToString());
        sb.Append("  Position3crossings: ").AppendLine(Position3crossings.ToString());
        sb.Append("  Position4crossings: ").AppendLine(Position4crossings.ToString());
        sb.Append("  Position5crossings: ").AppendLine(Position5crossings.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
