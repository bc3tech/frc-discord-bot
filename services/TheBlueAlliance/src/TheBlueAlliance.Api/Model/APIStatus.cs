/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// APIStatus
/// </summary>
public partial class APIStatus : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="APIStatus" /> class.
    /// </summary>
    [JsonConstructor]
    protected APIStatus() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="APIStatus" /> class.
    /// </summary>
    /// <param name="currentSeason">Year of the current FRC season. (required).</param>
    /// <param name="maxSeason">Maximum FRC season year for valid queries. (required).</param>
    /// <param name="isDatafeedDown">True if the entire FMS API provided by FIRST is down. (required).</param>
    /// <param name="downEvents">An array of strings containing event keys of any active events that are no longer updating. (required).</param>
    /// <param name="ios">ios (required).</param>
    /// <param name="android">android (required).</param>
    public APIStatus(int currentSeason = default, int maxSeason = default, bool isDatafeedDown = default, List<string>? downEvents = default, APIStatusAppVersion? ios = default, APIStatusAppVersion? android = default)
    {
        this.CurrentSeason = currentSeason;
        this.MaxSeason = maxSeason;
        this.IsDatafeedDown = isDatafeedDown;
        // to ensure "downEvents" is required (not null)
        ArgumentNullException.ThrowIfNull(downEvents);
        this.DownEvents = downEvents;
        // to ensure "ios" is required (not null)
        ArgumentNullException.ThrowIfNull(ios);
        this.Ios = ios;
        // to ensure "android" is required (not null)
        ArgumentNullException.ThrowIfNull(android);
        this.Android = android;
    }

    /// <summary>
    /// Year of the current FRC season.
    /// </summary>
    /// <value>Year of the current FRC season.</value>
    [JsonPropertyName("current_season")]
    public int CurrentSeason { get; set; }

    /// <summary>
    /// Maximum FRC season year for valid queries.
    /// </summary>
    /// <value>Maximum FRC season year for valid queries.</value>
    [JsonPropertyName("max_season")]
    public int MaxSeason { get; set; }

    /// <summary>
    /// True if the entire FMS API provided by FIRST is down.
    /// </summary>
    /// <value>True if the entire FMS API provided by FIRST is down.</value>
    [JsonPropertyName("is_datafeed_down")]
    public bool IsDatafeedDown { get; set; }

    /// <summary>
    /// An array of strings containing event keys of any active events that are no longer updating.
    /// </summary>
    /// <value>An array of strings containing event keys of any active events that are no longer updating.</value>
    [JsonPropertyName("down_events")]
    public List<string> DownEvents { get; set; }

    /// <summary>
    /// Gets or Sets Ios
    /// </summary>
    [JsonPropertyName("ios")]
    public APIStatusAppVersion Ios { get; set; }

    /// <summary>
    /// Gets or Sets Android
    /// </summary>
    [JsonPropertyName("android")]
    public APIStatusAppVersion Android { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class APIStatus {");
        sb.Append("  CurrentSeason: ").AppendLine(CurrentSeason.ToString());
        sb.Append("  MaxSeason: ").AppendLine(MaxSeason.ToString());
        sb.Append("  IsDatafeedDown: ").AppendLine(IsDatafeedDown.ToString());
        sb.Append("  DownEvents: ").AppendLine(DownEvents.ToString());
        sb.Append("  Ios: ").AppendLine(Ios.ToString());
        sb.Append("  Android: ").AppendLine(Android.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
