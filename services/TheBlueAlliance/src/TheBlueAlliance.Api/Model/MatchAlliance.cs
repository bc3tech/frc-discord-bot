/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// MatchAlliance
/// </summary>
public partial class MatchAlliance : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="MatchAlliance" /> class.
    /// </summary>
    [JsonConstructor]
    protected MatchAlliance() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="MatchAlliance" /> class.
    /// </summary>
    /// <param name="score">Score for this alliance. Will be null or -1 for an unplayed match. (required).</param>
    /// <param name="teamKeys">teamKeys (required).</param>
    /// <param name="surrogateTeamKeys">TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate. (required).</param>
    /// <param name="dqTeamKeys">TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams. (required).</param>
    public MatchAlliance(int score = default, List<string>? teamKeys = default, List<string>? surrogateTeamKeys = default, List<string>? dqTeamKeys = default)
    {
        this.Score = score;
        // to ensure "teamKeys" is required (not null)
        ArgumentNullException.ThrowIfNull(teamKeys);
        this.TeamKeys = teamKeys;
        // to ensure "surrogateTeamKeys" is required (not null)
        ArgumentNullException.ThrowIfNull(surrogateTeamKeys);
        this.SurrogateTeamKeys = surrogateTeamKeys;
        // to ensure "dqTeamKeys" is required (not null)
        ArgumentNullException.ThrowIfNull(dqTeamKeys);
        this.DqTeamKeys = dqTeamKeys;
    }

    /// <summary>
    /// Score for this alliance. Will be null or -1 for an unplayed match.
    /// </summary>
    /// <value>Score for this alliance. Will be null or -1 for an unplayed match.</value>
    [JsonPropertyName("score")]
    public int Score { get; set; }

    /// <summary>
    /// Gets or Sets TeamKeys
    /// </summary>
    [JsonPropertyName("team_keys")]
    public List<string> TeamKeys { get; set; }

    /// <summary>
    /// TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate.
    /// </summary>
    /// <value>TBA team keys (eg &#x60;frc254&#x60;) of any teams playing as a surrogate.</value>
    [JsonPropertyName("surrogate_team_keys")]
    public List<string> SurrogateTeamKeys { get; set; } = [];

    /// <summary>
    /// TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams.
    /// </summary>
    /// <value>TBA team keys (eg &#x60;frc254&#x60;) of any disqualified teams.</value>
    [JsonPropertyName("dq_team_keys")]
    public List<string> DqTeamKeys { get; set; } = [];

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class MatchAlliance {");
        sb.Append("  Score: ").AppendLine(Score.ToString());
        sb.Append("  TeamKeys: ").AppendLine(TeamKeys.ToString());
        sb.Append("  SurrogateTeamKeys: ").AppendLine(SurrogateTeamKeys.ToString());
        sb.Append("  DqTeamKeys: ").AppendLine(DqTeamKeys.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
