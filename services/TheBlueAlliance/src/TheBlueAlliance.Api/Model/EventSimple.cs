/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// EventSimple
/// </summary>
public partial class EventSimple : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventSimple" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventSimple() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventSimple" /> class.
    /// </summary>
    /// <param name="key">TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. (required).</param>
    /// <param name="name">Official name of event on record either provided by FIRST or organizers of offseason event. (required).</param>
    /// <param name="eventCode">Event short code, as provided by FIRST. (required).</param>
    /// <param name="eventType">Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2 (required).</param>
    /// <param name="district">district (required).</param>
    /// <param name="city">City, town, village, etc. the event is located in. (required).</param>
    /// <param name="stateProv">State or Province the event is located in. (required).</param>
    /// <param name="country">Country the event is located in. (required).</param>
    /// <param name="startDate">Event start date in &#x60;yyyy-mm-dd&#x60; format. (required).</param>
    /// <param name="endDate">Event end date in &#x60;yyyy-mm-dd&#x60; format. (required).</param>
    /// <param name="year">Year the event data is for. (required).</param>
    public EventSimple(string? key = default, string? name = default, string? eventCode = default, int eventType = default, DistrictList? district = default, string? city = default, string? stateProv = default, string? country = default, DateOnly startDate = default, DateOnly endDate = default, int year = default)
    {
        // to ensure "key" is required (not null)
        ArgumentNullException.ThrowIfNull(key);
        this.Key = key;
        // to ensure "name" is required (not null)
        ArgumentNullException.ThrowIfNull(name);
        this.Name = name;
        // to ensure "eventCode" is required (not null)
        ArgumentNullException.ThrowIfNull(eventCode);
        this.EventCode = eventCode;
        this.EventType = eventType;
        // to ensure "district" is required (not null)
        ArgumentNullException.ThrowIfNull(district);
        this.District = district;
        // to ensure "city" is required (not null)
        ArgumentNullException.ThrowIfNull(city);
        this.City = city;
        // to ensure "stateProv" is required (not null)
        ArgumentNullException.ThrowIfNull(stateProv);
        this.StateProv = stateProv;
        // to ensure "country" is required (not null)
        ArgumentNullException.ThrowIfNull(country);
        this.Country = country;
        this.StartDate = startDate;
        this.EndDate = endDate;
        this.Year = year;
    }

    /// <summary>
    /// TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.
    /// </summary>
    /// <value>TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event.</value>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// Official name of event on record either provided by FIRST or organizers of offseason event.
    /// </summary>
    /// <value>Official name of event on record either provided by FIRST or organizers of offseason event.</value>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Event short code, as provided by FIRST.
    /// </summary>
    /// <value>Event short code, as provided by FIRST.</value>
    [JsonPropertyName("event_code")]
    public string EventCode { get; set; }

    /// <summary>
    /// Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2
    /// </summary>
    /// <value>Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2</value>
    [JsonPropertyName("event_type")]
    public int EventType { get; set; }

    /// <summary>
    /// Gets or Sets District
    /// </summary>
    [JsonPropertyName("district")]
    public DistrictList District { get; set; }

    /// <summary>
    /// City, town, village, etc. the event is located in.
    /// </summary>
    /// <value>City, town, village, etc. the event is located in.</value>
    [JsonPropertyName("city")]
    public string City { get; set; }

    /// <summary>
    /// State or Province the event is located in.
    /// </summary>
    /// <value>State or Province the event is located in.</value>
    [JsonPropertyName("state_prov")]
    public string StateProv { get; set; }

    /// <summary>
    /// Country the event is located in.
    /// </summary>
    /// <value>Country the event is located in.</value>
    [JsonPropertyName("country")]
    public string Country { get; set; }

    /// <summary>
    /// Event start date in &#x60;yyyy-mm-dd&#x60; format.
    /// </summary>
    /// <value>Event start date in &#x60;yyyy-mm-dd&#x60; format.</value>
    [JsonPropertyName("start_date")]
    public DateOnly StartDate { get; set; }

    /// <summary>
    /// Event end date in &#x60;yyyy-mm-dd&#x60; format.
    /// </summary>
    /// <value>Event end date in &#x60;yyyy-mm-dd&#x60; format.</value>
    [JsonPropertyName("end_date")]
    public DateOnly EndDate { get; set; }

    /// <summary>
    /// Year the event data is for.
    /// </summary>
    /// <value>Year the event data is for.</value>
    [JsonPropertyName("year")]
    public int Year { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class EventSimple {");
        sb.Append("  Key: ").AppendLine(Key.ToString());
        sb.Append("  Name: ").AppendLine(Name.ToString());
        sb.Append("  EventCode: ").AppendLine(EventCode.ToString());
        sb.Append("  EventType: ").AppendLine(EventType.ToString());
        sb.Append("  District: ").AppendLine(District.ToString());
        sb.Append("  City: ").AppendLine(City.ToString());
        sb.Append("  StateProv: ").AppendLine(StateProv.ToString());
        sb.Append("  Country: ").AppendLine(Country.ToString());
        sb.Append("  StartDate: ").AppendLine(StartDate.ToString());
        sb.Append("  EndDate: ").AppendLine(EndDate.ToString());
        sb.Append("  Year: ").AppendLine(Year.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
