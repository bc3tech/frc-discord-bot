/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Insights for FIRST Stronghold qualification and elimination matches.
/// </summary>
public partial class EventInsights2016 : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventInsights2016" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventInsights2016() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventInsights2016" /> class.
    /// </summary>
    /// <param name="lowBar">For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="aChevalDeFrise">For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="aPortcullis">For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="bRamparts">For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="bMoat">For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="cSallyPort">For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="cDrawbridge">For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="dRoughTerrain">For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="dRockWall">For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage. (required).</param>
    /// <param name="averageHighGoals">Average number of high goals scored. (required).</param>
    /// <param name="averageLowGoals">Average number of low goals scored. (required).</param>
    /// <param name="breaches">An array with three values, number of times breached, number of opportunities to breach, and percentage. (required).</param>
    /// <param name="scales">An array with three values, number of times scaled, number of opportunities to scale, and percentage. (required).</param>
    /// <param name="challenges">An array with three values, number of times challenged, number of opportunities to challenge, and percentage. (required).</param>
    /// <param name="captures">An array with three values, number of times captured, number of opportunities to capture, and percentage. (required).</param>
    /// <param name="averageWinScore">Average winning score. (required).</param>
    /// <param name="averageWinMargin">Average margin of victory. (required).</param>
    /// <param name="averageScore">Average total score. (required).</param>
    /// <param name="averageAutoScore">Average autonomous score. (required).</param>
    /// <param name="averageCrossingScore">Average crossing score. (required).</param>
    /// <param name="averageBoulderScore">Average boulder score. (required).</param>
    /// <param name="averageTowerScore">Average tower score. (required).</param>
    /// <param name="averageFoulScore">Average foul score. (required).</param>
    /// <param name="highScore">An array with three values, high score, match key from the match with the high score, and the name of the match. (required).</param>
    public EventInsights2016(List<float>? lowBar = default, List<float>? aChevalDeFrise = default, List<float>? aPortcullis = default, List<float>? bRamparts = default, List<float>? bMoat = default, List<float>? cSallyPort = default, List<float>? cDrawbridge = default, List<float>? dRoughTerrain = default, List<float>? dRockWall = default, float averageHighGoals = default, float averageLowGoals = default, List<float>? breaches = default, List<float>? scales = default, List<float>? challenges = default, List<float>? captures = default, float averageWinScore = default, float averageWinMargin = default, float averageScore = default, float averageAutoScore = default, float averageCrossingScore = default, float averageBoulderScore = default, float averageTowerScore = default, float averageFoulScore = default, List<string>? highScore = default)
    {
        // to ensure "lowBar" is required (not null)
        ArgumentNullException.ThrowIfNull(lowBar);
        this.LowBar = lowBar;
        // to ensure "aChevalDeFrise" is required (not null)
        ArgumentNullException.ThrowIfNull(aChevalDeFrise);
        this.AChevalDeFrise = aChevalDeFrise;
        // to ensure "aPortcullis" is required (not null)
        ArgumentNullException.ThrowIfNull(aPortcullis);
        this.APortcullis = aPortcullis;
        // to ensure "bRamparts" is required (not null)
        ArgumentNullException.ThrowIfNull(bRamparts);
        this.BRamparts = bRamparts;
        // to ensure "bMoat" is required (not null)
        ArgumentNullException.ThrowIfNull(bMoat);
        this.BMoat = bMoat;
        // to ensure "cSallyPort" is required (not null)
        ArgumentNullException.ThrowIfNull(cSallyPort);
        this.CSallyPort = cSallyPort;
        // to ensure "cDrawbridge" is required (not null)
        ArgumentNullException.ThrowIfNull(cDrawbridge);
        this.CDrawbridge = cDrawbridge;
        // to ensure "dRoughTerrain" is required (not null)
        ArgumentNullException.ThrowIfNull(dRoughTerrain);
        this.DRoughTerrain = dRoughTerrain;
        // to ensure "dRockWall" is required (not null)
        ArgumentNullException.ThrowIfNull(dRockWall);
        this.DRockWall = dRockWall;
        this.AverageHighGoals = averageHighGoals;
        this.AverageLowGoals = averageLowGoals;
        // to ensure "breaches" is required (not null)
        ArgumentNullException.ThrowIfNull(breaches);
        this.Breaches = breaches;
        // to ensure "scales" is required (not null)
        ArgumentNullException.ThrowIfNull(scales);
        this.Scales = scales;
        // to ensure "challenges" is required (not null)
        ArgumentNullException.ThrowIfNull(challenges);
        this.Challenges = challenges;
        // to ensure "captures" is required (not null)
        ArgumentNullException.ThrowIfNull(captures);
        this.Captures = captures;
        this.AverageWinScore = averageWinScore;
        this.AverageWinMargin = averageWinMargin;
        this.AverageScore = averageScore;
        this.AverageAutoScore = averageAutoScore;
        this.AverageCrossingScore = averageCrossingScore;
        this.AverageBoulderScore = averageBoulderScore;
        this.AverageTowerScore = averageTowerScore;
        this.AverageFoulScore = averageFoulScore;
        // to ensure "highScore" is required (not null)
        ArgumentNullException.ThrowIfNull(highScore);
        this.HighScore = highScore;
    }

    /// <summary>
    /// For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("LowBar")]
    public List<float> LowBar { get; set; }

    /// <summary>
    /// For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("A_ChevalDeFrise")]
    public List<float> AChevalDeFrise { get; set; }

    /// <summary>
    /// For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("A_Portcullis")]
    public List<float> APortcullis { get; set; }

    /// <summary>
    /// For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("B_Ramparts")]
    public List<float> BRamparts { get; set; }

    /// <summary>
    /// For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("B_Moat")]
    public List<float> BMoat { get; set; }

    /// <summary>
    /// For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("C_SallyPort")]
    public List<float> CSallyPort { get; set; }

    /// <summary>
    /// For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("C_Drawbridge")]
    public List<float> CDrawbridge { get; set; }

    /// <summary>
    /// For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("D_RoughTerrain")]
    public List<float> DRoughTerrain { get; set; }

    /// <summary>
    /// For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
    /// </summary>
    /// <value>For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.</value>
    [JsonPropertyName("D_RockWall")]
    public List<float> DRockWall { get; set; }

    /// <summary>
    /// Average number of high goals scored.
    /// </summary>
    /// <value>Average number of high goals scored.</value>
    [JsonPropertyName("average_high_goals")]
    public float AverageHighGoals { get; set; }

    /// <summary>
    /// Average number of low goals scored.
    /// </summary>
    /// <value>Average number of low goals scored.</value>
    [JsonPropertyName("average_low_goals")]
    public float AverageLowGoals { get; set; }

    /// <summary>
    /// An array with three values, number of times breached, number of opportunities to breach, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times breached, number of opportunities to breach, and percentage.</value>
    [JsonPropertyName("breaches")]
    public List<float> Breaches { get; set; }

    /// <summary>
    /// An array with three values, number of times scaled, number of opportunities to scale, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times scaled, number of opportunities to scale, and percentage.</value>
    [JsonPropertyName("scales")]
    public List<float> Scales { get; set; }

    /// <summary>
    /// An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times challenged, number of opportunities to challenge, and percentage.</value>
    [JsonPropertyName("challenges")]
    public List<float> Challenges { get; set; }

    /// <summary>
    /// An array with three values, number of times captured, number of opportunities to capture, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times captured, number of opportunities to capture, and percentage.</value>
    [JsonPropertyName("captures")]
    public List<float> Captures { get; set; }

    /// <summary>
    /// Average winning score.
    /// </summary>
    /// <value>Average winning score.</value>
    [JsonPropertyName("average_win_score")]
    public float AverageWinScore { get; set; }

    /// <summary>
    /// Average margin of victory.
    /// </summary>
    /// <value>Average margin of victory.</value>
    [JsonPropertyName("average_win_margin")]
    public float AverageWinMargin { get; set; }

    /// <summary>
    /// Average total score.
    /// </summary>
    /// <value>Average total score.</value>
    [JsonPropertyName("average_score")]
    public float AverageScore { get; set; }

    /// <summary>
    /// Average autonomous score.
    /// </summary>
    /// <value>Average autonomous score.</value>
    [JsonPropertyName("average_auto_score")]
    public float AverageAutoScore { get; set; }

    /// <summary>
    /// Average crossing score.
    /// </summary>
    /// <value>Average crossing score.</value>
    [JsonPropertyName("average_crossing_score")]
    public float AverageCrossingScore { get; set; }

    /// <summary>
    /// Average boulder score.
    /// </summary>
    /// <value>Average boulder score.</value>
    [JsonPropertyName("average_boulder_score")]
    public float AverageBoulderScore { get; set; }

    /// <summary>
    /// Average tower score.
    /// </summary>
    /// <value>Average tower score.</value>
    [JsonPropertyName("average_tower_score")]
    public float AverageTowerScore { get; set; }

    /// <summary>
    /// Average foul score.
    /// </summary>
    /// <value>Average foul score.</value>
    [JsonPropertyName("average_foul_score")]
    public float AverageFoulScore { get; set; }

    /// <summary>
    /// An array with three values, high score, match key from the match with the high score, and the name of the match.
    /// </summary>
    /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match.</value>
    [JsonPropertyName("high_score")]
    public List<string> HighScore { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class EventInsights2016 {");
        sb.Append("  LowBar: ").AppendLine(LowBar.ToString());
        sb.Append("  AChevalDeFrise: ").AppendLine(AChevalDeFrise.ToString());
        sb.Append("  APortcullis: ").AppendLine(APortcullis.ToString());
        sb.Append("  BRamparts: ").AppendLine(BRamparts.ToString());
        sb.Append("  BMoat: ").AppendLine(BMoat.ToString());
        sb.Append("  CSallyPort: ").AppendLine(CSallyPort.ToString());
        sb.Append("  CDrawbridge: ").AppendLine(CDrawbridge.ToString());
        sb.Append("  DRoughTerrain: ").AppendLine(DRoughTerrain.ToString());
        sb.Append("  DRockWall: ").AppendLine(DRockWall.ToString());
        sb.Append("  AverageHighGoals: ").AppendLine(AverageHighGoals.ToString());
        sb.Append("  AverageLowGoals: ").AppendLine(AverageLowGoals.ToString());
        sb.Append("  Breaches: ").AppendLine(Breaches.ToString());
        sb.Append("  Scales: ").AppendLine(Scales.ToString());
        sb.Append("  Challenges: ").AppendLine(Challenges.ToString());
        sb.Append("  Captures: ").AppendLine(Captures.ToString());
        sb.Append("  AverageWinScore: ").AppendLine(AverageWinScore.ToString());
        sb.Append("  AverageWinMargin: ").AppendLine(AverageWinMargin.ToString());
        sb.Append("  AverageScore: ").AppendLine(AverageScore.ToString());
        sb.Append("  AverageAutoScore: ").AppendLine(AverageAutoScore.ToString());
        sb.Append("  AverageCrossingScore: ").AppendLine(AverageCrossingScore.ToString());
        sb.Append("  AverageBoulderScore: ").AppendLine(AverageBoulderScore.ToString());
        sb.Append("  AverageTowerScore: ").AppendLine(AverageTowerScore.ToString());
        sb.Append("  AverageFoulScore: ").AppendLine(AverageFoulScore.ToString());
        sb.Append("  HighScore: ").AppendLine(HighScore.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
