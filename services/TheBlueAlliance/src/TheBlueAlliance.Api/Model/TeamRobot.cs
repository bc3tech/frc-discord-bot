/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// TeamRobot
/// </summary>
public partial class TeamRobot : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="TeamRobot" /> class.
    /// </summary>
    [JsonConstructor]
    protected TeamRobot() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="TeamRobot" /> class.
    /// </summary>
    /// <param name="year">Year this robot competed in. (required).</param>
    /// <param name="robotName">Name of the robot as provided by the team. (required).</param>
    /// <param name="key">Internal TBA identifier for this robot. (required).</param>
    /// <param name="teamKey">TBA team key for this robot. (required).</param>
    public TeamRobot(int year = default, string? robotName = default, string? key = default, string? teamKey = default)
    {
        this.Year = year;
        // to ensure "robotName" is required (not null)
        ArgumentNullException.ThrowIfNull(robotName);
        this.RobotName = robotName;
        // to ensure "key" is required (not null)
        ArgumentNullException.ThrowIfNull(key);
        this.Key = key;
        // to ensure "teamKey" is required (not null)
        ArgumentNullException.ThrowIfNull(teamKey);
        this.TeamKey = teamKey;
    }

    /// <summary>
    /// Year this robot competed in.
    /// </summary>
    /// <value>Year this robot competed in.</value>
    [JsonPropertyName("year")]
    public int Year { get; set; }

    /// <summary>
    /// Name of the robot as provided by the team.
    /// </summary>
    /// <value>Name of the robot as provided by the team.</value>
    [JsonPropertyName("robot_name")]
    public string RobotName { get; set; }

    /// <summary>
    /// Internal TBA identifier for this robot.
    /// </summary>
    /// <value>Internal TBA identifier for this robot.</value>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// TBA team key for this robot.
    /// </summary>
    /// <value>TBA team key for this robot.</value>
    [JsonPropertyName("team_key")]
    public string TeamKey { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class TeamRobot {");
        sb.Append("  Year: ").AppendLine(Year.ToString());
        sb.Append("  RobotName: ").AppendLine(RobotName.ToString());
        sb.Append("  Key: ").AppendLine(Key.ToString());
        sb.Append("  TeamKey: ").AppendLine(TeamKey.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
