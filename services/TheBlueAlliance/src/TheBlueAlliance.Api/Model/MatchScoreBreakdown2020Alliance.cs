/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// MatchScoreBreakdown2020Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2020Alliance" /> class.
/// </remarks>
/// <param name="initLineRobot1">initLineRobot1.</param>
/// <param name="endgameRobot1">endgameRobot1.</param>
/// <param name="initLineRobot2">initLineRobot2.</param>
/// <param name="endgameRobot2">endgameRobot2.</param>
/// <param name="initLineRobot3">initLineRobot3.</param>
/// <param name="endgameRobot3">endgameRobot3.</param>
/// <param name="autoCellsBottom">autoCellsBottom.</param>
/// <param name="autoCellsOuter">autoCellsOuter.</param>
/// <param name="autoCellsInner">autoCellsInner.</param>
/// <param name="teleopCellsBottom">teleopCellsBottom.</param>
/// <param name="teleopCellsOuter">teleopCellsOuter.</param>
/// <param name="teleopCellsInner">teleopCellsInner.</param>
/// <param name="stage1Activated">stage1Activated.</param>
/// <param name="stage2Activated">stage2Activated.</param>
/// <param name="stage3Activated">stage3Activated.</param>
/// <param name="stage3TargetColor">stage3TargetColor.</param>
/// <param name="endgameRungIsLevel">endgameRungIsLevel.</param>
/// <param name="autoInitLinePoints">autoInitLinePoints.</param>
/// <param name="autoCellPoints">autoCellPoints.</param>
/// <param name="autoPoints">autoPoints.</param>
/// <param name="teleopCellPoints">teleopCellPoints.</param>
/// <param name="controlPanelPoints">controlPanelPoints.</param>
/// <param name="endgamePoints">endgamePoints.</param>
/// <param name="teleopPoints">teleopPoints.</param>
/// <param name="shieldOperationalRankingPoint">shieldOperationalRankingPoint.</param>
/// <param name="shieldEnergizedRankingPoint">shieldEnergizedRankingPoint.</param>
/// <param name="tbaShieldEnergizedRankingPointFromFoul">Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul..</param>
/// <param name="tbaNumRobotsHanging">Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match..</param>
/// <param name="foulCount">foulCount.</param>
/// <param name="techFoulCount">techFoulCount.</param>
/// <param name="adjustPoints">adjustPoints.</param>
/// <param name="foulPoints">foulPoints.</param>
/// <param name="rp">rp.</param>
/// <param name="totalPoints">totalPoints.</param>
public partial class MatchScoreBreakdown2020Alliance(string? initLineRobot1 = default, string? endgameRobot1 = default, string? initLineRobot2 = default, string? endgameRobot2 = default, string? initLineRobot3 = default, string? endgameRobot3 = default, int autoCellsBottom = default, int autoCellsOuter = default, int autoCellsInner = default, int teleopCellsBottom = default, int teleopCellsOuter = default, int teleopCellsInner = default, bool stage1Activated = default, bool stage2Activated = default, bool stage3Activated = default, string? stage3TargetColor = default, string? endgameRungIsLevel = default, int autoInitLinePoints = default, int autoCellPoints = default, int autoPoints = default, int teleopCellPoints = default, int controlPanelPoints = default, int endgamePoints = default, int teleopPoints = default, bool shieldOperationalRankingPoint = default, bool shieldEnergizedRankingPoint = default, bool tbaShieldEnergizedRankingPointFromFoul = default, int tbaNumRobotsHanging = default, int foulCount = default, int techFoulCount = default, int adjustPoints = default, int foulPoints = default, int rp = default, int totalPoints = default) : IValidatableObject
{

    /// <summary>
    /// Gets or Sets InitLineRobot1
    /// </summary>

    [JsonPropertyName("initLineRobot1")]
    public string InitLineRobot1 { get; set; } = initLineRobot1;

    /// <summary>
    /// Gets or Sets EndgameRobot1
    /// </summary>

    [JsonPropertyName("endgameRobot1")]
    public string EndgameRobot1 { get; set; } = endgameRobot1;

    /// <summary>
    /// Gets or Sets InitLineRobot2
    /// </summary>

    [JsonPropertyName("initLineRobot2")]
    public string InitLineRobot2 { get; set; } = initLineRobot2;

    /// <summary>
    /// Gets or Sets EndgameRobot2
    /// </summary>

    [JsonPropertyName("endgameRobot2")]
    public string EndgameRobot2 { get; set; } = endgameRobot2;

    /// <summary>
    /// Gets or Sets InitLineRobot3
    /// </summary>

    [JsonPropertyName("initLineRobot3")]
    public string InitLineRobot3 { get; set; } = initLineRobot3;

    /// <summary>
    /// Gets or Sets EndgameRobot3
    /// </summary>

    [JsonPropertyName("endgameRobot3")]
    public string EndgameRobot3 { get; set; } = endgameRobot3;

    /// <summary>
    /// Gets or Sets AutoCellsBottom
    /// </summary>

    [JsonPropertyName("autoCellsBottom")]
    public int AutoCellsBottom { get; set; } = autoCellsBottom;

    /// <summary>
    /// Gets or Sets AutoCellsOuter
    /// </summary>

    [JsonPropertyName("autoCellsOuter")]
    public int AutoCellsOuter { get; set; } = autoCellsOuter;

    /// <summary>
    /// Gets or Sets AutoCellsInner
    /// </summary>

    [JsonPropertyName("autoCellsInner")]
    public int AutoCellsInner { get; set; } = autoCellsInner;

    /// <summary>
    /// Gets or Sets TeleopCellsBottom
    /// </summary>

    [JsonPropertyName("teleopCellsBottom")]
    public int TeleopCellsBottom { get; set; } = teleopCellsBottom;

    /// <summary>
    /// Gets or Sets TeleopCellsOuter
    /// </summary>

    [JsonPropertyName("teleopCellsOuter")]
    public int TeleopCellsOuter { get; set; } = teleopCellsOuter;

    /// <summary>
    /// Gets or Sets TeleopCellsInner
    /// </summary>

    [JsonPropertyName("teleopCellsInner")]
    public int TeleopCellsInner { get; set; } = teleopCellsInner;

    /// <summary>
    /// Gets or Sets Stage1Activated
    /// </summary>

    [JsonPropertyName("stage1Activated")]
    public bool Stage1Activated { get; set; } = stage1Activated;

    /// <summary>
    /// Gets or Sets Stage2Activated
    /// </summary>

    [JsonPropertyName("stage2Activated")]
    public bool Stage2Activated { get; set; } = stage2Activated;

    /// <summary>
    /// Gets or Sets Stage3Activated
    /// </summary>

    [JsonPropertyName("stage3Activated")]
    public bool Stage3Activated { get; set; } = stage3Activated;

    /// <summary>
    /// Gets or Sets Stage3TargetColor
    /// </summary>

    [JsonPropertyName("stage3TargetColor")]
    public string Stage3TargetColor { get; set; } = stage3TargetColor;

    /// <summary>
    /// Gets or Sets EndgameRungIsLevel
    /// </summary>

    [JsonPropertyName("endgameRungIsLevel")]
    public string EndgameRungIsLevel { get; set; } = endgameRungIsLevel;

    /// <summary>
    /// Gets or Sets AutoInitLinePoints
    /// </summary>

    [JsonPropertyName("autoInitLinePoints")]
    public int AutoInitLinePoints { get; set; } = autoInitLinePoints;

    /// <summary>
    /// Gets or Sets AutoCellPoints
    /// </summary>

    [JsonPropertyName("autoCellPoints")]
    public int AutoCellPoints { get; set; } = autoCellPoints;

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>

    [JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; } = autoPoints;

    /// <summary>
    /// Gets or Sets TeleopCellPoints
    /// </summary>

    [JsonPropertyName("teleopCellPoints")]
    public int TeleopCellPoints { get; set; } = teleopCellPoints;

    /// <summary>
    /// Gets or Sets ControlPanelPoints
    /// </summary>

    [JsonPropertyName("controlPanelPoints")]
    public int ControlPanelPoints { get; set; } = controlPanelPoints;

    /// <summary>
    /// Gets or Sets EndgamePoints
    /// </summary>

    [JsonPropertyName("endgamePoints")]
    public int EndgamePoints { get; set; } = endgamePoints;

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>

    [JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; } = teleopPoints;

    /// <summary>
    /// Gets or Sets ShieldOperationalRankingPoint
    /// </summary>

    [JsonPropertyName("shieldOperationalRankingPoint")]
    public bool ShieldOperationalRankingPoint { get; set; } = shieldOperationalRankingPoint;

    /// <summary>
    /// Gets or Sets ShieldEnergizedRankingPoint
    /// </summary>

    [JsonPropertyName("shieldEnergizedRankingPoint")]
    public bool ShieldEnergizedRankingPoint { get; set; } = shieldEnergizedRankingPoint;

    /// <summary>
    /// Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
    /// </summary>
    /// <value>Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.</value>

    [JsonPropertyName("tba_shieldEnergizedRankingPointFromFoul")]
    public bool TbaShieldEnergizedRankingPointFromFoul { get; set; } = tbaShieldEnergizedRankingPointFromFoul;

    /// <summary>
    /// Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
    /// </summary>
    /// <value>Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.</value>

    [JsonPropertyName("tba_numRobotsHanging")]
    public int TbaNumRobotsHanging { get; set; } = tbaNumRobotsHanging;

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>

    [JsonPropertyName("foulCount")]
    public int FoulCount { get; set; } = foulCount;

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>

    [JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; } = techFoulCount;

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>

    [JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; } = adjustPoints;

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>

    [JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; } = foulPoints;

    /// <summary>
    /// Gets or Sets Rp
    /// </summary>

    [JsonPropertyName("rp")]
    public int Rp { get; set; } = rp;

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>

    [JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; } = totalPoints;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class MatchScoreBreakdown2020Alliance {");
        sb.Append("  InitLineRobot1: ").AppendLine(InitLineRobot1.ToString());
        sb.Append("  EndgameRobot1: ").AppendLine(EndgameRobot1.ToString());
        sb.Append("  InitLineRobot2: ").AppendLine(InitLineRobot2.ToString());
        sb.Append("  EndgameRobot2: ").AppendLine(EndgameRobot2.ToString());
        sb.Append("  InitLineRobot3: ").AppendLine(InitLineRobot3.ToString());
        sb.Append("  EndgameRobot3: ").AppendLine(EndgameRobot3.ToString());
        sb.Append("  AutoCellsBottom: ").AppendLine(AutoCellsBottom.ToString());
        sb.Append("  AutoCellsOuter: ").AppendLine(AutoCellsOuter.ToString());
        sb.Append("  AutoCellsInner: ").AppendLine(AutoCellsInner.ToString());
        sb.Append("  TeleopCellsBottom: ").AppendLine(TeleopCellsBottom.ToString());
        sb.Append("  TeleopCellsOuter: ").AppendLine(TeleopCellsOuter.ToString());
        sb.Append("  TeleopCellsInner: ").AppendLine(TeleopCellsInner.ToString());
        sb.Append("  Stage1Activated: ").AppendLine(Stage1Activated.ToString());
        sb.Append("  Stage2Activated: ").AppendLine(Stage2Activated.ToString());
        sb.Append("  Stage3Activated: ").AppendLine(Stage3Activated.ToString());
        sb.Append("  Stage3TargetColor: ").AppendLine(Stage3TargetColor.ToString());
        sb.Append("  EndgameRungIsLevel: ").AppendLine(EndgameRungIsLevel.ToString());
        sb.Append("  AutoInitLinePoints: ").AppendLine(AutoInitLinePoints.ToString());
        sb.Append("  AutoCellPoints: ").AppendLine(AutoCellPoints.ToString());
        sb.Append("  AutoPoints: ").AppendLine(AutoPoints.ToString());
        sb.Append("  TeleopCellPoints: ").AppendLine(TeleopCellPoints.ToString());
        sb.Append("  ControlPanelPoints: ").AppendLine(ControlPanelPoints.ToString());
        sb.Append("  EndgamePoints: ").AppendLine(EndgamePoints.ToString());
        sb.Append("  TeleopPoints: ").AppendLine(TeleopPoints.ToString());
        sb.Append("  ShieldOperationalRankingPoint: ").AppendLine(ShieldOperationalRankingPoint.ToString());
        sb.Append("  ShieldEnergizedRankingPoint: ").AppendLine(ShieldEnergizedRankingPoint.ToString());
        sb.Append("  TbaShieldEnergizedRankingPointFromFoul: ").AppendLine(TbaShieldEnergizedRankingPointFromFoul.ToString());
        sb.Append("  TbaNumRobotsHanging: ").AppendLine(TbaNumRobotsHanging.ToString());
        sb.Append("  FoulCount: ").AppendLine(FoulCount.ToString());
        sb.Append("  TechFoulCount: ").AppendLine(TechFoulCount.ToString());
        sb.Append("  AdjustPoints: ").AppendLine(AdjustPoints.ToString());
        sb.Append("  FoulPoints: ").AppendLine(FoulPoints.ToString());
        sb.Append("  Rp: ").AppendLine(Rp.ToString());
        sb.Append("  TotalPoints: ").AppendLine(TotalPoints.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
