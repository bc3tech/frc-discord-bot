/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// EventDistrictPointsPointsValue
/// </summary>
public partial class EventDistrictPointsPointsValue : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventDistrictPointsPointsValue" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventDistrictPointsPointsValue() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventDistrictPointsPointsValue" /> class.
    /// </summary>
    /// <param name="total">Total points awarded at this event. (required).</param>
    /// <param name="alliancePoints">Points awarded for alliance selection (required).</param>
    /// <param name="elimPoints">Points awarded for elimination match performance. (required).</param>
    /// <param name="awardPoints">Points awarded for event awards. (required).</param>
    /// <param name="qualPoints">Points awarded for qualification match performance. (required).</param>
    public EventDistrictPointsPointsValue(int total = default, int alliancePoints = default, int elimPoints = default, int awardPoints = default, int qualPoints = default)
    {
        this.Total = total;
        this.AlliancePoints = alliancePoints;
        this.ElimPoints = elimPoints;
        this.AwardPoints = awardPoints;
        this.QualPoints = qualPoints;
    }

    /// <summary>
    /// Total points awarded at this event.
    /// </summary>
    /// <value>Total points awarded at this event.</value>
    [JsonPropertyName("total")]
    public int Total { get; set; }

    /// <summary>
    /// Points awarded for alliance selection
    /// </summary>
    /// <value>Points awarded for alliance selection</value>
    [JsonPropertyName("alliance_points")]
    public int AlliancePoints { get; set; }

    /// <summary>
    /// Points awarded for elimination match performance.
    /// </summary>
    /// <value>Points awarded for elimination match performance.</value>
    [JsonPropertyName("elim_points")]
    public int ElimPoints { get; set; }

    /// <summary>
    /// Points awarded for event awards.
    /// </summary>
    /// <value>Points awarded for event awards.</value>
    [JsonPropertyName("award_points")]
    public int AwardPoints { get; set; }

    /// <summary>
    /// Points awarded for qualification match performance.
    /// </summary>
    /// <value>Points awarded for qualification match performance.</value>
    [JsonPropertyName("qual_points")]
    public int QualPoints { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class EventDistrictPointsPointsValue {");
        sb.Append("  Total: ").AppendLine(Total.ToString());
        sb.Append("  AlliancePoints: ").AppendLine(AlliancePoints.ToString());
        sb.Append("  ElimPoints: ").AppendLine(ElimPoints.ToString());
        sb.Append("  AwardPoints: ").AppendLine(AwardPoints.ToString());
        sb.Append("  QualPoints: ").AppendLine(QualPoints.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
