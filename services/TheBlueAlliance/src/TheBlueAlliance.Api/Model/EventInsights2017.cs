/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Insights for FIRST STEAMWORKS qualification and elimination matches.
/// </summary>
public partial class EventInsights2017 : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
    /// </summary>
    [JsonConstructor]
    protected EventInsights2017() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="EventInsights2017" /> class.
    /// </summary>
    /// <param name="averageFoulScore">Average foul score. (required).</param>
    /// <param name="averageFuelPoints">Average fuel points scored. (required).</param>
    /// <param name="averageFuelPointsAuto">Average fuel points scored during auto. (required).</param>
    /// <param name="averageFuelPointsTeleop">Average fuel points scored during teleop. (required).</param>
    /// <param name="averageHighGoals">Average points scored in the high goal. (required).</param>
    /// <param name="averageHighGoalsAuto">Average points scored in the high goal during auto. (required).</param>
    /// <param name="averageHighGoalsTeleop">Average points scored in the high goal during teleop. (required).</param>
    /// <param name="averageLowGoals">Average points scored in the low goal. (required).</param>
    /// <param name="averageLowGoalsAuto">Average points scored in the low goal during auto. (required).</param>
    /// <param name="averageLowGoalsTeleop">Average points scored in the low goal during teleop. (required).</param>
    /// <param name="averageMobilityPointsAuto">Average mobility points scored during auto. (required).</param>
    /// <param name="averagePointsAuto">Average points scored during auto. (required).</param>
    /// <param name="averagePointsTeleop">Average points scored during teleop. (required).</param>
    /// <param name="averageRotorPoints">Average rotor points scored. (required).</param>
    /// <param name="averageRotorPointsAuto">Average rotor points scored during auto. (required).</param>
    /// <param name="averageRotorPointsTeleop">Average rotor points scored during teleop. (required).</param>
    /// <param name="averageScore">Average score. (required).</param>
    /// <param name="averageTakeoffPointsTeleop">Average takeoff points scored during teleop. (required).</param>
    /// <param name="averageWinMargin">Average margin of victory. (required).</param>
    /// <param name="averageWinScore">Average winning score. (required).</param>
    /// <param name="highKpa">An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match (required).</param>
    /// <param name="highScore">An array with three values, high score, match key from the match with the high score, and the name of the match (required).</param>
    /// <param name="kpaAchieved">An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
    /// <param name="mobilityCounts">An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. (required).</param>
    /// <param name="rotor1Engaged">An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. (required).</param>
    /// <param name="rotor1EngagedAuto">An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
    /// <param name="rotor2Engaged">An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. (required).</param>
    /// <param name="rotor2EngagedAuto">An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. (required).</param>
    /// <param name="rotor3Engaged">An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. (required).</param>
    /// <param name="rotor4Engaged">An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. (required).</param>
    /// <param name="takeoffCounts">An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. (required).</param>
    /// <param name="unicornMatches">An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. (required).</param>
    public EventInsights2017(float averageFoulScore = default, float averageFuelPoints = default, float averageFuelPointsAuto = default, float averageFuelPointsTeleop = default, float averageHighGoals = default, float averageHighGoalsAuto = default, float averageHighGoalsTeleop = default, float averageLowGoals = default, float averageLowGoalsAuto = default, float averageLowGoalsTeleop = default, float averageMobilityPointsAuto = default, float averagePointsAuto = default, float averagePointsTeleop = default, float averageRotorPoints = default, float averageRotorPointsAuto = default, float averageRotorPointsTeleop = default, float averageScore = default, float averageTakeoffPointsTeleop = default, float averageWinMargin = default, float averageWinScore = default, List<string>? highKpa = default, List<string>? highScore = default, List<float>? kpaAchieved = default, List<float>? mobilityCounts = default, List<float>? rotor1Engaged = default, List<float>? rotor1EngagedAuto = default, List<float>? rotor2Engaged = default, List<float>? rotor2EngagedAuto = default, List<float>? rotor3Engaged = default, List<float>? rotor4Engaged = default, List<float>? takeoffCounts = default, List<float>? unicornMatches = default)
    {
        this.AverageFoulScore = averageFoulScore;
        this.AverageFuelPoints = averageFuelPoints;
        this.AverageFuelPointsAuto = averageFuelPointsAuto;
        this.AverageFuelPointsTeleop = averageFuelPointsTeleop;
        this.AverageHighGoals = averageHighGoals;
        this.AverageHighGoalsAuto = averageHighGoalsAuto;
        this.AverageHighGoalsTeleop = averageHighGoalsTeleop;
        this.AverageLowGoals = averageLowGoals;
        this.AverageLowGoalsAuto = averageLowGoalsAuto;
        this.AverageLowGoalsTeleop = averageLowGoalsTeleop;
        this.AverageMobilityPointsAuto = averageMobilityPointsAuto;
        this.AveragePointsAuto = averagePointsAuto;
        this.AveragePointsTeleop = averagePointsTeleop;
        this.AverageRotorPoints = averageRotorPoints;
        this.AverageRotorPointsAuto = averageRotorPointsAuto;
        this.AverageRotorPointsTeleop = averageRotorPointsTeleop;
        this.AverageScore = averageScore;
        this.AverageTakeoffPointsTeleop = averageTakeoffPointsTeleop;
        this.AverageWinMargin = averageWinMargin;
        this.AverageWinScore = averageWinScore;
        // to ensure "highKpa" is required (not null)
        ArgumentNullException.ThrowIfNull(highKpa);
        this.HighKpa = highKpa;
        // to ensure "highScore" is required (not null)
        ArgumentNullException.ThrowIfNull(highScore);
        this.HighScore = highScore;
        // to ensure "kpaAchieved" is required (not null)
        ArgumentNullException.ThrowIfNull(kpaAchieved);
        this.KpaAchieved = kpaAchieved;
        // to ensure "mobilityCounts" is required (not null)
        ArgumentNullException.ThrowIfNull(mobilityCounts);
        this.MobilityCounts = mobilityCounts;
        // to ensure "rotor1Engaged" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor1Engaged);
        this.Rotor1Engaged = rotor1Engaged;
        // to ensure "rotor1EngagedAuto" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor1EngagedAuto);
        this.Rotor1EngagedAuto = rotor1EngagedAuto;
        // to ensure "rotor2Engaged" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor2Engaged);
        this.Rotor2Engaged = rotor2Engaged;
        // to ensure "rotor2EngagedAuto" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor2EngagedAuto);
        this.Rotor2EngagedAuto = rotor2EngagedAuto;
        // to ensure "rotor3Engaged" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor3Engaged);
        this.Rotor3Engaged = rotor3Engaged;
        // to ensure "rotor4Engaged" is required (not null)
        ArgumentNullException.ThrowIfNull(rotor4Engaged);
        this.Rotor4Engaged = rotor4Engaged;
        // to ensure "takeoffCounts" is required (not null)
        ArgumentNullException.ThrowIfNull(takeoffCounts);
        this.TakeoffCounts = takeoffCounts;
        // to ensure "unicornMatches" is required (not null)
        ArgumentNullException.ThrowIfNull(unicornMatches);
        this.UnicornMatches = unicornMatches;
    }

    /// <summary>
    /// Average foul score.
    /// </summary>
    /// <value>Average foul score.</value>
    [JsonPropertyName("average_foul_score")]
    public float AverageFoulScore { get; set; }

    /// <summary>
    /// Average fuel points scored.
    /// </summary>
    /// <value>Average fuel points scored.</value>
    [JsonPropertyName("average_fuel_points")]
    public float AverageFuelPoints { get; set; }

    /// <summary>
    /// Average fuel points scored during auto.
    /// </summary>
    /// <value>Average fuel points scored during auto.</value>
    [JsonPropertyName("average_fuel_points_auto")]
    public float AverageFuelPointsAuto { get; set; }

    /// <summary>
    /// Average fuel points scored during teleop.
    /// </summary>
    /// <value>Average fuel points scored during teleop.</value>
    [JsonPropertyName("average_fuel_points_teleop")]
    public float AverageFuelPointsTeleop { get; set; }

    /// <summary>
    /// Average points scored in the high goal.
    /// </summary>
    /// <value>Average points scored in the high goal.</value>
    [JsonPropertyName("average_high_goals")]
    public float AverageHighGoals { get; set; }

    /// <summary>
    /// Average points scored in the high goal during auto.
    /// </summary>
    /// <value>Average points scored in the high goal during auto.</value>
    [JsonPropertyName("average_high_goals_auto")]
    public float AverageHighGoalsAuto { get; set; }

    /// <summary>
    /// Average points scored in the high goal during teleop.
    /// </summary>
    /// <value>Average points scored in the high goal during teleop.</value>
    [JsonPropertyName("average_high_goals_teleop")]
    public float AverageHighGoalsTeleop { get; set; }

    /// <summary>
    /// Average points scored in the low goal.
    /// </summary>
    /// <value>Average points scored in the low goal.</value>
    [JsonPropertyName("average_low_goals")]
    public float AverageLowGoals { get; set; }

    /// <summary>
    /// Average points scored in the low goal during auto.
    /// </summary>
    /// <value>Average points scored in the low goal during auto.</value>
    [JsonPropertyName("average_low_goals_auto")]
    public float AverageLowGoalsAuto { get; set; }

    /// <summary>
    /// Average points scored in the low goal during teleop.
    /// </summary>
    /// <value>Average points scored in the low goal during teleop.</value>
    [JsonPropertyName("average_low_goals_teleop")]
    public float AverageLowGoalsTeleop { get; set; }

    /// <summary>
    /// Average mobility points scored during auto.
    /// </summary>
    /// <value>Average mobility points scored during auto.</value>
    [JsonPropertyName("average_mobility_points_auto")]
    public float AverageMobilityPointsAuto { get; set; }

    /// <summary>
    /// Average points scored during auto.
    /// </summary>
    /// <value>Average points scored during auto.</value>
    [JsonPropertyName("average_points_auto")]
    public float AveragePointsAuto { get; set; }

    /// <summary>
    /// Average points scored during teleop.
    /// </summary>
    /// <value>Average points scored during teleop.</value>
    [JsonPropertyName("average_points_teleop")]
    public float AveragePointsTeleop { get; set; }

    /// <summary>
    /// Average rotor points scored.
    /// </summary>
    /// <value>Average rotor points scored.</value>
    [JsonPropertyName("average_rotor_points")]
    public float AverageRotorPoints { get; set; }

    /// <summary>
    /// Average rotor points scored during auto.
    /// </summary>
    /// <value>Average rotor points scored during auto.</value>
    [JsonPropertyName("average_rotor_points_auto")]
    public float AverageRotorPointsAuto { get; set; }

    /// <summary>
    /// Average rotor points scored during teleop.
    /// </summary>
    /// <value>Average rotor points scored during teleop.</value>
    [JsonPropertyName("average_rotor_points_teleop")]
    public float AverageRotorPointsTeleop { get; set; }

    /// <summary>
    /// Average score.
    /// </summary>
    /// <value>Average score.</value>
    [JsonPropertyName("average_score")]
    public float AverageScore { get; set; }

    /// <summary>
    /// Average takeoff points scored during teleop.
    /// </summary>
    /// <value>Average takeoff points scored during teleop.</value>
    [JsonPropertyName("average_takeoff_points_teleop")]
    public float AverageTakeoffPointsTeleop { get; set; }

    /// <summary>
    /// Average margin of victory.
    /// </summary>
    /// <value>Average margin of victory.</value>
    [JsonPropertyName("average_win_margin")]
    public float AverageWinMargin { get; set; }

    /// <summary>
    /// Average winning score.
    /// </summary>
    /// <value>Average winning score.</value>
    [JsonPropertyName("average_win_score")]
    public float AverageWinScore { get; set; }

    /// <summary>
    /// An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
    /// </summary>
    /// <value>An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match</value>
    [JsonPropertyName("high_kpa")]
    public List<string> HighKpa { get; set; }

    /// <summary>
    /// An array with three values, high score, match key from the match with the high score, and the name of the match
    /// </summary>
    /// <value>An array with three values, high score, match key from the match with the high score, and the name of the match</value>
    [JsonPropertyName("high_score")]
    public List<string> HighScore { get; set; }

    /// <summary>
    /// An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.</value>
    [JsonPropertyName("kpa_achieved")]
    public List<float> KpaAchieved { get; set; }

    /// <summary>
    /// An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.</value>
    [JsonPropertyName("mobility_counts")]
    public List<float> MobilityCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.</value>
    [JsonPropertyName("rotor_1_engaged")]
    public List<float> Rotor1Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
    [JsonPropertyName("rotor_1_engaged_auto")]
    public List<float> Rotor1EngagedAuto { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.</value>
    [JsonPropertyName("rotor_2_engaged")]
    public List<float> Rotor2Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.</value>
    [JsonPropertyName("rotor_2_engaged_auto")]
    public List<float> Rotor2EngagedAuto { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.</value>
    [JsonPropertyName("rotor_3_engaged")]
    public List<float> Rotor3Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.</value>
    [JsonPropertyName("rotor_4_engaged")]
    public List<float> Rotor4Engaged { get; set; }

    /// <summary>
    /// An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.</value>
    [JsonPropertyName("takeoff_counts")]
    public List<float> TakeoffCounts { get; set; }

    /// <summary>
    /// An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
    /// </summary>
    /// <value>An array with three values, number of times a unicorn match (Win + kPa &amp; Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.</value>
    [JsonPropertyName("unicorn_matches")]
    public List<float> UnicornMatches { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class EventInsights2017 {");
        sb.Append("  AverageFoulScore: ").AppendLine(AverageFoulScore.ToString());
        sb.Append("  AverageFuelPoints: ").AppendLine(AverageFuelPoints.ToString());
        sb.Append("  AverageFuelPointsAuto: ").AppendLine(AverageFuelPointsAuto.ToString());
        sb.Append("  AverageFuelPointsTeleop: ").AppendLine(AverageFuelPointsTeleop.ToString());
        sb.Append("  AverageHighGoals: ").AppendLine(AverageHighGoals.ToString());
        sb.Append("  AverageHighGoalsAuto: ").AppendLine(AverageHighGoalsAuto.ToString());
        sb.Append("  AverageHighGoalsTeleop: ").AppendLine(AverageHighGoalsTeleop.ToString());
        sb.Append("  AverageLowGoals: ").AppendLine(AverageLowGoals.ToString());
        sb.Append("  AverageLowGoalsAuto: ").AppendLine(AverageLowGoalsAuto.ToString());
        sb.Append("  AverageLowGoalsTeleop: ").AppendLine(AverageLowGoalsTeleop.ToString());
        sb.Append("  AverageMobilityPointsAuto: ").AppendLine(AverageMobilityPointsAuto.ToString());
        sb.Append("  AveragePointsAuto: ").AppendLine(AveragePointsAuto.ToString());
        sb.Append("  AveragePointsTeleop: ").AppendLine(AveragePointsTeleop.ToString());
        sb.Append("  AverageRotorPoints: ").AppendLine(AverageRotorPoints.ToString());
        sb.Append("  AverageRotorPointsAuto: ").AppendLine(AverageRotorPointsAuto.ToString());
        sb.Append("  AverageRotorPointsTeleop: ").AppendLine(AverageRotorPointsTeleop.ToString());
        sb.Append("  AverageScore: ").AppendLine(AverageScore.ToString());
        sb.Append("  AverageTakeoffPointsTeleop: ").AppendLine(AverageTakeoffPointsTeleop.ToString());
        sb.Append("  AverageWinMargin: ").AppendLine(AverageWinMargin.ToString());
        sb.Append("  AverageWinScore: ").AppendLine(AverageWinScore.ToString());
        sb.Append("  HighKpa: ").AppendLine(HighKpa.ToString());
        sb.Append("  HighScore: ").AppendLine(HighScore.ToString());
        sb.Append("  KpaAchieved: ").AppendLine(KpaAchieved.ToString());
        sb.Append("  MobilityCounts: ").AppendLine(MobilityCounts.ToString());
        sb.Append("  Rotor1Engaged: ").AppendLine(Rotor1Engaged.ToString());
        sb.Append("  Rotor1EngagedAuto: ").AppendLine(Rotor1EngagedAuto.ToString());
        sb.Append("  Rotor2Engaged: ").AppendLine(Rotor2Engaged.ToString());
        sb.Append("  Rotor2EngagedAuto: ").AppendLine(Rotor2EngagedAuto.ToString());
        sb.Append("  Rotor3Engaged: ").AppendLine(Rotor3Engaged.ToString());
        sb.Append("  Rotor4Engaged: ").AppendLine(Rotor4Engaged.ToString());
        sb.Append("  TakeoffCounts: ").AppendLine(TakeoffCounts.ToString());
        sb.Append("  UnicornMatches: ").AppendLine(UnicornMatches.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
