/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// Team
/// </summary>
public partial class Team : IValidatableObject
{
    /// <summary>
    /// Initializes a new instance of the <see cref="Team" /> class.
    /// </summary>
    [JsonConstructor]
    protected Team() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Team" /> class.
    /// </summary>
    /// <param name="key">TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number. (required).</param>
    /// <param name="teamNumber">Official team number issued by FIRST. (required).</param>
    /// <param name="nickname">Team nickname provided by FIRST. (required).</param>
    /// <param name="name">Official long name registered with FIRST. (required).</param>
    /// <param name="schoolName">Name of team school or affilited group registered with FIRST. (required).</param>
    /// <param name="city">City of team derived from parsing the address registered with FIRST. (required).</param>
    /// <param name="stateProv">State of team derived from parsing the address registered with FIRST. (required).</param>
    /// <param name="country">Country of team derived from parsing the address registered with FIRST. (required).</param>
    /// <param name="address">Will be NULL, for future development. (required).</param>
    /// <param name="postalCode">Postal code from the team address. (required).</param>
    /// <param name="gmapsPlaceId">Will be NULL, for future development. (required).</param>
    /// <param name="gmapsUrl">Will be NULL, for future development. (required).</param>
    /// <param name="lat">Will be NULL, for future development. (required).</param>
    /// <param name="lng">Will be NULL, for future development. (required).</param>
    /// <param name="locationName">Will be NULL, for future development. (required).</param>
    /// <param name="website">Official website associated with the team..</param>
    /// <param name="rookieYear">First year the team officially competed. (required).</param>
    public Team(string? key = default, int teamNumber = default, string? nickname = default, string? name = default, string? schoolName = default, string? city = default, string? stateProv = default, string? country = default, string? address = default, string? postalCode = default, string? gmapsPlaceId = default, string? gmapsUrl = default, double? lat = default, double? lng = default, string? locationName = default, string? website = default, int? rookieYear = default)
    {
        // to ensure "key" is required (not null)
        ArgumentNullException.ThrowIfNull(key);
        this.Key = key;
        this.TeamNumber = teamNumber;
        // to ensure "nickname" is required (not null)
        ArgumentNullException.ThrowIfNull(nickname);
        this.Nickname = nickname;
        // to ensure "name" is required (not null)
        ArgumentNullException.ThrowIfNull(name);
        this.Name = name;
        // to ensure "schoolName" is required (not null)
        ArgumentNullException.ThrowIfNull(schoolName);
        this.SchoolName = schoolName;
        // to ensure "city" is required (not null)
        ArgumentNullException.ThrowIfNull(city);
        this.City = city;
        // to ensure "stateProv" is required (not null)
        ArgumentNullException.ThrowIfNull(stateProv);
        this.StateProv = stateProv;
        // to ensure "country" is required (not null)
        ArgumentNullException.ThrowIfNull(country);
        this.Country = country;
        // to ensure "address" is required (not null)
        ArgumentNullException.ThrowIfNull(address);
        this.Address = address;
        // to ensure "postalCode" is required (not null)
        ArgumentNullException.ThrowIfNull(postalCode);
        this.PostalCode = postalCode;
        // to ensure "gmapsPlaceId" is required (not null)
        ArgumentNullException.ThrowIfNull(gmapsPlaceId);
        this.GmapsPlaceId = gmapsPlaceId;
        // to ensure "gmapsUrl" is required (not null)
        ArgumentNullException.ThrowIfNull(gmapsUrl);
        this.GmapsUrl = gmapsUrl;
        // to ensure "lat" is required (not null)
        if (lat is null)
        {
            throw new ArgumentNullException("lat is a required property for Team and cannot be null");
        }

        this.Lat = lat;
        // to ensure "lng" is required (not null)
        if (lng is null)
        {
            throw new ArgumentNullException("lng is a required property for Team and cannot be null");
        }

        this.Lng = lng;
        // to ensure "locationName" is required (not null)
        ArgumentNullException.ThrowIfNull(locationName);
        this.LocationName = locationName;
        // to ensure "rookieYear" is required (not null)
        if (rookieYear is null)
        {
            throw new ArgumentNullException("rookieYear is a required property for Team and cannot be null");
        }

        this.RookieYear = rookieYear;
        this.Website = website;
    }

    /// <summary>
    /// TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number.
    /// </summary>
    /// <value>TBA team key with the format &#x60;frcXXXX&#x60; with &#x60;XXXX&#x60; representing the team number.</value>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// Official team number issued by FIRST.
    /// </summary>
    /// <value>Official team number issued by FIRST.</value>
    [JsonPropertyName("team_number")]
    public int TeamNumber { get; set; }

    /// <summary>
    /// Team nickname provided by FIRST.
    /// </summary>
    /// <value>Team nickname provided by FIRST.</value>
    [JsonPropertyName("nickname")]
    public string Nickname { get; set; }

    /// <summary>
    /// Official long name registered with FIRST.
    /// </summary>
    /// <value>Official long name registered with FIRST.</value>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// Name of team school or affilited group registered with FIRST.
    /// </summary>
    /// <value>Name of team school or affilited group registered with FIRST.</value>
    [JsonPropertyName("school_name")]
    public string SchoolName { get; set; }

    /// <summary>
    /// City of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>City of team derived from parsing the address registered with FIRST.</value>
    [JsonPropertyName("city")]
    public string City { get; set; }

    /// <summary>
    /// State of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>State of team derived from parsing the address registered with FIRST.</value>
    [JsonPropertyName("state_prov")]
    public string StateProv { get; set; }

    /// <summary>
    /// Country of team derived from parsing the address registered with FIRST.
    /// </summary>
    /// <value>Country of team derived from parsing the address registered with FIRST.</value>
    [JsonPropertyName("country")]
    public string Country { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("address")]
    public string Address { get; set; }

    /// <summary>
    /// Postal code from the team address.
    /// </summary>
    /// <value>Postal code from the team address.</value>
    [JsonPropertyName("postal_code")]
    public string PostalCode { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("gmaps_place_id")]
    public string GmapsPlaceId { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("gmaps_url")]
    public string GmapsUrl { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("lat")]
    public double? Lat { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("lng")]
    public double? Lng { get; set; }

    /// <summary>
    /// Will be NULL, for future development.
    /// </summary>
    /// <value>Will be NULL, for future development.</value>
    [JsonPropertyName("location_name")]
    public string LocationName { get; set; }

    /// <summary>
    /// Official website associated with the team.
    /// </summary>
    /// <value>Official website associated with the team.</value>

    [JsonPropertyName("website")]
    public string Website { get; set; }

    /// <summary>
    /// First year the team officially competed.
    /// </summary>
    /// <value>First year the team officially competed.</value>
    [JsonPropertyName("rookie_year")]
    public int? RookieYear { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class Team {");
        sb.Append("  Key: ").AppendLine(Key.ToString());
        sb.Append("  TeamNumber: ").AppendLine(TeamNumber.ToString());
        sb.Append("  Nickname: ").AppendLine(Nickname.ToString());
        sb.Append("  Name: ").AppendLine(Name.ToString());
        sb.Append("  SchoolName: ").AppendLine(SchoolName.ToString());
        sb.Append("  City: ").AppendLine(City.ToString());
        sb.Append("  StateProv: ").AppendLine(StateProv.ToString());
        sb.Append("  Country: ").AppendLine(Country.ToString());
        sb.Append("  Address: ").AppendLine(Address.ToString());
        sb.Append("  PostalCode: ").AppendLine(PostalCode.ToString());
        sb.Append("  GmapsPlaceId: ").AppendLine(GmapsPlaceId.ToString());
        sb.Append("  GmapsUrl: ").AppendLine(GmapsUrl.ToString());
        sb.Append("  Lat: ").AppendLine(Lat.ToString());
        sb.Append("  Lng: ").AppendLine(Lng.ToString());
        sb.Append("  LocationName: ").AppendLine(LocationName.ToString());
        sb.Append("  Website: ").AppendLine(Website.ToString());
        sb.Append("  RookieYear: ").AppendLine(RookieYear.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
