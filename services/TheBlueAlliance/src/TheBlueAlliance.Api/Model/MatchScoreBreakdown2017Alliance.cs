/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json.Serialization;

/// <summary>
/// MatchScoreBreakdown2017Alliance
/// </summary>
/// <remarks>
/// Initializes a new instance of the <see cref="MatchScoreBreakdown2017Alliance" /> class.
/// </remarks>
/// <param name="autoPoints">autoPoints.</param>
/// <param name="teleopPoints">teleopPoints.</param>
/// <param name="foulPoints">foulPoints.</param>
/// <param name="adjustPoints">adjustPoints.</param>
/// <param name="totalPoints">totalPoints.</param>
/// <param name="robot1Auto">robot1Auto.</param>
/// <param name="robot2Auto">robot2Auto.</param>
/// <param name="robot3Auto">robot3Auto.</param>
/// <param name="rotor1Auto">rotor1Auto.</param>
/// <param name="rotor2Auto">rotor2Auto.</param>
/// <param name="autoFuelLow">autoFuelLow.</param>
/// <param name="autoFuelHigh">autoFuelHigh.</param>
/// <param name="autoMobilityPoints">autoMobilityPoints.</param>
/// <param name="autoRotorPoints">autoRotorPoints.</param>
/// <param name="autoFuelPoints">autoFuelPoints.</param>
/// <param name="teleopFuelPoints">teleopFuelPoints.</param>
/// <param name="teleopFuelLow">teleopFuelLow.</param>
/// <param name="teleopFuelHigh">teleopFuelHigh.</param>
/// <param name="teleopRotorPoints">teleopRotorPoints.</param>
/// <param name="kPaRankingPointAchieved">kPaRankingPointAchieved.</param>
/// <param name="teleopTakeoffPoints">teleopTakeoffPoints.</param>
/// <param name="kPaBonusPoints">kPaBonusPoints.</param>
/// <param name="rotorBonusPoints">rotorBonusPoints.</param>
/// <param name="rotor1Engaged">rotor1Engaged.</param>
/// <param name="rotor2Engaged">rotor2Engaged.</param>
/// <param name="rotor3Engaged">rotor3Engaged.</param>
/// <param name="rotor4Engaged">rotor4Engaged.</param>
/// <param name="rotorRankingPointAchieved">rotorRankingPointAchieved.</param>
/// <param name="techFoulCount">techFoulCount.</param>
/// <param name="foulCount">foulCount.</param>
/// <param name="touchpadNear">touchpadNear.</param>
/// <param name="touchpadMiddle">touchpadMiddle.</param>
/// <param name="touchpadFar">touchpadFar.</param>
public partial class MatchScoreBreakdown2017Alliance(int autoPoints = default, int teleopPoints = default, int foulPoints = default, int adjustPoints = default, int totalPoints = default, MatchScoreBreakdown2017Alliance.Robot1AutoEnum? robot1Auto = default, MatchScoreBreakdown2017Alliance.Robot2AutoEnum? robot2Auto = default, MatchScoreBreakdown2017Alliance.Robot3AutoEnum? robot3Auto = default, bool rotor1Auto = default, bool rotor2Auto = default, int autoFuelLow = default, int autoFuelHigh = default, int autoMobilityPoints = default, int autoRotorPoints = default, int autoFuelPoints = default, int teleopFuelPoints = default, int teleopFuelLow = default, int teleopFuelHigh = default, int teleopRotorPoints = default, bool kPaRankingPointAchieved = default, int teleopTakeoffPoints = default, int kPaBonusPoints = default, int rotorBonusPoints = default, bool rotor1Engaged = default, bool rotor2Engaged = default, bool rotor3Engaged = default, bool rotor4Engaged = default, bool rotorRankingPointAchieved = default, int techFoulCount = default, int foulCount = default, string? touchpadNear = default, string? touchpadMiddle = default, string? touchpadFar = default) : IValidatableObject
{
    /// <summary>
    /// Defines Robot1Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot1AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings]
    public enum Robot1AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None
    }

    /// <summary>
    /// Gets or Sets Robot1Auto
    /// </summary>

    [JsonPropertyName("robot1Auto")]
    public Robot1AutoEnum? Robot1Auto { get; set; } = robot1Auto;
    /// <summary>
    /// Defines Robot2Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot2AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings]
    public enum Robot2AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None
    }

    /// <summary>
    /// Gets or Sets Robot2Auto
    /// </summary>

    [JsonPropertyName("robot2Auto")]
    public Robot2AutoEnum? Robot2Auto { get; set; } = robot2Auto;
    /// <summary>
    /// Defines Robot3Auto
    /// </summary>
    [JsonConverter(typeof(JsonStringEnumConverter<Robot3AutoEnum>)), Microsoft.Extensions.EnumStrings.EnumStrings]
    public enum Robot3AutoEnum
    {
        /// <summary>
        /// Enum Unknown for value: Unknown
        /// </summary>
        [EnumMember(Value = "Unknown")]
        Unknown,

        /// <summary>
        /// Enum Mobility for value: Mobility
        /// </summary>
        [EnumMember(Value = "Mobility")]
        Mobility,

        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None
    }

    /// <summary>
    /// Gets or Sets Robot3Auto
    /// </summary>

    [JsonPropertyName("robot3Auto")]
    public Robot3AutoEnum? Robot3Auto { get; set; } = robot3Auto;

    /// <summary>
    /// Gets or Sets AutoPoints
    /// </summary>

    [JsonPropertyName("autoPoints")]
    public int AutoPoints { get; set; } = autoPoints;

    /// <summary>
    /// Gets or Sets TeleopPoints
    /// </summary>

    [JsonPropertyName("teleopPoints")]
    public int TeleopPoints { get; set; } = teleopPoints;

    /// <summary>
    /// Gets or Sets FoulPoints
    /// </summary>

    [JsonPropertyName("foulPoints")]
    public int FoulPoints { get; set; } = foulPoints;

    /// <summary>
    /// Gets or Sets AdjustPoints
    /// </summary>

    [JsonPropertyName("adjustPoints")]
    public int AdjustPoints { get; set; } = adjustPoints;

    /// <summary>
    /// Gets or Sets TotalPoints
    /// </summary>

    [JsonPropertyName("totalPoints")]
    public int TotalPoints { get; set; } = totalPoints;

    /// <summary>
    /// Gets or Sets Rotor1Auto
    /// </summary>

    [JsonPropertyName("rotor1Auto")]
    public bool Rotor1Auto { get; set; } = rotor1Auto;

    /// <summary>
    /// Gets or Sets Rotor2Auto
    /// </summary>

    [JsonPropertyName("rotor2Auto")]
    public bool Rotor2Auto { get; set; } = rotor2Auto;

    /// <summary>
    /// Gets or Sets AutoFuelLow
    /// </summary>

    [JsonPropertyName("autoFuelLow")]
    public int AutoFuelLow { get; set; } = autoFuelLow;

    /// <summary>
    /// Gets or Sets AutoFuelHigh
    /// </summary>

    [JsonPropertyName("autoFuelHigh")]
    public int AutoFuelHigh { get; set; } = autoFuelHigh;

    /// <summary>
    /// Gets or Sets AutoMobilityPoints
    /// </summary>

    [JsonPropertyName("autoMobilityPoints")]
    public int AutoMobilityPoints { get; set; } = autoMobilityPoints;

    /// <summary>
    /// Gets or Sets AutoRotorPoints
    /// </summary>

    [JsonPropertyName("autoRotorPoints")]
    public int AutoRotorPoints { get; set; } = autoRotorPoints;

    /// <summary>
    /// Gets or Sets AutoFuelPoints
    /// </summary>

    [JsonPropertyName("autoFuelPoints")]
    public int AutoFuelPoints { get; set; } = autoFuelPoints;

    /// <summary>
    /// Gets or Sets TeleopFuelPoints
    /// </summary>

    [JsonPropertyName("teleopFuelPoints")]
    public int TeleopFuelPoints { get; set; } = teleopFuelPoints;

    /// <summary>
    /// Gets or Sets TeleopFuelLow
    /// </summary>

    [JsonPropertyName("teleopFuelLow")]
    public int TeleopFuelLow { get; set; } = teleopFuelLow;

    /// <summary>
    /// Gets or Sets TeleopFuelHigh
    /// </summary>

    [JsonPropertyName("teleopFuelHigh")]
    public int TeleopFuelHigh { get; set; } = teleopFuelHigh;

    /// <summary>
    /// Gets or Sets TeleopRotorPoints
    /// </summary>

    [JsonPropertyName("teleopRotorPoints")]
    public int TeleopRotorPoints { get; set; } = teleopRotorPoints;

    /// <summary>
    /// Gets or Sets KPaRankingPointAchieved
    /// </summary>

    [JsonPropertyName("kPaRankingPointAchieved")]
    public bool KPaRankingPointAchieved { get; set; } = kPaRankingPointAchieved;

    /// <summary>
    /// Gets or Sets TeleopTakeoffPoints
    /// </summary>

    [JsonPropertyName("teleopTakeoffPoints")]
    public int TeleopTakeoffPoints { get; set; } = teleopTakeoffPoints;

    /// <summary>
    /// Gets or Sets KPaBonusPoints
    /// </summary>

    [JsonPropertyName("kPaBonusPoints")]
    public int KPaBonusPoints { get; set; } = kPaBonusPoints;

    /// <summary>
    /// Gets or Sets RotorBonusPoints
    /// </summary>

    [JsonPropertyName("rotorBonusPoints")]
    public int RotorBonusPoints { get; set; } = rotorBonusPoints;

    /// <summary>
    /// Gets or Sets Rotor1Engaged
    /// </summary>

    [JsonPropertyName("rotor1Engaged")]
    public bool Rotor1Engaged { get; set; } = rotor1Engaged;

    /// <summary>
    /// Gets or Sets Rotor2Engaged
    /// </summary>

    [JsonPropertyName("rotor2Engaged")]
    public bool Rotor2Engaged { get; set; } = rotor2Engaged;

    /// <summary>
    /// Gets or Sets Rotor3Engaged
    /// </summary>

    [JsonPropertyName("rotor3Engaged")]
    public bool Rotor3Engaged { get; set; } = rotor3Engaged;

    /// <summary>
    /// Gets or Sets Rotor4Engaged
    /// </summary>

    [JsonPropertyName("rotor4Engaged")]
    public bool Rotor4Engaged { get; set; } = rotor4Engaged;

    /// <summary>
    /// Gets or Sets RotorRankingPointAchieved
    /// </summary>

    [JsonPropertyName("rotorRankingPointAchieved")]
    public bool RotorRankingPointAchieved { get; set; } = rotorRankingPointAchieved;

    /// <summary>
    /// Gets or Sets TechFoulCount
    /// </summary>

    [JsonPropertyName("techFoulCount")]
    public int TechFoulCount { get; set; } = techFoulCount;

    /// <summary>
    /// Gets or Sets FoulCount
    /// </summary>

    [JsonPropertyName("foulCount")]
    public int FoulCount { get; set; } = foulCount;

    /// <summary>
    /// Gets or Sets TouchpadNear
    /// </summary>

    [JsonPropertyName("touchpadNear")]
    public string TouchpadNear { get; set; } = touchpadNear;

    /// <summary>
    /// Gets or Sets TouchpadMiddle
    /// </summary>

    [JsonPropertyName("touchpadMiddle")]
    public string TouchpadMiddle { get; set; } = touchpadMiddle;

    /// <summary>
    /// Gets or Sets TouchpadFar
    /// </summary>

    [JsonPropertyName("touchpadFar")]
    public string TouchpadFar { get; set; } = touchpadFar;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        StringBuilder sb = new();
        sb.AppendLine("class MatchScoreBreakdown2017Alliance {");
        sb.Append("  AutoPoints: ").AppendLine(AutoPoints.ToString());
        sb.Append("  TeleopPoints: ").AppendLine(TeleopPoints.ToString());
        sb.Append("  FoulPoints: ").AppendLine(FoulPoints.ToString());
        sb.Append("  AdjustPoints: ").AppendLine(AdjustPoints.ToString());
        sb.Append("  TotalPoints: ").AppendLine(TotalPoints.ToString());
        sb.Append("  Robot1Auto: ").AppendLine(Robot1Auto.ToString());
        sb.Append("  Robot2Auto: ").AppendLine(Robot2Auto.ToString());
        sb.Append("  Robot3Auto: ").AppendLine(Robot3Auto.ToString());
        sb.Append("  Rotor1Auto: ").AppendLine(Rotor1Auto.ToString());
        sb.Append("  Rotor2Auto: ").AppendLine(Rotor2Auto.ToString());
        sb.Append("  AutoFuelLow: ").AppendLine(AutoFuelLow.ToString());
        sb.Append("  AutoFuelHigh: ").AppendLine(AutoFuelHigh.ToString());
        sb.Append("  AutoMobilityPoints: ").AppendLine(AutoMobilityPoints.ToString());
        sb.Append("  AutoRotorPoints: ").AppendLine(AutoRotorPoints.ToString());
        sb.Append("  AutoFuelPoints: ").AppendLine(AutoFuelPoints.ToString());
        sb.Append("  TeleopFuelPoints: ").AppendLine(TeleopFuelPoints.ToString());
        sb.Append("  TeleopFuelLow: ").AppendLine(TeleopFuelLow.ToString());
        sb.Append("  TeleopFuelHigh: ").AppendLine(TeleopFuelHigh.ToString());
        sb.Append("  TeleopRotorPoints: ").AppendLine(TeleopRotorPoints.ToString());
        sb.Append("  KPaRankingPointAchieved: ").AppendLine(KPaRankingPointAchieved.ToString());
        sb.Append("  TeleopTakeoffPoints: ").AppendLine(TeleopTakeoffPoints.ToString());
        sb.Append("  KPaBonusPoints: ").AppendLine(KPaBonusPoints.ToString());
        sb.Append("  RotorBonusPoints: ").AppendLine(RotorBonusPoints.ToString());
        sb.Append("  Rotor1Engaged: ").AppendLine(Rotor1Engaged.ToString());
        sb.Append("  Rotor2Engaged: ").AppendLine(Rotor2Engaged.ToString());
        sb.Append("  Rotor3Engaged: ").AppendLine(Rotor3Engaged.ToString());
        sb.Append("  Rotor4Engaged: ").AppendLine(Rotor4Engaged.ToString());
        sb.Append("  RotorRankingPointAchieved: ").AppendLine(RotorRankingPointAchieved.ToString());
        sb.Append("  TechFoulCount: ").AppendLine(TechFoulCount.ToString());
        sb.Append("  FoulCount: ").AppendLine(FoulCount.ToString());
        sb.Append("  TouchpadNear: ").AppendLine(TouchpadNear.ToString());
        sb.Append("  TouchpadMiddle: ").AppendLine(TouchpadMiddle.ToString());
        sb.Append("  TouchpadFar: ").AppendLine(TouchpadFar.ToString());
        sb.AppendLine("}");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return System.Text.Json.JsonSerializer.Serialize(this);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
