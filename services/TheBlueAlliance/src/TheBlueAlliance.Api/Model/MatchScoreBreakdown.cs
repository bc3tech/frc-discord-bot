/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Model;

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null.
/// </summary>
[JsonConverter(typeof(MatchScoreBreakdownConverter))]
public partial class MatchScoreBreakdown : AbstractOpenAPISchema, IValidatableObject
{
    public override string SchemaType { get; } = OneOf;
    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class.
    /// </summary>
    public MatchScoreBreakdown()
    {
        this.IsNullable = true;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2015" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2015.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2015 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2016" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2016.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2016 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2017" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2017.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2017 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2018" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2018.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2018 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2019" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2019.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2019 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2020" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2020.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2020 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2022" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2022.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2022 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2023" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2023.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2023 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="MatchScoreBreakdown" /> class
    /// with the <see cref="MatchScoreBreakdown2024" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of MatchScoreBreakdown2024.</param>
    public MatchScoreBreakdown(MatchScoreBreakdown2024 actualInstance)
    {
        this.IsNullable = true;
        this.ActualInstance = actualInstance;
    }

    private object _actualInstance;

    /// <summary>
    /// Gets or Sets ActualInstance
    /// </summary>
    public override object ActualInstance
    {
        get
        {
            return _actualInstance;
        }
        set
        {
            if (value.GetType() == typeof(MatchScoreBreakdown2015))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2016))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2017))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2018))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2019))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2020))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2022))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2023))
            {
                this._actualInstance = value;
            }
            else if (value.GetType() == typeof(MatchScoreBreakdown2024))
            {
                this._actualInstance = value;
            }
            else
            {
                throw new ArgumentException("Invalid instance found. Must be the following types: MatchScoreBreakdown2015, MatchScoreBreakdown2016, MatchScoreBreakdown2017, MatchScoreBreakdown2018, MatchScoreBreakdown2019, MatchScoreBreakdown2020, MatchScoreBreakdown2022, MatchScoreBreakdown2023, MatchScoreBreakdown2024");
            }
        }
    }

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown`. If the actual instance is not `MatchScoreBreakdown`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown</returns>
    public T GetMatchScoreBreakdown<T>() => (T)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2015`. If the actual instance is not `MatchScoreBreakdown2015`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2015</returns>
    public MatchScoreBreakdown2015 GetMatchScoreBreakdown2015() => (MatchScoreBreakdown2015)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2016`. If the actual instance is not `MatchScoreBreakdown2016`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2016</returns>
    public MatchScoreBreakdown2016 GetMatchScoreBreakdown2016() => (MatchScoreBreakdown2016)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2017`. If the actual instance is not `MatchScoreBreakdown2017`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2017</returns>
    public MatchScoreBreakdown2017 GetMatchScoreBreakdown2017() => (MatchScoreBreakdown2017)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2018`. If the actual instance is not `MatchScoreBreakdown2018`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2018</returns>
    public MatchScoreBreakdown2018 GetMatchScoreBreakdown2018() => (MatchScoreBreakdown2018)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2019`. If the actual instance is not `MatchScoreBreakdown2019`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2019</returns>
    public MatchScoreBreakdown2019 GetMatchScoreBreakdown2019() => (MatchScoreBreakdown2019)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2020`. If the actual instance is not `MatchScoreBreakdown2020`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2020</returns>
    public MatchScoreBreakdown2020 GetMatchScoreBreakdown2020() => (MatchScoreBreakdown2020)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2022`. If the actual instance is not `MatchScoreBreakdown2022`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2022</returns>
    public MatchScoreBreakdown2022 GetMatchScoreBreakdown2022() => (MatchScoreBreakdown2022)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2023`. If the actual instance is not `MatchScoreBreakdown2023`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2023</returns>
    public MatchScoreBreakdown2023 GetMatchScoreBreakdown2023() => (MatchScoreBreakdown2023)this.ActualInstance;

    /// <summary>
    /// Get the actual instance of `MatchScoreBreakdown2024`. If the actual instance is not `MatchScoreBreakdown2024`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of MatchScoreBreakdown2024</returns>
    public MatchScoreBreakdown2024 GetMatchScoreBreakdown2024() => (MatchScoreBreakdown2024)this.ActualInstance;

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString() => new StringBuilder()
            .AppendLine("class MatchScoreBreakdown {")
            .Append("  ActualInstance: ")
            .AppendLine(this.ActualInstance.ToString())
            .AppendLine("}").ToString();

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson() => JsonSerializer.Serialize(this.ActualInstance, SerializerSettings);

    /// <summary>
    ///  Custom JSON serializer
    /// </summary>
    new private static readonly JsonSerializerOptions SerializerSettings = new()
    {
        // OpenAPI generated types generally hide default constructors.
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        DictionaryKeyPolicy = JsonNamingPolicy.CamelCase,
        UnmappedMemberHandling = JsonUnmappedMemberHandling.Disallow
    };

    /// <summary>
    /// Converts the JSON string into an instance of MatchScoreBreakdown
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of MatchScoreBreakdown</returns>
    public static MatchScoreBreakdown FromJson(string jsonString)
    {
        MatchScoreBreakdown? newMatchScoreBreakdown = null;

        if (string.IsNullOrEmpty(jsonString))
        {
            return newMatchScoreBreakdown;
        }

        int match = 0;
        List<string> matchedTypes = [];

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2015).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2015>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2015>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2015");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2015: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2016).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2016>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2016>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2016");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2016: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2017).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2017>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2017>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2017");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2017: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2018).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2018>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2018>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2018");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2018: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2019).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2019>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2019>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2019");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2019: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2020).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2020>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2020>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2020");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2020: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2022).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2022>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2022>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2022");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2022: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2023).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2023>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2023>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2023");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2023: {1}", jsonString, exception.ToString()));
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(MatchScoreBreakdown2024).GetProperty("AdditionalProperties") is null)
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2024>(jsonString, SerializerSettings));
            }
            else
            {
                newMatchScoreBreakdown = new MatchScoreBreakdown(JsonSerializer.Deserialize<MatchScoreBreakdown2024>(jsonString, AdditionalPropertiesSerializerSettings));
            }

            matchedTypes.Add("MatchScoreBreakdown2024");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MatchScoreBreakdown2024: {1}", jsonString, exception.ToString()));
        }

        if (match is 0)
        {
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }
        else if (match > 1)
        {
            throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
        }

        // deserialization is considered successful at this point if no exception has been thrown.
        return newMatchScoreBreakdown;
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }
}
internal sealed class MatchScoreBreakdownConverter : JsonConverter<MatchScoreBreakdown>
{
    public override MatchScoreBreakdown? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType is not JsonTokenType.None)
        {
            using JsonDocument doc = JsonDocument.ParseValue(ref reader);
            string jsonString = doc.RootElement.GetRawText();
            return MatchScoreBreakdown.FromJson(jsonString);
        }

        return null;
    }

    public override void Write(Utf8JsonWriter writer, MatchScoreBreakdown value, JsonSerializerOptions options) => writer.WriteRawValue((string)typeof(MatchScoreBreakdown).GetMethod("ToJson")!.Invoke(value, null)!);
}
