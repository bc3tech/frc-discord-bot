/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace TheBlueAlliance.Api.Api;

using System;
using System.Collections.Generic;
using System.Net.Http;

using TheBlueAlliance.Api.Client;
using TheBlueAlliance.Api.Model;

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IInsightApiAsync : IApiAccessor
{
    #region Asynchronous Operations
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of &#x60;LeaderboardInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </remarks>
    /// <exception cref="TheBlueAlliance.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;LeaderboardInsight&gt;</returns>
    Task<List<LeaderboardInsight>> GetInsightsLeaderboardsYearAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of &#x60;LeaderboardInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </remarks>
    /// <exception cref="TheBlueAlliance.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;LeaderboardInsight&gt;)</returns>
    Task<ApiResponse<List<LeaderboardInsight>>> GetInsightsLeaderboardsYearWithHttpInfoAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of &#x60;NotablesInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </remarks>
    /// <exception cref="TheBlueAlliance.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;NotablesInsight&gt;</returns>
    Task<List<NotablesInsight>> GetInsightsNotablesYearAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a list of &#x60;NotablesInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </remarks>
    /// <exception cref="TheBlueAlliance.Api.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;NotablesInsight&gt;)</returns>
    Task<ApiResponse<List<NotablesInsight>>> GetInsightsNotablesYearWithHttpInfoAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default);
    #endregion Asynchronous Operations
}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IInsightApi : IInsightApiAsync
{

}

/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class InsightApi : DefaultApi, IInsightApi
{
    public InsightApi(IHttpClientFactory clientFactory, Configuration configuration, HttpClientHandler? handler = null) : base(clientFactory, configuration, handler)
    {
    }

    public InsightApi(IAsynchronousClient asyncClient, IReadableConfiguration configuration) : base(asyncClient, configuration)
    {
    }

    /// <summary>
    ///  Gets a list of &#x60;LeaderboardInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;LeaderboardInsight&gt;</returns>
    public async Task<List<LeaderboardInsight>> GetInsightsLeaderboardsYearAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default)
    {
        ApiResponse<List<LeaderboardInsight>> localVarResponse = await GetInsightsLeaderboardsYearWithHttpInfoAsync(year, ifNoneMatch, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of &#x60;LeaderboardInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;LeaderboardInsight&gt;)</returns>
    public async Task<ApiResponse<List<LeaderboardInsight>>> GetInsightsLeaderboardsYearWithHttpInfoAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifNoneMatch is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        var localVarResponse = await this.AsynchronousClient.GetAsync<List<LeaderboardInsight>>("/insights/leaderboards/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception _exception = this.ExceptionFactory("GetInsightsLeaderboardsYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }

    /// <summary>
    ///  Gets a list of &#x60;NotablesInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;NotablesInsight&gt;</returns>
    public async Task<List<NotablesInsight>> GetInsightsNotablesYearAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default)
    {
        ApiResponse<List<NotablesInsight>> localVarResponse = await GetInsightsNotablesYearWithHttpInfoAsync(year, ifNoneMatch, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    ///  Gets a list of &#x60;NotablesInsight&#x60; objects from a specific year. Use year&#x3D;0 for overall.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year">Competition Year (or Season). Must be 4 digits.</param>
    /// <param name="ifNoneMatch">Value of the &#x60;ETag&#x60; header in the most recently cached response by the client. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;NotablesInsight&gt;)</returns>
    public async Task<ApiResponse<List<NotablesInsight>>> GetInsightsNotablesYearWithHttpInfoAsync(int year, string? ifNoneMatch = default, CancellationToken cancellationToken = default)
    {

        RequestOptions localVarRequestOptions = new();

        string[] _contentTypes = [];

        // to determine the Accept header
        string[] _accepts = [
            "application/json"
        ];

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
        }

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
        }

        localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
        if (ifNoneMatch is not null)
        {
            localVarRequestOptions.HeaderParameters.Add("If-None-Match", ClientUtils.ParameterToString(ifNoneMatch)); // header parameter
        }

        // authentication (apiKey) required
        if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key")))
        {
            localVarRequestOptions.HeaderParameters.Add("X-TBA-Auth-Key", this.Configuration.GetApiKeyWithPrefix("X-TBA-Auth-Key"));
        }

        // make the HTTP request

        var localVarResponse = await this.AsynchronousClient.GetAsync<List<NotablesInsight>>("/insights/notables/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

        if (this.ExceptionFactory is not null)
        {
            Exception _exception = this.ExceptionFactory("GetInsightsNotablesYear", localVarResponse);
            if (_exception is not null)
            {
                throw _exception;
            }
        }

        return localVarResponse;
    }
}
