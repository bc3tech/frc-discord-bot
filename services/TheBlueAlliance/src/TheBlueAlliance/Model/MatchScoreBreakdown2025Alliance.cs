/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

    namespace TheBlueAlliance.Model;
    
    using System.Runtime.Serialization;
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
  using System.Collections.ObjectModel;
    
    /// <summary>
/// MatchScoreBreakdown2025Alliance
/// </summary>

  public partial record MatchScoreBreakdown2025Alliance
  {
            /// <summary>
  /// Defines AutoLineRobot1
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<AutoLineRobot1Enum>))]
  public enum AutoLineRobot1Enum
  {
        /// <summary>
        /// Enum No for value: No
        /// </summary>
        [EnumMember(Value = "No")]
        No = 1,
          
        /// <summary>
        /// Enum Yes for value: Yes
        /// </summary>
        [EnumMember(Value = "Yes")]
        Yes = 2
  }
    
    /// <summary>
    /// Returns a <see cref="AutoLineRobot1Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static AutoLineRobot1Enum? AutoLineRobot1EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "No" => AutoLineRobot1Enum.No,
            "Yes" => AutoLineRobot1Enum.Yes,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets AutoLineRobot1
        /// </summary>
          
            [JsonPropertyName("autoLineRobot1")]
            public AutoLineRobot1Enum? AutoLineRobot1 { get; set; }
            /// <summary>
  /// Defines AutoLineRobot2
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<AutoLineRobot2Enum>))]
  public enum AutoLineRobot2Enum
  {
        /// <summary>
        /// Enum No for value: No
        /// </summary>
        [EnumMember(Value = "No")]
        No = 1,
          
        /// <summary>
        /// Enum Yes for value: Yes
        /// </summary>
        [EnumMember(Value = "Yes")]
        Yes = 2
  }
    
    /// <summary>
    /// Returns a <see cref="AutoLineRobot2Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static AutoLineRobot2Enum? AutoLineRobot2EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "No" => AutoLineRobot2Enum.No,
            "Yes" => AutoLineRobot2Enum.Yes,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets AutoLineRobot2
        /// </summary>
          
            [JsonPropertyName("autoLineRobot2")]
            public AutoLineRobot2Enum? AutoLineRobot2 { get; set; }
            /// <summary>
  /// Defines AutoLineRobot3
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<AutoLineRobot3Enum>))]
  public enum AutoLineRobot3Enum
  {
        /// <summary>
        /// Enum No for value: No
        /// </summary>
        [EnumMember(Value = "No")]
        No = 1,
          
        /// <summary>
        /// Enum Yes for value: Yes
        /// </summary>
        [EnumMember(Value = "Yes")]
        Yes = 2
  }
    
    /// <summary>
    /// Returns a <see cref="AutoLineRobot3Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static AutoLineRobot3Enum? AutoLineRobot3EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "No" => AutoLineRobot3Enum.No,
            "Yes" => AutoLineRobot3Enum.Yes,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets AutoLineRobot3
        /// </summary>
          
            [JsonPropertyName("autoLineRobot3")]
            public AutoLineRobot3Enum? AutoLineRobot3 { get; set; }
            /// <summary>
  /// Defines EndGameRobot1
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<EndGameRobot1Enum>))]
  public enum EndGameRobot1Enum
  {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 1,
          
        /// <summary>
        /// Enum Parked for value: Parked
        /// </summary>
        [EnumMember(Value = "Parked")]
        Parked = 2,
          
        /// <summary>
        /// Enum ShallowCage for value: ShallowCage
        /// </summary>
        [EnumMember(Value = "ShallowCage")]
        ShallowCage = 3,
          
        /// <summary>
        /// Enum DeepCage for value: DeepCage
        /// </summary>
        [EnumMember(Value = "DeepCage")]
        DeepCage = 4
  }
    
    /// <summary>
    /// Returns a <see cref="EndGameRobot1Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EndGameRobot1Enum? EndGameRobot1EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "None" => EndGameRobot1Enum.None,
            "Parked" => EndGameRobot1Enum.Parked,
            "ShallowCage" => EndGameRobot1Enum.ShallowCage,
            "DeepCage" => EndGameRobot1Enum.DeepCage,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets EndGameRobot1
        /// </summary>
          
            [JsonPropertyName("endGameRobot1")]
            public EndGameRobot1Enum? EndGameRobot1 { get; set; }
            /// <summary>
  /// Defines EndGameRobot2
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<EndGameRobot2Enum>))]
  public enum EndGameRobot2Enum
  {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 1,
          
        /// <summary>
        /// Enum Parked for value: Parked
        /// </summary>
        [EnumMember(Value = "Parked")]
        Parked = 2,
          
        /// <summary>
        /// Enum ShallowCage for value: ShallowCage
        /// </summary>
        [EnumMember(Value = "ShallowCage")]
        ShallowCage = 3,
          
        /// <summary>
        /// Enum DeepCage for value: DeepCage
        /// </summary>
        [EnumMember(Value = "DeepCage")]
        DeepCage = 4
  }
    
    /// <summary>
    /// Returns a <see cref="EndGameRobot2Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EndGameRobot2Enum? EndGameRobot2EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "None" => EndGameRobot2Enum.None,
            "Parked" => EndGameRobot2Enum.Parked,
            "ShallowCage" => EndGameRobot2Enum.ShallowCage,
            "DeepCage" => EndGameRobot2Enum.DeepCage,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets EndGameRobot2
        /// </summary>
          
            [JsonPropertyName("endGameRobot2")]
            public EndGameRobot2Enum? EndGameRobot2 { get; set; }
            /// <summary>
  /// Defines EndGameRobot3
  /// </summary>
  [Microsoft.Extensions.EnumStrings.EnumStrings(ExtensionNamespace = "TheBlueAlliance.Model.MatchScoreBreakdown2025AllianceExtensions", ExtensionClassModifiers ="public static")]
  [JsonConverter(typeof(JsonStringEnumConverterWithEnumMemberSupport<EndGameRobot3Enum>))]
  public enum EndGameRobot3Enum
  {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        [EnumMember(Value = "None")]
        None = 1,
          
        /// <summary>
        /// Enum Parked for value: Parked
        /// </summary>
        [EnumMember(Value = "Parked")]
        Parked = 2,
          
        /// <summary>
        /// Enum ShallowCage for value: ShallowCage
        /// </summary>
        [EnumMember(Value = "ShallowCage")]
        ShallowCage = 3,
          
        /// <summary>
        /// Enum DeepCage for value: DeepCage
        /// </summary>
        [EnumMember(Value = "DeepCage")]
        DeepCage = 4
  }
    
    /// <summary>
    /// Returns a <see cref="EndGameRobot3Enum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EndGameRobot3Enum? EndGameRobot3EnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "None" => EndGameRobot3Enum.None,
            "Parked" => EndGameRobot3Enum.Parked,
            "ShallowCage" => EndGameRobot3Enum.ShallowCage,
            "DeepCage" => EndGameRobot3Enum.DeepCage,
        _ => null
      };
    }

        
        /// <summary>
        /// Gets or Sets EndGameRobot3
        /// </summary>
          
            [JsonPropertyName("endGameRobot3")]
            public EndGameRobot3Enum? EndGameRobot3 { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchScoreBreakdown2025Alliance" /> class.
        /// </summary>
            /// <param name="adjustPoints">adjustPoints.</param>
            /// <param name="algaePoints">algaePoints.</param>
            /// <param name="autoBonusAchieved">autoBonusAchieved.</param>
            /// <param name="autoCoralCount">autoCoralCount.</param>
            /// <param name="autoCoralPoints">autoCoralPoints.</param>
            /// <param name="autoLineRobot1">autoLineRobot1.</param>
            /// <param name="autoLineRobot2">autoLineRobot2.</param>
            /// <param name="autoLineRobot3">autoLineRobot3.</param>
            /// <param name="autoMobilityPoints">autoMobilityPoints.</param>
            /// <param name="autoPoints">autoPoints.</param>
            /// <param name="autoReef">autoReef.</param>
            /// <param name="bargeBonusAchieved">bargeBonusAchieved.</param>
            /// <param name="coopertitionCriteriaMet">coopertitionCriteriaMet.</param>
            /// <param name="coralBonusAchieved">coralBonusAchieved.</param>
            /// <param name="endGameBargePoints">endGameBargePoints.</param>
            /// <param name="endGameRobot1">endGameRobot1.</param>
            /// <param name="endGameRobot2">endGameRobot2.</param>
            /// <param name="endGameRobot3">endGameRobot3.</param>
            /// <param name="foulCount">foulCount.</param>
            /// <param name="foulPoints">foulPoints.</param>
            /// <param name="g206Penalty">g206Penalty.</param>
            /// <param name="g408Penalty">g408Penalty.</param>
            /// <param name="g424Penalty">g424Penalty.</param>
            /// <param name="netAlgaeCount">netAlgaeCount.</param>
            /// <param name="rp">rp.</param>
            /// <param name="techFoulCount">techFoulCount.</param>
            /// <param name="teleopCoralCount">teleopCoralCount.</param>
            /// <param name="teleopCoralPoints">teleopCoralPoints.</param>
            /// <param name="teleopPoints">teleopPoints.</param>
            /// <param name="teleopReef">teleopReef.</param>
            /// <param name="totalPoints">totalPoints.</param>
            /// <param name="wallAlgaeCount">wallAlgaeCount.</param>
        public MatchScoreBreakdown2025Alliance(int? adjustPoints = default, int? algaePoints = default, bool? autoBonusAchieved = default, int? autoCoralCount = default, int? autoCoralPoints = default, AutoLineRobot1Enum? autoLineRobot1 = default, AutoLineRobot2Enum? autoLineRobot2 = default, AutoLineRobot3Enum? autoLineRobot3 = default, int? autoMobilityPoints = default, int? autoPoints = default, MatchScoreBreakdown2025AllianceAutoReef? autoReef = default, bool? bargeBonusAchieved = default, bool? coopertitionCriteriaMet = default, bool? coralBonusAchieved = default, int? endGameBargePoints = default, EndGameRobot1Enum? endGameRobot1 = default, EndGameRobot2Enum? endGameRobot2 = default, EndGameRobot3Enum? endGameRobot3 = default, int? foulCount = default, int? foulPoints = default, bool? g206Penalty = default, bool? g408Penalty = default, bool? g424Penalty = default, int? netAlgaeCount = default, int? rp = default, int? techFoulCount = default, int? teleopCoralCount = default, int? teleopCoralPoints = default, int? teleopPoints = default, MatchScoreBreakdown2025AllianceAutoReef? teleopReef = default, int? totalPoints = default, int? wallAlgaeCount = default)
        {
                      this.AdjustPoints = adjustPoints;
                      this.AlgaePoints = algaePoints;
                      this.AutoBonusAchieved = autoBonusAchieved;
                      this.AutoCoralCount = autoCoralCount;
                      this.AutoCoralPoints = autoCoralPoints;
                      this.AutoLineRobot1 = autoLineRobot1;
                      this.AutoLineRobot2 = autoLineRobot2;
                      this.AutoLineRobot3 = autoLineRobot3;
                      this.AutoMobilityPoints = autoMobilityPoints;
                      this.AutoPoints = autoPoints;
                      this.AutoReef = autoReef;
                      this.BargeBonusAchieved = bargeBonusAchieved;
                      this.CoopertitionCriteriaMet = coopertitionCriteriaMet;
                      this.CoralBonusAchieved = coralBonusAchieved;
                      this.EndGameBargePoints = endGameBargePoints;
                      this.EndGameRobot1 = endGameRobot1;
                      this.EndGameRobot2 = endGameRobot2;
                      this.EndGameRobot3 = endGameRobot3;
                      this.FoulCount = foulCount;
                      this.FoulPoints = foulPoints;
                      this.G206Penalty = g206Penalty;
                      this.G408Penalty = g408Penalty;
                      this.G424Penalty = g424Penalty;
                      this.NetAlgaeCount = netAlgaeCount;
                      this.Rp = rp;
                      this.TechFoulCount = techFoulCount;
                      this.TeleopCoralCount = teleopCoralCount;
                      this.TeleopCoralPoints = teleopCoralPoints;
                      this.TeleopPoints = teleopPoints;
                      this.TeleopReef = teleopReef;
                      this.TotalPoints = totalPoints;
                      this.WallAlgaeCount = wallAlgaeCount;
        }
        
              /// <summary>
              /// Gets or Sets AdjustPoints
              /// </summary>
                
                  [JsonPropertyName("adjustPoints")]
                  public int? AdjustPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets AlgaePoints
              /// </summary>
                
                  [JsonPropertyName("algaePoints")]
                  public int? AlgaePoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoBonusAchieved
              /// </summary>
                
                  [JsonPropertyName("autoBonusAchieved")]
                  public bool? AutoBonusAchieved { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoCoralCount
              /// </summary>
                
                  [JsonPropertyName("autoCoralCount")]
                  public int? AutoCoralCount { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoCoralPoints
              /// </summary>
                
                  [JsonPropertyName("autoCoralPoints")]
                  public int? AutoCoralPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoMobilityPoints
              /// </summary>
                
                  [JsonPropertyName("autoMobilityPoints")]
                  public int? AutoMobilityPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoPoints
              /// </summary>
                
                  [JsonPropertyName("autoPoints")]
                  public int? AutoPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets AutoReef
              /// </summary>
                
                  [JsonPropertyName("autoReef")]
                  public MatchScoreBreakdown2025AllianceAutoReef? AutoReef { get; set; }
                  
              /// <summary>
              /// Gets or Sets BargeBonusAchieved
              /// </summary>
                
                  [JsonPropertyName("bargeBonusAchieved")]
                  public bool? BargeBonusAchieved { get; set; }
                  
              /// <summary>
              /// Gets or Sets CoopertitionCriteriaMet
              /// </summary>
                
                  [JsonPropertyName("coopertitionCriteriaMet")]
                  public bool? CoopertitionCriteriaMet { get; set; }
                  
              /// <summary>
              /// Gets or Sets CoralBonusAchieved
              /// </summary>
                
                  [JsonPropertyName("coralBonusAchieved")]
                  public bool? CoralBonusAchieved { get; set; }
                  
              /// <summary>
              /// Gets or Sets EndGameBargePoints
              /// </summary>
                
                  [JsonPropertyName("endGameBargePoints")]
                  public int? EndGameBargePoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets FoulCount
              /// </summary>
                
                  [JsonPropertyName("foulCount")]
                  public int? FoulCount { get; set; }
                  
              /// <summary>
              /// Gets or Sets FoulPoints
              /// </summary>
                
                  [JsonPropertyName("foulPoints")]
                  public int? FoulPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets G206Penalty
              /// </summary>
                
                  [JsonPropertyName("g206Penalty")]
                  public bool? G206Penalty { get; set; }
                  
              /// <summary>
              /// Gets or Sets G408Penalty
              /// </summary>
                
                  [JsonPropertyName("g408Penalty")]
                  public bool? G408Penalty { get; set; }
                  
              /// <summary>
              /// Gets or Sets G424Penalty
              /// </summary>
                
                  [JsonPropertyName("g424Penalty")]
                  public bool? G424Penalty { get; set; }
                  
              /// <summary>
              /// Gets or Sets NetAlgaeCount
              /// </summary>
                
                  [JsonPropertyName("netAlgaeCount")]
                  public int? NetAlgaeCount { get; set; }
                  
              /// <summary>
              /// Gets or Sets Rp
              /// </summary>
                
                  [JsonPropertyName("rp")]
                  public int? Rp { get; set; }
                  
              /// <summary>
              /// Gets or Sets TechFoulCount
              /// </summary>
                
                  [JsonPropertyName("techFoulCount")]
                  public int? TechFoulCount { get; set; }
                  
              /// <summary>
              /// Gets or Sets TeleopCoralCount
              /// </summary>
                
                  [JsonPropertyName("teleopCoralCount")]
                  public int? TeleopCoralCount { get; set; }
                  
              /// <summary>
              /// Gets or Sets TeleopCoralPoints
              /// </summary>
                
                  [JsonPropertyName("teleopCoralPoints")]
                  public int? TeleopCoralPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets TeleopPoints
              /// </summary>
                
                  [JsonPropertyName("teleopPoints")]
                  public int? TeleopPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets TeleopReef
              /// </summary>
                
                  [JsonPropertyName("teleopReef")]
                  public MatchScoreBreakdown2025AllianceAutoReef? TeleopReef { get; set; }
                  
              /// <summary>
              /// Gets or Sets TotalPoints
              /// </summary>
                
                  [JsonPropertyName("totalPoints")]
                  public int? TotalPoints { get; set; }
                  
              /// <summary>
              /// Gets or Sets WallAlgaeCount
              /// </summary>
                
                  [JsonPropertyName("wallAlgaeCount")]
                  public int? WallAlgaeCount { get; set; }
                  
              /// <summary>
              /// Returns the JSON string presentation of the object
              /// </summary>
              /// <returns>JSON string presentation of the object</returns>
              public string ToJson()
              {
                return JsonSerializer.Serialize(this);
              }
            }
            
