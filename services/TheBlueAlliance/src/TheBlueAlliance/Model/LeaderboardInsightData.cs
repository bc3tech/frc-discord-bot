/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.7
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

    namespace TheBlueAlliance.Model;
    
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
  using System.Collections.ObjectModel;
    
    /// <summary>
/// LeaderboardInsightData
/// </summary>
public partial class LeaderboardInsightData
{
          /// <summary>
  /// What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
  /// </summary>
    /// <value>What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.</value>
  public enum KeyTypeEnum
  {
        /// <summary>
        /// Enum Team for value: team
        /// </summary>
        Team = 1,
          
        /// <summary>
        /// Enum Event for value: event
        /// </summary>
        Event = 2,
          
        /// <summary>
        /// Enum Match for value: match
        /// </summary>
        Match = 3
  }
    
    /// <summary>
    /// Returns a <see cref="KeyTypeEnum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    /// <exception cref="NotImplementedException"></exception>
    public static KeyTypeEnum KeyTypeEnumFromString(string value)
    {
      return value switch
      {
            "team" => KeyTypeEnum.Team,
            "event" => KeyTypeEnum.Event,
            "match" => KeyTypeEnum.Match,
        _ => throw new NotImplementedException($"Could not convert value to type KeyTypeEnum: '{value}'")
      };
    }
    
    /// <summary>
    /// Returns a <see cref="KeyTypeEnum"/>
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    public static KeyTypeEnum? KeyTypeEnumFromStringOrDefault(string value)
    {
      return value switch
      {
            "team" => KeyTypeEnum.Team,
            "event" => KeyTypeEnum.Event,
            "match" => KeyTypeEnum.Match,
        _ => null
      };
    }
    
    /// <summary>
    /// Converts the <see cref="KeyTypeEnum"/> to the json value
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
      /// <exception cref="NotImplementedException"></exception>
    public static string KeyTypeEnumToJsonValue(KeyTypeEnum value)
    {
        return value switch
        {
              KeyTypeEnum.Team => "team",
              KeyTypeEnum.Event => "event",
              KeyTypeEnum.Match => "match",
          _ => throw new NotImplementedException($"Value could not be handled: '{value}'")
        };
    }

      
      /// <summary>
      /// What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.
      /// </summary>
        /// <value>What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;.</value>
        [JsonRequired]
          [JsonPropertyName("key_type")]
          public KeyTypeEnum KeyType { get; set; }
            // yup
            /// <summary>
            /// Initializes a new instance of the <see cref="LeaderboardInsightData" /> class.
            /// </summary>
            [JsonConstructor]
            protected LeaderboardInsightData() { 
          }
          
      /// <summary>
      /// Initializes a new instance of the <see cref="LeaderboardInsightData" /> class.
      /// </summary>
          /// <param name="keyType">What type of key is used in the rankings; either &#39;team&#39;, &#39;event&#39;, or &#39;match&#39;. (required).</param>
          /// <param name="rankings">rankings (required).</param>
      public LeaderboardInsightData(KeyTypeEnum keyType, Collection<LeaderboardInsightDataRankingsInner> rankings)
      {
                    this.KeyType = keyType;
                    // to ensure "rankings" is required (not null)
                    ArgumentNullException.ThrowIfNull(rankings);
                    this.Rankings = rankings;
      }
      
            /// <summary>
            /// Gets or Sets Rankings
            /// </summary>
              [JsonRequired]
                [JsonPropertyName("rankings")]
                public Collection<LeaderboardInsightDataRankingsInner> Rankings { get; set; }
                
            /// <summary>
            /// Returns the string presentation of the object
            /// </summary>
            /// <returns>string presentation of the object</returns>
            public override string ToString()
            {
              StringBuilder sb = new();
              sb.AppendLine("class LeaderboardInsightData {");
                  sb.Append("  KeyType: ").AppendLine($"{ KeyType }");
                  sb.Append("  Rankings: ").AppendLine($"{(Rankings is null ? "[null]" : string.Join(", ", Rankings))}");
              sb.AppendLine("}");
              return sb.ToString();
            }
            
            /// <summary>
            /// Returns the JSON string presentation of the object
            /// </summary>
            /// <returns>JSON string presentation of the object</returns>
            public string ToJson()
            {
              return JsonSerializer.Serialize(this);
            }
          }
          
