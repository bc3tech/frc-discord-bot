/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

    namespace TheBlueAlliance.Model;
    
    using System.Runtime.Serialization;
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
  using System.Collections.ObjectModel;
    
    /// <summary>
/// Rank of a team in a district.
/// </summary>
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
  public partial record DistrictRanking
  {
              // yup
              /// <summary>
              /// Initializes a new instance of the <see cref="DistrictRanking" /> class.
              /// </summary>
              [JsonConstructor]
              protected DistrictRanking() { 
            }
            
        /// <summary>
        /// Initializes a new instance of the <see cref="DistrictRanking" /> class.
        /// </summary>
            /// <param name="eventPoints">List of events that contributed to the point total for the team.</param>
            /// <param name="pointTotal">Total district points for the team. (required).</param>
            /// <param name="rank">Numerical rank of the team, 1 being top rank. (required).</param>
            /// <param name="rookieBonus">Any points added to a team as a result of the rookie bonus.</param>
            /// <param name="teamKey">TBA team key for the team. (required).</param>
        public DistrictRanking(int pointTotal, int rank, string teamKey, Collection<DistrictRankingEventPointsInner>? eventPoints = default, int? rookieBonus = default)
        {
                      this.EventPoints = eventPoints;
                      this.PointTotal = pointTotal;
                      this.Rank = rank;
                      this.RookieBonus = rookieBonus;
                      // to ensure "teamKey" is required (not null)
                      ArgumentNullException.ThrowIfNull(teamKey);
                      this.TeamKey = teamKey;
        }
        
              /// <summary>
              /// List of events that contributed to the point total for the team.
              /// </summary>
              /// <value>List of events that contributed to the point total for the team.</value>
                
                  [JsonPropertyName("event_points")]
                  public Collection<DistrictRankingEventPointsInner>? EventPoints { get; set; }
                  
              /// <summary>
              /// Total district points for the team.
              /// </summary>
              /// <value>Total district points for the team.</value>
                [JsonRequired]
                  [JsonPropertyName("point_total")]
                  public int PointTotal { get; set; }
                  
              /// <summary>
              /// Numerical rank of the team, 1 being top rank.
              /// </summary>
              /// <value>Numerical rank of the team, 1 being top rank.</value>
                [JsonRequired]
                  [JsonPropertyName("rank")]
                  public int Rank { get; set; }
                  
              /// <summary>
              /// Any points added to a team as a result of the rookie bonus.
              /// </summary>
              /// <value>Any points added to a team as a result of the rookie bonus.</value>
                
                  [JsonPropertyName("rookie_bonus")]
                  public int? RookieBonus { get; set; }
                  
              /// <summary>
              /// TBA team key for the team.
              /// </summary>
              /// <value>TBA team key for the team.</value>
                [JsonRequired]
                  [JsonPropertyName("team_key")]
                  public string TeamKey { get; set; }
                  
              /// <summary>
              /// Returns the JSON string presentation of the object
              /// </summary>
              /// <returns>JSON string presentation of the object</returns>
              public string ToJson()
              {
                return JsonSerializer.Serialize(this);
              }
            }
            #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider adding the 'required' modifier or declaring as nullable.
