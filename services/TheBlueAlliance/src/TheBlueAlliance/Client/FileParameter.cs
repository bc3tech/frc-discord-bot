/*
 * The Blue Alliance API v3
 *
 * # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).
 *
 * The version of the OpenAPI document: 3.9.11
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace TheBlueAlliance.Client;

using System.IO;

/// <summary>
/// Represents a File passed to the API as a Parameter, allows using different backends for files
/// </summary>
public class FileParameter
{
    /// <summary>
    /// The filename
    /// </summary>
    public string Name { get; set; } = "no_name_provided";

    /// <summary>
    /// The content type of the file
    /// </summary>
    public string ContentType { get; set; } = "application/octet-stream";

    /// <summary>
    /// The content of the file
    /// </summary>
    public Stream Content { get; set; }

    /// <summary>
    /// Construct a FileParameter just from the contents, will extract the filename from a filestream
    /// </summary>
    /// <param name="content"> The file content </param>
    public FileParameter(Stream content)
    {
        if (content is FileStream fs)
        {
            Name = fs.Name;
        }

        Content = content;
    }

    /// <summary>
    /// Construct a FileParameter from name and content
    /// </summary>
    /// <param name="filename">The filename</param>
    /// <param name="content">The file content</param>
    public FileParameter(string filename, Stream content)
    {
        Name = filename;
        Content = content;
    }

    /// <summary>
    /// Construct a FileParameter from name and content
    /// </summary>
    /// <param name="filename">The filename</param>
    /// <param name="contentType">The content type of the file</param>
    /// <param name="content">The file content</param>
    public FileParameter(string filename, string contentType, Stream content)
    {
        Name = filename;
        ContentType = contentType;
        Content = content;
    }

    /// <summary>
    /// Implicit conversion of stream to file parameter. Useful for backwards compatibility.
    /// </summary>
    /// <param name="s">Stream to convert</param>
    /// <returns>FileParameter</returns>
    public static implicit operator FileParameter(Stream s) => new(s);
}