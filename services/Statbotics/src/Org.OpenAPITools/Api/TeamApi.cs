/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace Org.OpenAPITools.Api;

using System;
using System.Net.Http;

using Org.OpenAPITools.Client;

using Org.OpenAPITools.Model;
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface ITeamApiSync : IApiAccessor
  {
    #region Synchronous Operations
      /// <summary>
      /// Query a single team
      /// </summary>
        /// <remarks>
        /// Returns a single Team object. Requires a team number (no prefix).
        /// </remarks>
      /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="team"></param>
      /// <returns>Object</returns>
      Object? ReadTeamV3TeamTeamGet(string team);
        
        /// <summary>
        /// Query a single team
        /// </summary>
        /// <remarks>
        /// Returns a single Team object. Requires a team number (no prefix).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="team"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object?> ReadTeamV3TeamTeamGetWithHttpInfo(string team);
      /// <summary>
      /// Query multiple teams
      /// </summary>
        /// <remarks>
        /// Returns up to 1000 teams at a time. Specify limit and offset to page through results.
        /// </remarks>
      /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
      /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
      /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
      /// <param name="active">Whether the team has played in the last year. (optional)</param>
      /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
      /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
      /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
      /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
      /// <param name="offset">Offset from the first result to return. (optional)</param>
      /// <returns>List&lt;Object&gt;</returns>
      List<Object>? ReadTeamsV3TeamsGet(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default);
        
        /// <summary>
        /// Query multiple teams
        /// </summary>
        /// <remarks>
        /// Returns up to 1000 teams at a time. Specify limit and offset to page through results.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
        /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
        /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
        /// <param name="active">Whether the team has played in the last year. (optional)</param>
        /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
        /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
        /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
        /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
        /// <param name="offset">Offset from the first result to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>?> ReadTeamsV3TeamsGetWithHttpInfo(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default);
      #endregion Synchronous Operations
    }
    
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public interface ITeamApiAsync : IApiAccessor
      {
        #region Asynchronous Operations
          /// <summary>
          /// Query a single team
          /// </summary>
          /// <remarks>
          /// Returns a single Team object. Requires a team number (no prefix).
          /// </remarks>
          /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="team"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Object</returns>
          System.Threading.Tasks.Task<Object?> ReadTeamV3TeamTeamGetAsync(string team, CancellationToken cancellationToken = default);
            
            /// <summary>
            /// Query a single team
            /// </summary>
            /// <remarks>
            /// Returns a single Team object. Requires a team number (no prefix).
            /// </remarks>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
              /// <param name="team"></param>
            /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            /// <returns>Task of ApiResponse (Object)</returns>
            System.Threading.Tasks.Task<ApiResponse<Object?>> ReadTeamV3TeamTeamGetWithHttpInfoAsync(string team, CancellationToken cancellationToken = default);
          /// <summary>
          /// Query multiple teams
          /// </summary>
          /// <remarks>
          /// Returns up to 1000 teams at a time. Specify limit and offset to page through results.
          /// </remarks>
          /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
            /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
            /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
            /// <param name="active">Whether the team has played in the last year. (optional)</param>
            /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
            /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
            /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
            /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
            /// <param name="offset">Offset from the first result to return. (optional)</param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of List&lt;Object&gt;</returns>
          System.Threading.Tasks.Task<List<Object>?> ReadTeamsV3TeamsGetAsync(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default, CancellationToken cancellationToken = default);
            
            /// <summary>
            /// Query multiple teams
            /// </summary>
            /// <remarks>
            /// Returns up to 1000 teams at a time. Specify limit and offset to page through results.
            /// </remarks>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
              /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
              /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
              /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
              /// <param name="active">Whether the team has played in the last year. (optional)</param>
              /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
              /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
              /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
              /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
              /// <param name="offset">Offset from the first result to return. (optional)</param>
            /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
            System.Threading.Tasks.Task<ApiResponse<List<Object>?>> ReadTeamsV3TeamsGetWithHttpInfoAsync(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default, CancellationToken cancellationToken = default);
          #endregion Asynchronous Operations
        }
      
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public interface ITeamApi : ITeamApiSync, ITeamApiAsync { }
      
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public sealed partial class TeamApi : ITeamApi
      {
        private ExceptionFactory? _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public TeamApi() : this(basePath: default) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public TeamApi(string? basePath)
        {
          this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          new Configuration { BasePath = basePath }
          );
          this.ApiClient = new ApiClient(this.Configuration.BasePath);
          this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public TeamApi(Org.OpenAPITools.Client.Configuration configuration)
        {
          ArgumentNullException.ThrowIfNull(configuration);
          
          this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          configuration
          );
          this.ApiClient = new ApiClient(this.Configuration.BasePath);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TeamApi(HttpClient client, HttpClientHandler? handler = null) : this(client, basePath: default, handler: handler) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TeamApi(HttpClient client, string? basePath, HttpClientHandler? handler = null)
        {
          ArgumentNullException.ThrowIfNull(client);
          
          this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          new Configuration { BasePath = basePath }
          );
          this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
          this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public TeamApi(HttpClient client, Configuration configuration, HttpClientHandler? handler = null)
        {
          ArgumentNullException.ThrowIfNull(configuration);
          ArgumentNullException.ThrowIfNull(client);
          
          this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
          GlobalConfiguration.Instance,
          configuration
          );
          this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public TeamApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
          ArgumentNullException.ThrowIfNull(client);
          
            ArgumentNullException.ThrowIfNull(asyncClient);
            
          ArgumentNullException.ThrowIfNull(configuration);
          
          this.Client = client;
            this.AsynchronousClient = asyncClient;
          this.Configuration = configuration;
          this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient? ApiClient { get; set; }
        
          /// <summary>
          /// The client for accessing this underlying API asynchronously.
          /// </summary>
          public IAsynchronousClient AsynchronousClient { get; set; }
        
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }
        
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string? GetBasePath() => this.Configuration.BasePath;
        
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }
        
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory? ExceptionFactory
        {
          get
          {
            return _exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1
            ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
            : _exceptionFactory;
          }
          set => _exceptionFactory = value;
        }
        
          /// <summary>
          /// Query a single team Returns a single Team object. Requires a team number (no prefix).
          /// </summary>
          /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="team"></param>
          /// <returns>Object</returns>
          public Object? ReadTeamV3TeamTeamGet(string team)
          {
            Org.OpenAPITools.Client.ApiResponse<Object?> localVarResponse = ReadTeamV3TeamTeamGetWithHttpInfo(team);
              return localVarResponse.Data;
            }
            
            /// <summary>
            /// Query a single team Returns a single Team object. Requires a team number (no prefix).
            /// </summary>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="team"></param>
            /// <returns>ApiResponse of Object</returns>
            public ApiResponse<Object?> ReadTeamV3TeamTeamGetWithHttpInfo(string team)
            {
                    // verify the required parameter 'team' is set
                    if (team is null)
                    {
                      throw new ApiException(400, "Missing required parameter 'team' when calling TeamApi->ReadTeamV3TeamTeamGet");
                    }
                    
              RequestOptions localVarRequestOptions = new();
              
              string[] _contentTypes = [
              ];
              
              // to determine the Accept header
              string[] _accepts = [
                  "application/json"
              ];
              
              var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
              if (localVarContentType is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
              }
              
              var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
              if (localVarAccept is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
              }
              
                  localVarRequestOptions.PathParameters.Add("team", ClientUtils.ParameterToString(team)); // path parameter
              
              
              // make the HTTP request
              var localVarResponse = this.Client.Get<Object?>("/v3/team/{team}", localVarRequestOptions, this.Configuration);
              
              if (this.ExceptionFactory is not null)
              {
                var _exception = this.ExceptionFactory("ReadTeamV3TeamTeamGet", localVarResponse);
                if (_exception is not null)
                {
                  throw _exception;
                }
              }
              
              return localVarResponse;
            }
            
            /// <summary>
            /// Query a single team Returns a single Team object. Requires a team number (no prefix).
            /// </summary>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
              /// <param name="team"></param>
            /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            /// <returns>Task of Object</returns>
            public async System.Threading.Tasks.Task<Object?> ReadTeamV3TeamTeamGetAsync(string team, CancellationToken cancellationToken = default)
            {
              Org.OpenAPITools.Client.ApiResponse<Object?> localVarResponse = await ReadTeamV3TeamTeamGetWithHttpInfoAsync(team, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Query a single team Returns a single Team object. Requires a team number (no prefix).
              /// </summary>
              /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="team"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Object)</returns>
              public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object?>> ReadTeamV3TeamTeamGetWithHttpInfoAsync(string team, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'team' is set
                      if (team is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'team' when calling TeamApi->ReadTeamV3TeamTeamGet");
                      }
                      
                RequestOptions localVarRequestOptions = new();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("team", ClientUtils.ParameterToString(team)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Object?>("/v3/team/{team}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  var _exception = this.ExceptionFactory("ReadTeamV3TeamTeamGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }          /// <summary>
          /// Query multiple teams Returns up to 1000 teams at a time. Specify limit and offset to page through results.
          /// </summary>
          /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
          /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
          /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
          /// <param name="active">Whether the team has played in the last year. (optional)</param>
          /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
          /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
          /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
          /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
          /// <param name="offset">Offset from the first result to return. (optional)</param>
          /// <returns>List&lt;Object&gt;</returns>
          public List<Object>? ReadTeamsV3TeamsGet(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default)
          {
            Org.OpenAPITools.Client.ApiResponse<List<Object>?> localVarResponse = ReadTeamsV3TeamsGetWithHttpInfo(country, state, district, active, offseason, metric, ascending, limit, offset);
              return localVarResponse.Data;
            }
            
            /// <summary>
            /// Query multiple teams Returns up to 1000 teams at a time. Specify limit and offset to page through results.
            /// </summary>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
            /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
            /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
            /// <param name="active">Whether the team has played in the last year. (optional)</param>
            /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
            /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
            /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
            /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
            /// <param name="offset">Offset from the first result to return. (optional)</param>
            /// <returns>ApiResponse of List&lt;Object&gt;</returns>
            public ApiResponse<List<Object>?> ReadTeamsV3TeamsGetWithHttpInfo(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default)
            {
              RequestOptions localVarRequestOptions = new();
              
              string[] _contentTypes = [
              ];
              
              // to determine the Accept header
              string[] _accepts = [
                  "application/json"
              ];
              
              var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
              if (localVarContentType is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
              }
              
              var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
              if (localVarAccept is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
              }
              
                  if (country is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
                  }
                  
                  if (state is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
                  }
                  
                  if (district is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "district", district));
                  }
                  
                  if (active is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
                  }
                  
                  if (offseason is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offseason", offseason));
                  }
                  
                  if (metric is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                  }
                  
                  if (ascending is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                  }
                  
                  if (limit is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                  }
                  
                  if (offset is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                  }
                  
              
              
              // make the HTTP request
              var localVarResponse = this.Client.Get<List<Object>?>("/v3/teams", localVarRequestOptions, this.Configuration);
              
              if (this.ExceptionFactory is not null)
              {
                var _exception = this.ExceptionFactory("ReadTeamsV3TeamsGet", localVarResponse);
                if (_exception is not null)
                {
                  throw _exception;
                }
              }
              
              return localVarResponse;
            }
            
            /// <summary>
            /// Query multiple teams Returns up to 1000 teams at a time. Specify limit and offset to page through results.
            /// </summary>
            /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
              /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
              /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
              /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
              /// <param name="active">Whether the team has played in the last year. (optional)</param>
              /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
              /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
              /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
              /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
              /// <param name="offset">Offset from the first result to return. (optional)</param>
            /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
            /// <returns>Task of List&lt;Object&gt;</returns>
            public async System.Threading.Tasks.Task<List<Object>?> ReadTeamsV3TeamsGetAsync(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default, CancellationToken cancellationToken = default)
            {
              Org.OpenAPITools.Client.ApiResponse<List<Object>?> localVarResponse = await ReadTeamsV3TeamsGetWithHttpInfoAsync(country, state, district, active, offseason, metric, ascending, limit, offset, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Query multiple teams Returns up to 1000 teams at a time. Specify limit and offset to page through results.
              /// </summary>
              /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="country">Capitalized country name, e.g. &#x60;USA&#x60; or &#x60;Canada&#x60;. (optional)</param>
                /// <param name="state">Capitalized two-letter state code, e.g. &#x60;NC&#x60;. (optional)</param>
                /// <param name="district">One of [&#x60;fma&#x60;, &#x60;fnc&#x60;, &#x60;fit&#x60;, &#x60;fin&#x60;, &#x60;fim&#x60;, &#x60;ne&#x60;, &#x60;chs&#x60;, &#x60;ont&#x60;, &#x60;pnw&#x60;, &#x60;pch&#x60;, &#x60;isr&#x60;] (optional)</param>
                /// <param name="active">Whether the team has played in the last year. (optional)</param>
                /// <param name="offseason">Whether the event is an offseason event. (optional)</param>
                /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
                /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
                /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
                /// <param name="offset">Offset from the first result to return. (optional)</param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Object>?>> ReadTeamsV3TeamsGetWithHttpInfoAsync(string? country = default, string? state = default, string? district = default, bool? active = default, bool? offseason = default, string? metric = default, bool? ascending = default, int? limit = default, int? offset = default, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    if (country is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "country", country));
                    }
                    
                    if (state is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));
                    }
                    
                    if (district is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "district", district));
                    }
                    
                    if (active is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "active", active));
                    }
                    
                    if (offseason is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offseason", offseason));
                    }
                    
                    if (metric is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                    }
                    
                    if (ascending is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                    }
                    
                    if (limit is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                    }
                    
                    if (offset is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                    }
                    
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<List<Object>?>("/v3/teams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  var _exception = this.ExceptionFactory("ReadTeamsV3TeamsGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }
            }
