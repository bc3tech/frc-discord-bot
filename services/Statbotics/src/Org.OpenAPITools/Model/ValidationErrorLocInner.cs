/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

    namespace Org.OpenAPITools.Model;
    
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
  using System.ComponentModel.DataAnnotations;
    
      /// <summary>
  /// ValidationErrorLocInner
  /// </summary>
  
    public sealed partial class ValidationErrorLocInner : AbstractOpenAPISchema,IValidatableObject
    {
      public override string SchemaType { get; } = AnyOf;
      
            /// <summary>
            /// Initializes a new instance of the <see cref="ValidationErrorLocInner" /> class
            /// with the <see cref="string" /> class
            /// </summary>
            /// <param name="actualInstance">An instance of string.</param>
            public ValidationErrorLocInner(string? actualInstance)
            {
              this.ActualInstance = actualInstance == default ? throw new ArgumentException("Invalid instance found. Must not be null.") : actualInstance;
            }
            /// <summary>
            /// Initializes a new instance of the <see cref="ValidationErrorLocInner" /> class
            /// with the <see cref="int" /> class
            /// </summary>
            /// <param name="actualInstance">An instance of int.</param>
            public ValidationErrorLocInner(int? actualInstance)
            {
              this.ActualInstance = actualInstance == default ? throw new ArgumentException("Invalid instance found. Must not be null.") : actualInstance;
            }
      
      private object _actualInstance;
      
      /// <summary>
      /// Gets or Sets ActualInstance
      /// </summary>
      public override object ActualInstance
      {
        get => _actualInstance;
        set
        {
          this._actualInstance = value switch
          { 
            int _ => value,
            string _ => value,
          _ => throw new ArgumentException("Invalid instance found. Must be the following types: [int, string]")
        };
      }
    }
          
          /// <summary>
          /// Get the actual instance of `string`. If the actual instance is not `string`,
          /// the InvalidClassException will be thrown
          /// </summary>
          /// <returns>An instance of string</returns>
          public string? GetString() => (string?)this.ActualInstance;
          
          /// <summary>
          /// Get the actual instance of `int`. If the actual instance is not `int`,
          /// the InvalidClassException will be thrown
          /// </summary>
          /// <returns>An instance of int</returns>
          public int? GetInt() => (int?)this.ActualInstance;
    
    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>string presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.AppendLine("class ValidationErrorLocInner {");
      sb.Append("  ActualInstance: ").Append(this.ActualInstance).AppendLine();
      sb.AppendLine("}");
      return sb.ToString();
    }
    
    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson() => JsonSerializer.Serialize(this.ActualInstance, ValidationErrorLocInner.SerializerSettings);
    
    /// <summary>
    /// Converts the JSON string into an instance of ValidationErrorLocInner
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of ValidationErrorLocInner</returns>
    public static ValidationErrorLocInner? FromJson(string jsonString)
    {
      ValidationErrorLocInner? newValidationErrorLocInner = default;
      
      if (string.IsNullOrEmpty(jsonString))
      {
        return newValidationErrorLocInner;
      }
        
        try
        {
          newValidationErrorLocInner = new ValidationErrorLocInner(JsonSerializer.Deserialize<int>(jsonString, ValidationErrorLocInner.SerializerSettings));
          
          // deserialization is considered successful at this point if no exception has been thrown.
          return newValidationErrorLocInner;
        }
        catch (Exception exception)
        {
          // deserialization failed, try the next one
          System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into int: {1}", jsonString, exception.ToString()));
        }
        
        try
        {
          newValidationErrorLocInner = new ValidationErrorLocInner(JsonSerializer.Deserialize<string>(jsonString, ValidationErrorLocInner.SerializerSettings));
          
          // deserialization is considered successful at this point if no exception has been thrown.
          return newValidationErrorLocInner;
        }
        catch (Exception exception)
        {
          // deserialization failed, try the next one
          System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string: {1}", jsonString, exception.ToString()));
        }
      
      // no match found, throw an exception
      throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
    }
    
    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

