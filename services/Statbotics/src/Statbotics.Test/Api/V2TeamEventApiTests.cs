/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Statbotics.Client;
using Statbotics.Api;
// uncomment below to import models
//using Statbotics.Model;

namespace Statbotics.Test.Api;
{
    /// <summary>
    ///  Class for testing V2TeamEventApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class V2TeamEventApiTests : IDisposable
    {
        public V2TeamEventApiTests()
        {
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of V2TeamEventApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' V2TeamEventApi
            //Assert.IsType<V2TeamEventApi>(instance);
        }

        /// <summary>
        /// Test ReadTeamEventV2TeamEventTeamEventGet
        /// </summary>
        [Fact]
        public void ReadTeamEventV2TeamEventTeamEventGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int team = null;
            //string varEvent = null;
            //var response = instance.ReadTeamEventV2TeamEventTeamEventGet(team, varEvent);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsEventV2TeamEventsEventEventGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsEventV2TeamEventsEventEventGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varEvent = null;
            //var response = instance.ReadTeamEventsEventV2TeamEventsEventEventGet(varEvent);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsTeamV2TeamEventsTeamTeamGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsTeamV2TeamEventsTeamTeamGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int team = null;
            //var response = instance.ReadTeamEventsTeamV2TeamEventsTeamTeamGet(team);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsTeamYearV2TeamEventsTeamTeamYearYearGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsTeamYearV2TeamEventsTeamTeamYearYearGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int team = null;
            //int year = null;
            //var response = instance.ReadTeamEventsTeamYearV2TeamEventsTeamTeamYearYearGet(team, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsV2TeamEventsGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsV2TeamEventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string? country = null;
            //string? district = null;
            //int? limit = null;
            //string? metric = null;
            //bool? offseason = null;
            //int? offset = null;
            //string? state = null;
            //int? team = null;
            //int? type = null;
            //string? varEvent = null;
            //int? week = null;
            //int? year = null;
            //var response = instance.ReadTeamEventsV2TeamEventsGet(ascending, country, district, limit, metric, offseason, offset, state, team, type, varEvent, week, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsYearDistrictV2TeamEventsYearYearDistrictDistrictGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsYearDistrictV2TeamEventsYearYearDistrictDistrictGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string district = null;
            //int year = null;
            //var response = instance.ReadTeamEventsYearDistrictV2TeamEventsYearYearDistrictDistrictGet(district, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadTeamEventsYearStateV2TeamEventsYearYearStateStateGet
        /// </summary>
        [Fact]
        public void ReadTeamEventsYearStateV2TeamEventsYearYearStateStateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //int year = null;
            //var response = instance.ReadTeamEventsYearStateV2TeamEventsYearYearStateStateGet(state, year);
            //Assert.IsType<List<Object>>(response);
        }
    }
}
