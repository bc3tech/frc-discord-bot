/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using Statbotics.Client;
using Statbotics.Api;
// uncomment below to import models
//using Statbotics.Model;

namespace Statbotics.Test.Api;
{
    /// <summary>
    ///  Class for testing V2EventApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class V2EventApiTests : IDisposable
    {
        public V2EventApiTests()
        {
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of V2EventApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' V2EventApi
            //Assert.IsType<V2EventApi>(instance);
        }

        /// <summary>
        /// Test ReadEventV2EventEventGet
        /// </summary>
        [Fact]
        public void ReadEventV2EventEventGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string varEvent = null;
            //var response = instance.ReadEventV2EventEventGet(varEvent);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test ReadEventsDistrictV2EventsDistrictDistrictGet
        /// </summary>
        [Fact]
        public void ReadEventsDistrictV2EventsDistrictDistrictGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string district = null;
            //var response = instance.ReadEventsDistrictV2EventsDistrictDistrictGet(district);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadEventsStateV2EventsStateStateGet
        /// </summary>
        [Fact]
        public void ReadEventsStateV2EventsStateStateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //var response = instance.ReadEventsStateV2EventsStateStateGet(state);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadEventsV2EventsGet
        /// </summary>
        [Fact]
        public void ReadEventsV2EventsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string? country = null;
            //string? district = null;
            //int? limit = null;
            //string? metric = null;
            //bool? offseason = null;
            //int? offset = null;
            //string? state = null;
            //int? type = null;
            //int? week = null;
            //int? year = null;
            //var response = instance.ReadEventsV2EventsGet(ascending, country, district, limit, metric, offseason, offset, state, type, week, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet
        /// </summary>
        [Fact]
        public void ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string district = null;
            //int year = null;
            //var response = instance.ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet(district, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadEventsYearStateV2EventsYearYearStateStateGet
        /// </summary>
        [Fact]
        public void ReadEventsYearStateV2EventsYearYearStateStateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string state = null;
            //int year = null;
            //var response = instance.ReadEventsYearStateV2EventsYearYearStateStateGet(state, year);
            //Assert.IsType<List<Object>>(response);
        }

        /// <summary>
        /// Test ReadEventsYearV2EventsYearYearGet
        /// </summary>
        [Fact]
        public void ReadEventsYearV2EventsYearYearGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int year = null;
            //var response = instance.ReadEventsYearV2EventsYearYearGet(year);
            //Assert.IsType<List<Object>>(response);
        }
    }
}
