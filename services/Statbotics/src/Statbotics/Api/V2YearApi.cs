/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace Statbotics.Api;

using System;
using System.Net.Http;
  using System.Collections.ObjectModel;

using Statbotics.Client;

using Statbotics.Model;
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  internal interface IV2YearApiSync : IApiAccessor
  {
    #region Synchronous Operations
      /// <summary>
      /// Read Year
      /// </summary>
        /// <remarks>
        /// Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="year"></param>
      /// <returns>Object</returns>
      Object ReadYearV2YearYearGet(int year);
      
      /// <summary>
      /// Read Year
      /// </summary>
      /// <remarks>
      /// Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="year"></param>
      /// <returns>ApiResponse of Object</returns>
      ApiResponse<Object> ReadYearV2YearYearGetWithHttpInfo(int year);
      /// <summary>
      /// Read Years
      /// </summary>
        /// <remarks>
        /// Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="ascending"> (optional)</param>
      /// <param name="limit"> (optional)</param>
      /// <param name="metric"> (optional)</param>
      /// <param name="offset"> (optional)</param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadYearsV2YearsGet(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default);
      
      /// <summary>
      /// Read Years
      /// </summary>
      /// <remarks>
      /// Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="ascending"> (optional)</param>
      /// <param name="limit"> (optional)</param>
      /// <param name="metric"> (optional)</param>
      /// <param name="offset"> (optional)</param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadYearsV2YearsGetWithHttpInfo(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default);
    #endregion Synchronous Operations
  }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IV2YearApiAsync : IApiAccessor
    {
      #region Asynchronous Operations
        /// <summary>
        /// Read Year
        /// </summary>
        /// <remarks>
        /// Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="year"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReadYearV2YearYearGetAsync(int year, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Year
          /// </summary>
          /// <remarks>
          /// Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Object)</returns>
          System.Threading.Tasks.Task<ApiResponse<Object>> ReadYearV2YearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Years
        /// </summary>
        /// <remarks>
        /// Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="ascending"> (optional)</param>
          /// <param name="limit"> (optional)</param>
          /// <param name="metric"> (optional)</param>
          /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadYearsV2YearsGetAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Years
          /// </summary>
          /// <remarks>
          /// Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="ascending"> (optional)</param>
            /// <param name="limit"> (optional)</param>
            /// <param name="metric"> (optional)</param>
            /// <param name="offset"> (optional)</param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadYearsV2YearsGetWithHttpInfoAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
      }
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IV2YearApi : IV2YearApiSync, IV2YearApiAsync { }
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class V2YearApi : IV2YearApi
    {
      private ExceptionFactory? _exceptionFactory = (name, response) => null;
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <returns></returns>
      public V2YearApi() : this((string)null) { }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <param name="basePath">The target service's base path in URL format.</param>
      /// <exception cref="ArgumentException"></exception>
      /// <returns></returns>
      public V2YearApi(string basePath)
      {
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        this.ApiClient = new ApiClient(this.Configuration.BasePath);
        this.Client =  this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class using Configuration object.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <param name="configuration">An instance of Configuration.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      public V2YearApi(Statbotics.Client.Configuration configuration)
      {
        ArgumentNullException.ThrowIfNull(configuration);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        this.ApiClient = new ApiClient(this.Configuration.BasePath);
        this.Client = this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2YearApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler) { }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="basePath">The target service's base path in URL format.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <exception cref="ArgumentException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2YearApi(HttpClient client, string basePath, HttpClientHandler handler = null)
      {
        ArgumentNullException.ThrowIfNull(client);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
        this.Client =  this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class using Configuration object.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="configuration">An instance of Configuration.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2YearApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
      {
        ArgumentNullException.ThrowIfNull(configuration);
        ArgumentNullException.ThrowIfNull(client);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
        this.Client = this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2YearApi"/> class
      /// using a Configuration object and client instance.
      /// </summary>
      /// <param name="client">The client interface for synchronous API access.</param>
      /// <param name="asyncClient">The client interface for asynchronous API access.</param>
      /// <param name="configuration">The configuration object.</param>
      /// <exception cref="ArgumentNullException"></exception>
      public V2YearApi(Statbotics.Client.ISynchronousClient client, Statbotics.Client.IAsynchronousClient asyncClient, Statbotics.Client.IReadableConfiguration configuration)
      {
        ArgumentNullException.ThrowIfNull(client);
        
          ArgumentNullException.ThrowIfNull(asyncClient);
          
        ArgumentNullException.ThrowIfNull(configuration);
        
        this.Client = client;
          this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Holds the ApiClient if created
      /// </summary>
      public ApiClient ApiClient { get; set; } = null;
      
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }
      
      /// <summary>
      /// The client for accessing this underlying API synchronously.
      /// </summary>
      public ISynchronousClient Client { get; set; }
      
      /// <summary>
      /// Gets the base path of the API client.
      /// </summary>
      /// <value>The base path</value>
      public string GetBasePath() => this.Configuration.BasePath;
      
      /// <summary>
      /// Gets or sets the configuration object
      /// </summary>
      /// <value>An instance of the Configuration</value>
      public IReadableConfiguration Configuration { get; set; }
      
      /// <summary>
      /// Provides a factory method hook for the creation of exceptions.
      /// </summary>
      public ExceptionFactory ExceptionFactory
      {
        get
        {
          if (_exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1)
          {
            throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
          }
          
          return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
      }
      
        /// <summary>
        /// Read Year Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <returns>Object</returns>
        public Object ReadYearV2YearYearGet(int year)
        {
          Statbotics.Client.ApiResponse<Object> localVarResponse = ReadYearV2YearYearGetWithHttpInfo(year);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Year Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="year"></param>
          /// <returns>ApiResponse of Object</returns>
          public ApiResponse<Object> ReadYearV2YearYearGetWithHttpInfo(int year)
          {
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v2/year/{year}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadYearV2YearYearGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Year Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Object</returns>
          public async System.Threading.Tasks.Task<Object> ReadYearV2YearYearGetAsync(int year, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Object> localVarResponse = await ReadYearV2YearYearGetWithHttpInfoAsync(year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Year Get a single Year object containing EPA percentiles, Week 1 match score statistics, and prediction accuracy. After 2016, separated into components and ranking points included.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="year"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Object)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Object>> ReadYearV2YearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v2/year/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadYearV2YearYearGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Years Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="metric"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadYearsV2YearsGet(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadYearsV2YearsGetWithHttpInfo(ascending, limit, metric, offset);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Years Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="ascending"> (optional)</param>
          /// <param name="limit"> (optional)</param>
          /// <param name="metric"> (optional)</param>
          /// <param name="offset"> (optional)</param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadYearsV2YearsGetWithHttpInfo(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default)
          {
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                if (ascending is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                }
                
                if (limit is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                }
                
                if (metric is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                }
                
                if (offset is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                }
                
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/years", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadYearsV2YearsGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Years Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="ascending"> (optional)</param>
            /// <param name="limit"> (optional)</param>
            /// <param name="metric"> (optional)</param>
            /// <param name="offset"> (optional)</param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadYearsV2YearsGetAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadYearsV2YearsGetWithHttpInfoAsync(ascending, limit, metric, offset, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Years Get a list of Year objects from 2002 to 2023. Specify a four-digit year, ex: 2019
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="ascending"> (optional)</param>
                /// <param name="limit"> (optional)</param>
                /// <param name="metric"> (optional)</param>
                /// <param name="offset"> (optional)</param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadYearsV2YearsGetWithHttpInfoAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    if (ascending is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                    }
                    
                    if (limit is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                    }
                    
                    if (metric is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                    }
                    
                    if (offset is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                    }
                    
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/years", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadYearsV2YearsGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }
            }
