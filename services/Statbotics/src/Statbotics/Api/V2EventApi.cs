/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace Statbotics.Api;

using System;
using System.Net.Http;
  using System.Collections.ObjectModel;

using Statbotics.Client;

using Statbotics.Model;
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  internal interface IV2EventApiSync : IApiAccessor
  {
    #region Synchronous Operations
      /// <summary>
      /// Read Event
      /// </summary>
        /// <remarks>
        /// Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="varEvent"></param>
      /// <returns>Object</returns>
      Object ReadEventV2EventEventGet(string varEvent);
      
      /// <summary>
      /// Read Event
      /// </summary>
      /// <remarks>
      /// Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="varEvent"></param>
      /// <returns>ApiResponse of Object</returns>
      ApiResponse<Object> ReadEventV2EventEventGetWithHttpInfo(string varEvent);
      /// <summary>
      /// Read Events District
      /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="district"></param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsDistrictV2EventsDistrictDistrictGet(string district);
      
      /// <summary>
      /// Read Events District
      /// </summary>
      /// <remarks>
      /// Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="district"></param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfo(string district);
      /// <summary>
      /// Read Events State
      /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="state"></param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsStateV2EventsStateStateGet(string state);
      
      /// <summary>
      /// Read Events State
      /// </summary>
      /// <remarks>
      /// Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="state"></param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsStateV2EventsStateStateGetWithHttpInfo(string state);
      /// <summary>
      /// Read Events
      /// </summary>
        /// <remarks>
        /// Get a list of all Event objects with optional filters.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="ascending"> (optional)</param>
      /// <param name="country"> (optional)</param>
      /// <param name="district"> (optional)</param>
      /// <param name="limit"> (optional)</param>
      /// <param name="metric"> (optional)</param>
      /// <param name="offseason"> (optional)</param>
      /// <param name="offset"> (optional)</param>
      /// <param name="state"> (optional)</param>
      /// <param name="type"> (optional)</param>
      /// <param name="week"> (optional)</param>
      /// <param name="year"> (optional)</param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsV2EventsGet(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default);
      
      /// <summary>
      /// Read Events
      /// </summary>
      /// <remarks>
      /// Get a list of all Event objects with optional filters.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="ascending"> (optional)</param>
      /// <param name="country"> (optional)</param>
      /// <param name="district"> (optional)</param>
      /// <param name="limit"> (optional)</param>
      /// <param name="metric"> (optional)</param>
      /// <param name="offseason"> (optional)</param>
      /// <param name="offset"> (optional)</param>
      /// <param name="state"> (optional)</param>
      /// <param name="type"> (optional)</param>
      /// <param name="week"> (optional)</param>
      /// <param name="year"> (optional)</param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsV2EventsGetWithHttpInfo(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default);
      /// <summary>
      /// Read Events Year District
      /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="district"></param>
      /// <param name="year"></param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet(string district, int year);
      
      /// <summary>
      /// Read Events Year District
      /// </summary>
      /// <remarks>
      /// Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="district"></param>
      /// <param name="year"></param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfo(string district, int year);
      /// <summary>
      /// Read Events Year State
      /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="state"></param>
      /// <param name="year"></param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsYearStateV2EventsYearYearStateStateGet(string state, int year);
      
      /// <summary>
      /// Read Events Year State
      /// </summary>
      /// <remarks>
      /// Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="state"></param>
      /// <param name="year"></param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfo(string state, int year);
      /// <summary>
      /// Read Events Year
      /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="year"></param>
      /// <returns>Collection&lt;Object&gt;</returns>
      Collection<Object> ReadEventsYearV2EventsYearYearGet(int year);
      
      /// <summary>
      /// Read Events Year
      /// </summary>
      /// <remarks>
      /// Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
      /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="year"></param>
      /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
      ApiResponse<Collection<Object>> ReadEventsYearV2EventsYearYearGetWithHttpInfo(int year);
    #endregion Synchronous Operations
  }
  
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IV2EventApiAsync : IApiAccessor
    {
      #region Asynchronous Operations
        /// <summary>
        /// Read Event
        /// </summary>
        /// <remarks>
        /// Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="varEvent"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReadEventV2EventEventGetAsync(string varEvent, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Event
          /// </summary>
          /// <remarks>
          /// Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="varEvent"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Object)</returns>
          System.Threading.Tasks.Task<ApiResponse<Object>> ReadEventV2EventEventGetWithHttpInfoAsync(string varEvent, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events District
        /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="district"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsDistrictV2EventsDistrictDistrictGetAsync(string district, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events District
          /// </summary>
          /// <remarks>
          /// Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="district"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfoAsync(string district, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events State
        /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="state"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsStateV2EventsStateStateGetAsync(string state, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events State
          /// </summary>
          /// <remarks>
          /// Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="state"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsStateV2EventsStateStateGetWithHttpInfoAsync(string state, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events
        /// </summary>
        /// <remarks>
        /// Get a list of all Event objects with optional filters.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="ascending"> (optional)</param>
          /// <param name="country"> (optional)</param>
          /// <param name="district"> (optional)</param>
          /// <param name="limit"> (optional)</param>
          /// <param name="metric"> (optional)</param>
          /// <param name="offseason"> (optional)</param>
          /// <param name="offset"> (optional)</param>
          /// <param name="state"> (optional)</param>
          /// <param name="type"> (optional)</param>
          /// <param name="week"> (optional)</param>
          /// <param name="year"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsV2EventsGetAsync(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events
          /// </summary>
          /// <remarks>
          /// Get a list of all Event objects with optional filters.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="ascending"> (optional)</param>
            /// <param name="country"> (optional)</param>
            /// <param name="district"> (optional)</param>
            /// <param name="limit"> (optional)</param>
            /// <param name="metric"> (optional)</param>
            /// <param name="offseason"> (optional)</param>
            /// <param name="offset"> (optional)</param>
            /// <param name="state"> (optional)</param>
            /// <param name="type"> (optional)</param>
            /// <param name="week"> (optional)</param>
            /// <param name="year"> (optional)</param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsV2EventsGetWithHttpInfoAsync(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events Year District
        /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="district"></param>
          /// <param name="year"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetAsync(string district, int year, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events Year District
          /// </summary>
          /// <remarks>
          /// Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="district"></param>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfoAsync(string district, int year, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events Year State
        /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="state"></param>
          /// <param name="year"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearStateV2EventsYearYearStateStateGetAsync(string state, int year, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events Year State
          /// </summary>
          /// <remarks>
          /// Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="state"></param>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfoAsync(string state, int year, CancellationToken cancellationToken = default);
        /// <summary>
        /// Read Events Year
        /// </summary>
        /// <remarks>
        /// Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
        /// </remarks>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="year"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Collection&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearV2EventsYearYearGetAsync(int year, CancellationToken cancellationToken = default);
          
          /// <summary>
          /// Read Events Year
          /// </summary>
          /// <remarks>
          /// Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
          /// </remarks>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
          System.Threading.Tasks.Task<ApiResponse<Collection<Object>>> ReadEventsYearV2EventsYearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
      }
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IV2EventApi : IV2EventApiSync, IV2EventApiAsync { }
    
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class V2EventApi : IV2EventApi
    {
      private ExceptionFactory? _exceptionFactory = (name, response) => null;
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <returns></returns>
      public V2EventApi() : this((string)null) { }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <param name="basePath">The target service's base path in URL format.</param>
      /// <exception cref="ArgumentException"></exception>
      /// <returns></returns>
      public V2EventApi(string basePath)
      {
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        this.ApiClient = new ApiClient(this.Configuration.BasePath);
        this.Client =  this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class using Configuration object.
      /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
      /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
      /// </summary>
      /// <param name="configuration">An instance of Configuration.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      public V2EventApi(Statbotics.Client.Configuration configuration)
      {
        ArgumentNullException.ThrowIfNull(configuration);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        this.ApiClient = new ApiClient(this.Configuration.BasePath);
        this.Client = this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2EventApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler) { }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="basePath">The target service's base path in URL format.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <exception cref="ArgumentException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2EventApi(HttpClient client, string basePath, HttpClientHandler handler = null)
      {
        ArgumentNullException.ThrowIfNull(client);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        new Configuration { BasePath = basePath }
        );
        this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
        this.Client =  this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class using Configuration object.
      /// </summary>
      /// <param name="client">An instance of HttpClient.</param>
      /// <param name="configuration">An instance of Configuration.</param>
      /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
      /// <exception cref="ArgumentNullException"></exception>
      /// <returns></returns>
      /// <remarks>
      /// Some configuration settings will not be applied without passing an HttpClientHandler.
      /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
      /// </remarks>
      public V2EventApi(HttpClient client, Configuration configuration, HttpClientHandler handler = null)
      {
        ArgumentNullException.ThrowIfNull(configuration);
        ArgumentNullException.ThrowIfNull(client);
        
        this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(
        GlobalConfiguration.Instance,
        configuration
        );
        this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
        this.Client = this.ApiClient;
          this.AsynchronousClient = this.ApiClient;
        ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Initializes a new instance of the <see cref="V2EventApi"/> class
      /// using a Configuration object and client instance.
      /// </summary>
      /// <param name="client">The client interface for synchronous API access.</param>
      /// <param name="asyncClient">The client interface for asynchronous API access.</param>
      /// <param name="configuration">The configuration object.</param>
      /// <exception cref="ArgumentNullException"></exception>
      public V2EventApi(Statbotics.Client.ISynchronousClient client, Statbotics.Client.IAsynchronousClient asyncClient, Statbotics.Client.IReadableConfiguration configuration)
      {
        ArgumentNullException.ThrowIfNull(client);
        
          ArgumentNullException.ThrowIfNull(asyncClient);
          
        ArgumentNullException.ThrowIfNull(configuration);
        
        this.Client = client;
          this.AsynchronousClient = asyncClient;
        this.Configuration = configuration;
        this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
      }
      
      /// <summary>
      /// Holds the ApiClient if created
      /// </summary>
      public ApiClient ApiClient { get; set; } = null;
      
        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }
      
      /// <summary>
      /// The client for accessing this underlying API synchronously.
      /// </summary>
      public ISynchronousClient Client { get; set; }
      
      /// <summary>
      /// Gets the base path of the API client.
      /// </summary>
      /// <value>The base path</value>
      public string GetBasePath() => this.Configuration.BasePath;
      
      /// <summary>
      /// Gets or sets the configuration object
      /// </summary>
      /// <value>An instance of the Configuration</value>
      public IReadableConfiguration Configuration { get; set; }
      
      /// <summary>
      /// Provides a factory method hook for the creation of exceptions.
      /// </summary>
      public ExceptionFactory ExceptionFactory
      {
        get
        {
          if (_exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1)
          {
            throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
          }
          
          return _exceptionFactory;
        }
        set { _exceptionFactory = value; }
      }
      
        /// <summary>
        /// Read Event Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="varEvent"></param>
        /// <returns>Object</returns>
        public Object ReadEventV2EventEventGet(string varEvent)
        {
          Statbotics.Client.ApiResponse<Object> localVarResponse = ReadEventV2EventEventGetWithHttpInfo(varEvent);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Event Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="varEvent"></param>
          /// <returns>ApiResponse of Object</returns>
          public ApiResponse<Object> ReadEventV2EventEventGetWithHttpInfo(string varEvent)
          {
                  // verify the required parameter 'varEvent' is set
                  if (varEvent is null)
                  {
                    throw new ApiException(400, "Missing required parameter 'varEvent' when calling V2EventApi->ReadEventV2EventEventGet");
                  }
                  
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("event", ClientUtils.ParameterToString(varEvent)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v2/event/{event}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventV2EventEventGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Event Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="varEvent"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Object</returns>
          public async System.Threading.Tasks.Task<Object> ReadEventV2EventEventGetAsync(string varEvent, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Object> localVarResponse = await ReadEventV2EventEventGetWithHttpInfoAsync(varEvent, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Event Get a single Event object containing event location, dates, EPA stats, prediction stats. Specify event key ex: 2019ncwak, 2022cmptx
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="varEvent"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Object)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Object>> ReadEventV2EventEventGetWithHttpInfoAsync(string varEvent, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'varEvent' is set
                      if (varEvent is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'varEvent' when calling V2EventApi->ReadEventV2EventEventGet");
                      }
                      
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("event", ClientUtils.ParameterToString(varEvent)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/v2/event/{event}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventV2EventEventGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events District Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="district"></param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsDistrictV2EventsDistrictDistrictGet(string district)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfo(district);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events District Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="district"></param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfo(string district)
          {
                  // verify the required parameter 'district' is set
                  if (district is null)
                  {
                    throw new ApiException(400, "Missing required parameter 'district' when calling V2EventApi->ReadEventsDistrictV2EventsDistrictDistrictGet");
                  }
                  
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("district", ClientUtils.ParameterToString(district)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events/district/{district}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsDistrictV2EventsDistrictDistrictGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events District Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="district"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsDistrictV2EventsDistrictDistrictGetAsync(string district, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfoAsync(district, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events District Get a list of Event objects for a single district. Specify district as lowercase abbreviation, ex fnc, fim.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="district"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsDistrictV2EventsDistrictDistrictGetWithHttpInfoAsync(string district, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'district' is set
                      if (district is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'district' when calling V2EventApi->ReadEventsDistrictV2EventsDistrictDistrictGet");
                      }
                      
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("district", ClientUtils.ParameterToString(district)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events/district/{district}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsDistrictV2EventsDistrictDistrictGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events State Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state"></param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsStateV2EventsStateStateGet(string state)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsStateV2EventsStateStateGetWithHttpInfo(state);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events State Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="state"></param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsStateV2EventsStateStateGetWithHttpInfo(string state)
          {
                  // verify the required parameter 'state' is set
                  if (state is null)
                  {
                    throw new ApiException(400, "Missing required parameter 'state' when calling V2EventApi->ReadEventsStateV2EventsStateStateGet");
                  }
                  
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("state", ClientUtils.ParameterToString(state)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events/state/{state}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsStateV2EventsStateStateGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events State Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="state"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsStateV2EventsStateStateGetAsync(string state, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsStateV2EventsStateStateGetWithHttpInfoAsync(state, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events State Get a list of Event objects for a single state. Specify state as uppercase two-letter abbreviation, ex CA, TX.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="state"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsStateV2EventsStateStateGetWithHttpInfoAsync(string state, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'state' is set
                      if (state is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'state' when calling V2EventApi->ReadEventsStateV2EventsStateStateGet");
                      }
                      
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("state", ClientUtils.ParameterToString(state)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events/state/{state}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsStateV2EventsStateStateGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events Get a list of all Event objects with optional filters.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending"> (optional)</param>
        /// <param name="country"> (optional)</param>
        /// <param name="district"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="metric"> (optional)</param>
        /// <param name="offseason"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="type"> (optional)</param>
        /// <param name="week"> (optional)</param>
        /// <param name="year"> (optional)</param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsV2EventsGet(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsV2EventsGetWithHttpInfo(ascending, country, district, limit, metric, offseason, offset, state, type, week, year);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events Get a list of all Event objects with optional filters.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="ascending"> (optional)</param>
          /// <param name="country"> (optional)</param>
          /// <param name="district"> (optional)</param>
          /// <param name="limit"> (optional)</param>
          /// <param name="metric"> (optional)</param>
          /// <param name="offseason"> (optional)</param>
          /// <param name="offset"> (optional)</param>
          /// <param name="state"> (optional)</param>
          /// <param name="type"> (optional)</param>
          /// <param name="week"> (optional)</param>
          /// <param name="year"> (optional)</param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsV2EventsGetWithHttpInfo(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default)
          {
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                if (ascending is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                }
                
                if (country is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "country", country));
                }
                
                if (district is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "district", district));
                }
                
                if (limit is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                }
                
                if (metric is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                }
                
                if (offseason is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offseason", offseason));
                }
                
                if (offset is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                }
                
                if (state is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "state", state));
                }
                
                if (type is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "type", type));
                }
                
                if (week is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "week", week));
                }
                
                if (year is not null)
                {
                    localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "year", year));
                }
                
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsV2EventsGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events Get a list of all Event objects with optional filters.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="ascending"> (optional)</param>
            /// <param name="country"> (optional)</param>
            /// <param name="district"> (optional)</param>
            /// <param name="limit"> (optional)</param>
            /// <param name="metric"> (optional)</param>
            /// <param name="offseason"> (optional)</param>
            /// <param name="offset"> (optional)</param>
            /// <param name="state"> (optional)</param>
            /// <param name="type"> (optional)</param>
            /// <param name="week"> (optional)</param>
            /// <param name="year"> (optional)</param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsV2EventsGetAsync(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsV2EventsGetWithHttpInfoAsync(ascending, country, district, limit, metric, offseason, offset, state, type, week, year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events Get a list of all Event objects with optional filters.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="ascending"> (optional)</param>
                /// <param name="country"> (optional)</param>
                /// <param name="district"> (optional)</param>
                /// <param name="limit"> (optional)</param>
                /// <param name="metric"> (optional)</param>
                /// <param name="offseason"> (optional)</param>
                /// <param name="offset"> (optional)</param>
                /// <param name="state"> (optional)</param>
                /// <param name="type"> (optional)</param>
                /// <param name="week"> (optional)</param>
                /// <param name="year"> (optional)</param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsV2EventsGetWithHttpInfoAsync(bool? ascending = default, string? country = default, string? district = default, int? limit = default, string? metric = default, bool? offseason = default, int? offset = default, string? state = default, int? type = default, int? week = default, int? year = default, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    if (ascending is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                    }
                    
                    if (country is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "country", country));
                    }
                    
                    if (district is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "district", district));
                    }
                    
                    if (limit is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
                    }
                    
                    if (metric is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "metric", metric));
                    }
                    
                    if (offseason is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offseason", offseason));
                    }
                    
                    if (offset is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
                    }
                    
                    if (state is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "state", state));
                    }
                    
                    if (type is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "type", type));
                    }
                    
                    if (week is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "week", week));
                    }
                    
                    if (year is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(Statbotics.Client.ClientUtils.ParameterToMultiMap("", "year", year));
                    }
                    
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsV2EventsGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events Year District Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="district"></param>
        /// <param name="year"></param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet(string district, int year)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfo(district, year);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events Year District Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="district"></param>
          /// <param name="year"></param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfo(string district, int year)
          {
                  // verify the required parameter 'district' is set
                  if (district is null)
                  {
                    throw new ApiException(400, "Missing required parameter 'district' when calling V2EventApi->ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet");
                  }
                  
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("district", ClientUtils.ParameterToString(district)); // path parameter
                localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events/year/{year}/district/{district}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events Year District Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="district"></param>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetAsync(string district, int year, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfoAsync(district, year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events Year District Get a list of Event objects for a single (year, district) pair. Specify year as four-digit number, district as lowercase abbreviation.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="district"></param>
                /// <param name="year"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGetWithHttpInfoAsync(string district, int year, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'district' is set
                      if (district is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'district' when calling V2EventApi->ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet");
                      }
                      
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("district", ClientUtils.ParameterToString(district)); // path parameter
                    localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events/year/{year}/district/{district}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsYearDistrictV2EventsYearYearDistrictDistrictGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events Year State Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="state"></param>
        /// <param name="year"></param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsYearStateV2EventsYearYearStateStateGet(string state, int year)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfo(state, year);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events Year State Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="state"></param>
          /// <param name="year"></param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfo(string state, int year)
          {
                  // verify the required parameter 'state' is set
                  if (state is null)
                  {
                    throw new ApiException(400, "Missing required parameter 'state' when calling V2EventApi->ReadEventsYearStateV2EventsYearYearStateStateGet");
                  }
                  
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("state", ClientUtils.ParameterToString(state)); // path parameter
                localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events/year/{year}/state/{state}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsYearStateV2EventsYearYearStateStateGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events Year State Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="state"></param>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearStateV2EventsYearYearStateStateGetAsync(string state, int year, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfoAsync(state, year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events Year State Get a list of Event objects for a single (year, state) pair. Specify year as four-digit number, state as uppercase two-letter abbreviation.
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="state"></param>
                /// <param name="year"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsYearStateV2EventsYearYearStateStateGetWithHttpInfoAsync(string state, int year, CancellationToken cancellationToken = default)
              {
                      // verify the required parameter 'state' is set
                      if (state is null)
                      {
                        throw new ApiException(400, "Missing required parameter 'state' when calling V2EventApi->ReadEventsYearStateV2EventsYearYearStateStateGet");
                      }
                      
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("state", ClientUtils.ParameterToString(state)); // path parameter
                    localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events/year/{year}/state/{state}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsYearStateV2EventsYearYearStateStateGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }        /// <summary>
        /// Read Events Year Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
        /// </summary>
        /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <returns>Collection&lt;Object&gt;</returns>
        public Collection<Object> ReadEventsYearV2EventsYearYearGet(int year)
        {
          Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = ReadEventsYearV2EventsYearYearGetWithHttpInfo(year);
            return localVarResponse.Data;
          }
          
          /// <summary>
          /// Read Events Year Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
          /// <param name="year"></param>
          /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
          public ApiResponse<Collection<Object>> ReadEventsYearV2EventsYearYearGetWithHttpInfo(int year)
          {
            RequestOptions localVarRequestOptions = new RequestOptions();
            
            string[] _contentTypes = [
            ];
            
            // to determine the Accept header
            string[] _accepts = [
                "application/json"
            ];
            
            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType is not null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            
            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept is not null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
                localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
            
            
            // make the HTTP request
            var localVarResponse = this.Client.Get<Collection<Object>>("/v2/events/year/{year}", localVarRequestOptions, this.Configuration);
            
            if (this.ExceptionFactory is not null)
            {
              Exception _exception = this.ExceptionFactory("ReadEventsYearV2EventsYearYearGet", localVarResponse);
              if (_exception is not null)
              {
                throw _exception;
              }
            }
            
            return localVarResponse;
          }
          
          /// <summary>
          /// Read Events Year Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
          /// </summary>
          /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
            /// <param name="year"></param>
          /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
          /// <returns>Task of Collection&lt;Object&gt;</returns>
          public async System.Threading.Tasks.Task<Collection<Object>> ReadEventsYearV2EventsYearYearGetAsync(int year, CancellationToken cancellationToken = default)
            {
              Statbotics.Client.ApiResponse<Collection<Object>> localVarResponse = await ReadEventsYearV2EventsYearYearGetWithHttpInfoAsync(year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }
              
              /// <summary>
              /// Read Events Year Get a list of Event objects for a single year. Specify year, ex: 2019, 2020
              /// </summary>
              /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
                /// <param name="year"></param>
              /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
              /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
              public async System.Threading.Tasks.Task<Statbotics.Client.ApiResponse<Collection<Object>>> ReadEventsYearV2EventsYearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new RequestOptions();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                
                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>>("/v2/events/year/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  Exception _exception = this.ExceptionFactory("ReadEventsYearV2EventsYearYearGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }
            }
