/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace Statbotics.Api;

using System;
using System.Net.Http;
  using System.Collections.ObjectModel;
  using System.Threading.Tasks;

using Statbotics.Client;

using Statbotics.Model;
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IYearApiSync : IApiAccessor
  {
    #region Synchronous Operations
      /// <summary>
      /// Query a single year
      /// </summary>
        /// <remarks>
        /// Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
        /// </remarks>
      /// <exception cref="Statbotics.Client.ApiException">Thrown when fails to make API call</exception>
      /// <param name="year"></param>
      /// <returns>Object</returns>
      Object? ReadYearV3YearYearGet(int year);

    /// <summary>
    /// Query a single year
    /// </summary>
    /// <remarks>
    /// Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <returns>ApiResponse of Object</returns>
    ApiResponse<Object?> ReadYearV3YearYearGetWithHttpInfo(int year);
    /// <summary>
    /// Query multiple years
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <returns>Collection&lt;Object&gt;</returns>
    Collection<Object>? ReadYearsV3YearsGet(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default);

    /// <summary>
    /// Query multiple years
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
    ApiResponse<Collection<Object>?> ReadYearsV3YearsGetWithHttpInfo(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default);
      #endregion Synchronous Operations
    }
    
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public interface IYearApiAsync : IApiAccessor
      {
    #region Asynchronous Operations
    /// <summary>
    /// Query a single year
    /// </summary>
    /// <remarks>
    /// Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object?> ReadYearV3YearYearGetAsync(int year, CancellationToken cancellationToken = default);

    /// <summary>
    /// Query a single year
    /// </summary>
    /// <remarks>
    /// Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    Task<ApiResponse<Object?>> ReadYearV3YearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default);
    /// <summary>
    /// Query multiple years
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Collection&lt;Object&gt;</returns>
    Task<Collection<Object>?> ReadYearsV3YearsGetAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default);

    /// <summary>
    /// Query multiple years
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
    Task<ApiResponse<Collection<Object>?>> ReadYearsV3YearsGetWithHttpInfoAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default);
          #endregion Asynchronous Operations
        }
      
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public interface IYearApi : IYearApiSync, IYearApiAsync { }
      
      /// <summary>
      /// Represents a collection of functions to interact with the API endpoints
      /// </summary>
      public sealed partial class YearApi : IYearApi
      {
        private ExceptionFactory? _exceptionFactory = (name, response) => null;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public YearApi() : this(basePath: default) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public YearApi(string? basePath)
        {
          this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(GlobalConfiguration.Instance, new Configuration { BasePath = basePath });
          this.ApiClient = new ApiClient(this.Configuration.BasePath);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          
          this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public YearApi(Configuration configuration)
        {
          ArgumentNullException.ThrowIfNull(configuration);
          
          this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(GlobalConfiguration.Instance, configuration);
          this.ApiClient = new ApiClient(this.Configuration.BasePath);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          
          this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public YearApi(HttpClient client, HttpClientHandler? handler = null) : this(client, basePath: default, handler: handler) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public YearApi(HttpClient client, string? basePath, HttpClientHandler? handler = null)
        {
          ArgumentNullException.ThrowIfNull(client);
          
          this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(GlobalConfiguration.Instance, new Configuration { BasePath = basePath });
          this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          
          this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public YearApi(HttpClient client, Configuration configuration, HttpClientHandler? handler = null)
        {
          ArgumentNullException.ThrowIfNull(configuration);
          ArgumentNullException.ThrowIfNull(client);
          
          this.Configuration = Statbotics.Client.Configuration.MergeConfigurations(GlobalConfiguration.Instance, configuration);
          this.ApiClient = new ApiClient(client, this.Configuration.BasePath, handler);
          this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
          
          this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="YearApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public YearApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
          ArgumentNullException.ThrowIfNull(client);
          
            ArgumentNullException.ThrowIfNull(asyncClient);
            this.AsynchronousClient = asyncClient;
            
          ArgumentNullException.ThrowIfNull(configuration);
          this.Configuration = configuration;
          
          this.Client = client;
          this.ExceptionFactory = Statbotics.Client.Configuration.DefaultExceptionFactory;
        }
        
        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public ApiClient? ApiClient { get; set; }
        
          /// <summary>
          /// The client for accessing this underlying API asynchronously.
          /// </summary>
          public IAsynchronousClient AsynchronousClient { get; set; }
        
        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }
        
        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string? GetBasePath() => this.Configuration.BasePath;
        
        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }
        
        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory? ExceptionFactory
        {
          get
          {
            return _exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1
            ? throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.")
            : _exceptionFactory;
          }
          set => _exceptionFactory = value;
        }

    /// <summary>
    /// Query a single year Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <returns>Object</returns>
    public Object? ReadYearV3YearYearGet(int year)
          {
        ApiResponse<object?> localVarResponse = ReadYearV3YearYearGetWithHttpInfo(year);
              return localVarResponse.Data;
            }

    /// <summary>
    /// Query a single year Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <returns>ApiResponse of Object</returns>
    public ApiResponse<Object?> ReadYearV3YearYearGetWithHttpInfo(int year)
            {
              RequestOptions localVarRequestOptions = new();
              
              string[] _contentTypes = [
              ];
              
              // to determine the Accept header
              string[] _accepts = [
                  "application/json"
              ];
              
              var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
              if (localVarContentType is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
              }
              
              var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
              if (localVarAccept is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
              }
              
                  localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                            
              // make the HTTP request
              var localVarResponse = this.Client.Get<Object?>("/v3/year/{year}", localVarRequestOptions, this.Configuration);
              
              if (this.ExceptionFactory is not null)
              {
                var _exception = this.ExceptionFactory("ReadYearV3YearYearGet", localVarResponse);
                if (_exception is not null)
                {
                  throw _exception;
                }
              }
              
              return localVarResponse;
            }

    /// <summary>
    /// Query a single year Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object?> ReadYearV3YearYearGetAsync(int year, CancellationToken cancellationToken = default)
            {
        ApiResponse<object?> localVarResponse = await ReadYearV3YearYearGetWithHttpInfoAsync(year, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }

    /// <summary>
    /// Query a single year Returns a single Year object. Requires a four-digit year, e.g. &#x60;2019&#x60;.
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="year"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async Task<ApiResponse<object?>> ReadYearV3YearYearGetWithHttpInfoAsync(int year, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    localVarRequestOptions.PathParameters.Add("year", ClientUtils.ParameterToString(year)); // path parameter
                                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Object?>("/v3/year/{year}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  var _exception = this.ExceptionFactory("ReadYearV3YearYearGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }          /// <summary>
                         /// Query multiple years 
                         /// </summary>
                         /// <exception cref="ApiException">Thrown when fails to make API call</exception>
                         /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
                         /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
                         /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
                         /// <param name="offset">Offset from the first result to return. (optional)</param>
                         /// <returns>Collection&lt;Object&gt;</returns>
    public Collection<Object>? ReadYearsV3YearsGet(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default)
          {
        ApiResponse<Collection<object>?> localVarResponse = ReadYearsV3YearsGetWithHttpInfo(ascending, limit, metric, offset);
              return localVarResponse.Data;
            }

    /// <summary>
    /// Query multiple years 
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <returns>ApiResponse of Collection&lt;Object&gt;</returns>
    public ApiResponse<Collection<Object>?> ReadYearsV3YearsGetWithHttpInfo(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default)
            {
              RequestOptions localVarRequestOptions = new();
              
              string[] _contentTypes = [
              ];
              
              // to determine the Accept header
              string[] _accepts = [
                  "application/json"
              ];
              
              var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
              if (localVarContentType is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
              }
              
              var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
              if (localVarAccept is not null)
              {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
              }
              
                  if (ascending is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                  }
                  
                  if (limit is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
                  }
                  
                  if (metric is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "metric", metric));
                  }
                  
                  if (offset is not null)
                  {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
                  }
                  
                            
              // make the HTTP request
              var localVarResponse = this.Client.Get<Collection<Object>?>("/v3/years", localVarRequestOptions, this.Configuration);
              
              if (this.ExceptionFactory is not null)
              {
                var _exception = this.ExceptionFactory("ReadYearsV3YearsGet", localVarResponse);
                if (_exception is not null)
                {
                  throw _exception;
                }
              }
              
              return localVarResponse;
            }

    /// <summary>
    /// Query multiple years 
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Collection&lt;Object&gt;</returns>
    public async Task<Collection<Object>?> ReadYearsV3YearsGetAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default)
            {
        ApiResponse<Collection<object>?> localVarResponse = await ReadYearsV3YearsGetWithHttpInfoAsync(ascending, limit, metric, offset, cancellationToken).ConfigureAwait(false);
                return localVarResponse.Data;
              }

    /// <summary>
    /// Query multiple years 
    /// </summary>
    /// <exception cref="ApiException">Thrown when fails to make API call</exception>
    /// <param name="ascending">Whether to sort the returned values in ascending order. Default is ascending (optional)</param>
    /// <param name="limit">Maximum number of events to return. Default is 1000. (optional)</param>
    /// <param name="metric">How to sort the returned values. Any column in the table is valid. (optional)</param>
    /// <param name="offset">Offset from the first result to return. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Collection&lt;Object&gt;)</returns>
    public async Task<ApiResponse<Collection<object>?>> ReadYearsV3YearsGetWithHttpInfoAsync(bool? ascending = default, int? limit = default, string? metric = default, int? offset = default, CancellationToken cancellationToken = default)
              {
                RequestOptions localVarRequestOptions = new();
                
                string[] _contentTypes = [
                ];
                
                // to determine the Accept header
                string[] _accepts = [
                    "application/json"
                ];
                
                var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
                if (localVarContentType is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
                }
                
                var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
                if (localVarAccept is not null)
                {
                  localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
                }
                
                    if (ascending is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ascending", ascending));
                    }
                    
                    if (limit is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "limit", limit));
                    }
                    
                    if (metric is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "metric", metric));
                    }
                    
                    if (offset is not null)
                    {
                      localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
                    }
                    
                                // make the HTTP request
                var localVarResponse = await this.AsynchronousClient.GetAsync<Collection<Object>?>("/v3/years", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);
                
                if (this.ExceptionFactory is not null)
                {
                  var _exception = this.ExceptionFactory("ReadYearsV3YearsGet", localVarResponse);
                  if (_exception is not null)
                  {
                    throw _exception;
                  }
                }
                
                return localVarResponse;
              }
            }
