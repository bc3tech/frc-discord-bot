/*
 * Statbotics REST API
 *
 * The REST API for Statbotics. Please be nice to our servers! If you are looking to do large-scale data science projects, use the CSV exports on the GitHub repo.
 *
 * The version of the OpenAPI document: 3.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

    namespace Statbotics.Model;
    
    using System.Text;
    using System.Text.Json;
    using System.Text.Json.Serialization;
using System.Collections.ObjectModel;
    
      /// <summary>
  /// ValidationErrorLocInner
  /// </summary>
  
    internal partial class ValidationErrorLocInner : AbstractOpenAPISchema
    {
      public override string SchemaType { get; } = AnyOf;
      
            /// <summary>
            /// Initializes a new instance of the <see cref="ValidationErrorLocInner" /> class
            /// with the <see cref="string" /> class
            /// </summary>
            /// <param name="actualInstance">An instance of string.</param>
            public ValidationErrorLocInner(string actualInstance)
            {
              this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
            }
            /// <summary>
            /// Initializes a new instance of the <see cref="ValidationErrorLocInner" /> class
            /// with the <see cref="int" /> class
            /// </summary>
            /// <param name="actualInstance">An instance of int.</param>
            public ValidationErrorLocInner(int actualInstance)
            {
              this.ActualInstance = actualInstance;
            }
      
      private object _actualInstance;
      
      /// <summary>
      /// Gets or Sets ActualInstance
      /// </summary>
      public override object ActualInstance
      {
        get
        {
          return _actualInstance;
        }
        set
        {
            if (value.GetType() == typeof(int))
              {
                this._actualInstance = value;
              }
            else if (value.GetType() == typeof(string))
              {
                this._actualInstance = value;
              }
            else
            {
              throw new ArgumentException("Invalid instance found. Must be the following types: int, string");
            }
          }
        }
              
              /// <summary>
              /// Get the actual instance of `string`. If the actual instance is not `string`,
              /// the InvalidClassException will be thrown
              /// </summary>
              /// <returns>An instance of string</returns>
              public string GetString()
              {
                return (string)this.ActualInstance;
              }
              
              /// <summary>
              /// Get the actual instance of `int`. If the actual instance is not `int`,
              /// the InvalidClassException will be thrown
              /// </summary>
              /// <returns>An instance of int</returns>
              public int GetInt()
              {
                return (int)this.ActualInstance;
              }
        
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>string presentation of the object</returns>
        public override string ToString()
        {
          var sb = new StringBuilder();
          sb.AppendLine("class ValidationErrorLocInner {");
          sb.Append("  ActualInstance: ").Append(this.ActualInstance).AppendLine();
          sb.AppendLine("}");
          return sb.ToString();
        }
        
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
          return JsonSerializer.Serialize(this.ActualInstance, ValidationErrorLocInner.SerializerSettings);
        }
        
        /// <summary>
        /// Converts the JSON string into an instance of ValidationErrorLocInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ValidationErrorLocInner</returns>
        public static ValidationErrorLocInner FromJson(string jsonString)
        {
          ValidationErrorLocInner newValidationErrorLocInner = null;
          
          if (string.IsNullOrEmpty(jsonString))
          {
            return newValidationErrorLocInner;
          }
            
            try
            {
              newValidationErrorLocInner = new ValidationErrorLocInner(JsonSerializer.Deserialize<int>(jsonString, ValidationErrorLocInner.SerializerSettings));
              // deserialization is considered successful at this point if no exception has been thrown.
              return newValidationErrorLocInner;
            }
            catch (Exception exception)
            {
              // deserialization failed, try the next one
              System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into int: {1}", jsonString, exception.ToString()));
            }
            
            try
            {
              newValidationErrorLocInner = new ValidationErrorLocInner(JsonSerializer.Deserialize<string>(jsonString, ValidationErrorLocInner.SerializerSettings));
              // deserialization is considered successful at this point if no exception has been thrown.
              return newValidationErrorLocInner;
            }
            catch (Exception exception)
            {
              // deserialization failed, try the next one
              System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into string: {1}", jsonString, exception.ToString()));
            }
          
          // no match found, throw an exception
          throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }
      }

